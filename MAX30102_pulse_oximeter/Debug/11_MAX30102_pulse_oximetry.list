
11_MAX30102_pulse_oximetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a10  08005460  08005460  00015460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e70  08007e70  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08007e70  08007e70  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e70  08007e70  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e70  08007e70  00017e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e74  08007e74  00017e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007e78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  20000080  08007ef8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08007ef8  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000058de  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a2b  00000000  00000000  000259d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005e0  00000000  00000000  00027400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000042c  00000000  00000000  000279e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011711  00000000  00000000  00027e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000937d  00000000  00000000  0003951d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00057fd3  00000000  00000000  0004289a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f74  00000000  00000000  0009a870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0009c7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005448 	.word	0x08005448

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08005448 	.word	0x08005448

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <DEV_Digital_Write>:
function:	Delay function
note:
	Driver_Delay_ms(xms) : Delay x ms
********************************************************************************/

void DEV_Digital_Write(GPIO_TypeDef* GPIOx, uint16_t Pin, uint8_t Value) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]
 8000c04:	4613      	mov	r3, r2
 8000c06:	707b      	strb	r3, [r7, #1]
    if (Value == 0) {
 8000c08:	787b      	ldrb	r3, [r7, #1]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d104      	bne.n	8000c18 <DEV_Digital_Write+0x20>
        GPIOx->BSRR = (uint32_t)Pin << 16; // Reset the pin (BSRR register, reset part)
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	041a      	lsls	r2, r3, #16
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = Pin; // Set the pin (BSRR register, set part)
    }
}
 8000c16:	e002      	b.n	8000c1e <DEV_Digital_Write+0x26>
        GPIOx->BSRR = Pin; // Set the pin (BSRR register, set part)
 8000c18:	887a      	ldrh	r2, [r7, #2]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	619a      	str	r2, [r3, #24]
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <DEV_SPI_WRite>:
	delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	spi_transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8000c36:	1df9      	adds	r1, r7, #7
 8000c38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4803      	ldr	r0, [pc, #12]	; (8000c4c <DEV_SPI_WRite+0x20>)
 8000c40:	f002 fe84 	bl	800394c <spi_transmit>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200000c4 	.word	0x200000c4

08000c50 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <DEV_Module_Init+0x2c>)
 8000c5c:	f7ff ffcc 	bl	8000bf8 <DEV_Digital_Write>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <DEV_Module_Init+0x30>)
 8000c66:	f7ff ffc7 	bl	8000bf8 <DEV_Digital_Write>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <DEV_Module_Init+0x2c>)
 8000c72:	f7ff ffc1 	bl	8000bf8 <DEV_Digital_Write>
		return 0;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020400 	.word	0x40020400

08000c84 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	4611      	mov	r1, r2
 8000c90:	461a      	mov	r2, r3
 8000c92:	4623      	mov	r3, r4
 8000c94:	80fb      	strh	r3, [r7, #6]
 8000c96:	4603      	mov	r3, r0
 8000c98:	80bb      	strh	r3, [r7, #4]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	807b      	strh	r3, [r7, #2]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <Paint_NewImage+0x90>)
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000ca8:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <Paint_NewImage+0x90>)
 8000caa:	88bb      	ldrh	r3, [r7, #4]
 8000cac:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000cae:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <Paint_NewImage+0x90>)
 8000cb0:	883b      	ldrh	r3, [r7, #0]
 8000cb2:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8000cb4:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <Paint_NewImage+0x90>)
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000cba:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <Paint_NewImage+0x90>)
 8000cbc:	88bb      	ldrh	r3, [r7, #4]
 8000cbe:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <Paint_NewImage+0x90>)
 8000cc2:	8a5b      	ldrh	r3, [r3, #18]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <Paint_NewImage+0x90>)
 8000cca:	8a9b      	ldrh	r3, [r3, #20]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4811      	ldr	r0, [pc, #68]	; (8000d18 <Paint_NewImage+0x94>)
 8000cd2:	f003 fa85 	bl	80041e0 <iprintf>
   
    Paint.Rotate = Rotate;
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <Paint_NewImage+0x90>)
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <Paint_NewImage+0x90>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000ce2:	887b      	ldrh	r3, [r7, #2]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <Paint_NewImage+0x6a>
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	2bb4      	cmp	r3, #180	; 0xb4
 8000cec:	d106      	bne.n	8000cfc <Paint_NewImage+0x78>
        Paint.Width = Width;
 8000cee:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <Paint_NewImage+0x90>)
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <Paint_NewImage+0x90>)
 8000cf6:	88bb      	ldrh	r3, [r7, #4]
 8000cf8:	80d3      	strh	r3, [r2, #6]
 8000cfa:	e006      	b.n	8000d0a <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8000cfc:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <Paint_NewImage+0x90>)
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <Paint_NewImage+0x90>)
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	80d3      	strh	r3, [r2, #6]
    }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000009c 	.word	0x2000009c
 8000d18:	08005460 	.word	0x08005460

08000d1c <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <Paint_SetClearFuntion+0x1c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200000b8 	.word	0x200000b8

08000d3c <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <Paint_SetDisplayFuntion+0x1c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200000b4 	.word	0x200000b4

08000d5c <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
 8000d66:	460b      	mov	r3, r1
 8000d68:	80bb      	strh	r3, [r7, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000d6e:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000d70:	889b      	ldrh	r3, [r3, #4]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	88fa      	ldrh	r2, [r7, #6]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d805      	bhi.n	8000d86 <Paint_SetPixel+0x2a>
 8000d7a:	4b4d      	ldr	r3, [pc, #308]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000d7c:	88db      	ldrh	r3, [r3, #6]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	88ba      	ldrh	r2, [r7, #4]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d903      	bls.n	8000d8e <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8000d86:	484b      	ldr	r0, [pc, #300]	; (8000eb4 <Paint_SetPixel+0x158>)
 8000d88:	f003 fa90 	bl	80042ac <puts>
        return;
 8000d8c:	e08c      	b.n	8000ea8 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000d8e:	4b48      	ldr	r3, [pc, #288]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000d90:	89db      	ldrh	r3, [r3, #14]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000d98:	d02d      	beq.n	8000df6 <Paint_SetPixel+0x9a>
 8000d9a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000d9e:	f300 8080 	bgt.w	8000ea2 <Paint_SetPixel+0x146>
 8000da2:	2bb4      	cmp	r3, #180	; 0xb4
 8000da4:	d016      	beq.n	8000dd4 <Paint_SetPixel+0x78>
 8000da6:	2bb4      	cmp	r3, #180	; 0xb4
 8000da8:	dc7b      	bgt.n	8000ea2 <Paint_SetPixel+0x146>
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <Paint_SetPixel+0x58>
 8000dae:	2b5a      	cmp	r3, #90	; 0x5a
 8000db0:	d005      	beq.n	8000dbe <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8000db2:	e076      	b.n	8000ea2 <Paint_SetPixel+0x146>
        X = Xpoint;
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8000db8:	88bb      	ldrh	r3, [r7, #4]
 8000dba:	81bb      	strh	r3, [r7, #12]
        break;
 8000dbc:	e026      	b.n	8000e0c <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 8000dbe:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000dc0:	891b      	ldrh	r3, [r3, #8]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	81bb      	strh	r3, [r7, #12]
        break;
 8000dd2:	e01b      	b.n	8000e0c <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8000dd4:	4b36      	ldr	r3, [pc, #216]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000dd6:	891b      	ldrh	r3, [r3, #8]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	3b01      	subs	r3, #1
 8000de2:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8000de4:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000de6:	895b      	ldrh	r3, [r3, #10]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	3b01      	subs	r3, #1
 8000df2:	81bb      	strh	r3, [r7, #12]
        break;
 8000df4:	e00a      	b.n	8000e0c <Paint_SetPixel+0xb0>
        X = Ypoint;
 8000df6:	88bb      	ldrh	r3, [r7, #4]
 8000df8:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000dfc:	895b      	ldrh	r3, [r3, #10]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	3b01      	subs	r3, #1
 8000e08:	81bb      	strh	r3, [r7, #12]
        break;
 8000e0a:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000e0e:	8a1b      	ldrh	r3, [r3, #16]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d847      	bhi.n	8000ea6 <Paint_SetPixel+0x14a>
 8000e16:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <Paint_SetPixel+0xc0>)
 8000e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1c:	08000e73 	.word	0x08000e73
 8000e20:	08000e2d 	.word	0x08000e2d
 8000e24:	08000e3f 	.word	0x08000e3f
 8000e28:	08000e51 	.word	0x08000e51
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000e2e:	891b      	ldrh	r3, [r3, #8]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	81fb      	strh	r3, [r7, #14]
        break;
 8000e3c:	e01a      	b.n	8000e74 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000e40:	895b      	ldrh	r3, [r3, #10]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	89bb      	ldrh	r3, [r7, #12]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	81bb      	strh	r3, [r7, #12]
        break;
 8000e4e:	e011      	b.n	8000e74 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000e52:	891b      	ldrh	r3, [r3, #8]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	89fb      	ldrh	r3, [r7, #14]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000e62:	895b      	ldrh	r3, [r3, #10]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	89bb      	ldrh	r3, [r7, #12]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	81bb      	strh	r3, [r7, #12]
        break;
 8000e70:	e000      	b.n	8000e74 <Paint_SetPixel+0x118>
        break;
 8000e72:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000e76:	891b      	ldrh	r3, [r3, #8]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	89fa      	ldrh	r2, [r7, #14]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d805      	bhi.n	8000e8c <Paint_SetPixel+0x130>
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <Paint_SetPixel+0x154>)
 8000e82:	895b      	ldrh	r3, [r3, #10]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	89ba      	ldrh	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d903      	bls.n	8000e94 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <Paint_SetPixel+0x158>)
 8000e8e:	f003 fa0d 	bl	80042ac <puts>
        return;
 8000e92:	e009      	b.n	8000ea8 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <Paint_SetPixel+0x15c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	887a      	ldrh	r2, [r7, #2]
 8000e9a:	89b9      	ldrh	r1, [r7, #12]
 8000e9c:	89f8      	ldrh	r0, [r7, #14]
 8000e9e:	4798      	blx	r3
 8000ea0:	e002      	b.n	8000ea8 <Paint_SetPixel+0x14c>
        return;
 8000ea2:	bf00      	nop
 8000ea4:	e000      	b.n	8000ea8 <Paint_SetPixel+0x14c>
        return;
 8000ea6:	bf00      	nop
}
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000009c 	.word	0x2000009c
 8000eb4:	08005560 	.word	0x08005560
 8000eb8:	200000b4 	.word	0x200000b4

08000ebc <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4623      	mov	r3, r4
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80bb      	strh	r3, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	807b      	strh	r3, [r7, #2]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000eda:	4b44      	ldr	r3, [pc, #272]	; (8000fec <Paint_DrawPoint+0x130>)
 8000edc:	889b      	ldrh	r3, [r3, #4]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d805      	bhi.n	8000ef2 <Paint_DrawPoint+0x36>
 8000ee6:	4b41      	ldr	r3, [pc, #260]	; (8000fec <Paint_DrawPoint+0x130>)
 8000ee8:	88db      	ldrh	r3, [r3, #6]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d903      	bls.n	8000efa <Paint_DrawPoint+0x3e>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8000ef2:	483f      	ldr	r0, [pc, #252]	; (8000ff0 <Paint_DrawPoint+0x134>)
 8000ef4:	f003 f9da 	bl	80042ac <puts>
        return;
 8000ef8:	e074      	b.n	8000fe4 <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 8000efa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d144      	bne.n	8000f8c <Paint_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	81fb      	strh	r3, [r7, #14]
 8000f06:	e039      	b.n	8000f7c <Paint_DrawPoint+0xc0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000f08:	2300      	movs	r3, #0
 8000f0a:	81bb      	strh	r3, [r7, #12]
 8000f0c:	e029      	b.n	8000f62 <Paint_DrawPoint+0xa6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8000f0e:	88fa      	ldrh	r2, [r7, #6]
 8000f10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f14:	441a      	add	r2, r3
 8000f16:	787b      	ldrb	r3, [r7, #1]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db28      	blt.n	8000f70 <Paint_DrawPoint+0xb4>
 8000f1e:	88ba      	ldrh	r2, [r7, #4]
 8000f20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f24:	441a      	add	r2, r3
 8000f26:	787b      	ldrb	r3, [r7, #1]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db20      	blt.n	8000f70 <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8000f2e:	89fa      	ldrh	r2, [r7, #14]
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	4413      	add	r3, r2
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	787b      	ldrb	r3, [r7, #1]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	b298      	uxth	r0, r3
 8000f3e:	89ba      	ldrh	r2, [r7, #12]
 8000f40:	88bb      	ldrh	r3, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	787b      	ldrb	r3, [r7, #1]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff ff03 	bl	8000d5c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000f56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	81bb      	strh	r3, [r7, #12]
 8000f62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f66:	787b      	ldrb	r3, [r7, #1]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbce      	blt.n	8000f0e <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8000f70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	3301      	adds	r3, #1
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	81fb      	strh	r3, [r7, #14]
 8000f7c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	3b01      	subs	r3, #1
 8000f86:	429a      	cmp	r2, r3
 8000f88:	dbbe      	blt.n	8000f08 <Paint_DrawPoint+0x4c>
 8000f8a:	e02b      	b.n	8000fe4 <Paint_DrawPoint+0x128>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	81fb      	strh	r3, [r7, #14]
 8000f90:	e023      	b.n	8000fda <Paint_DrawPoint+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	81bb      	strh	r3, [r7, #12]
 8000f96:	e015      	b.n	8000fc4 <Paint_DrawPoint+0x108>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8000f98:	89fa      	ldrh	r2, [r7, #14]
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	b298      	uxth	r0, r3
 8000fa4:	89ba      	ldrh	r2, [r7, #12]
 8000fa6:	88bb      	ldrh	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	3b01      	subs	r3, #1
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f7ff fed2 	bl	8000d5c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8000fb8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	81bb      	strh	r3, [r7, #12]
 8000fc4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dbe4      	blt.n	8000f98 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8000fce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	81fb      	strh	r3, [r7, #14]
 8000fda:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000fde:	787b      	ldrb	r3, [r7, #1]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbd6      	blt.n	8000f92 <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000009c 	.word	0x2000009c
 8000ff0:	08005588 	.word	0x08005588

08000ff4 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b08d      	sub	sp, #52	; 0x34
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	4623      	mov	r3, r4
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	4603      	mov	r3, r0
 8001008:	80bb      	strh	r3, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	807b      	strh	r3, [r7, #2]
 800100e:	4613      	mov	r3, r2
 8001010:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001012:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <Paint_DrawLine+0x154>)
 8001014:	889b      	ldrh	r3, [r3, #4]
 8001016:	b29b      	uxth	r3, r3
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	429a      	cmp	r2, r3
 800101c:	d811      	bhi.n	8001042 <Paint_DrawLine+0x4e>
 800101e:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <Paint_DrawLine+0x154>)
 8001020:	88db      	ldrh	r3, [r3, #6]
 8001022:	b29b      	uxth	r3, r3
 8001024:	88ba      	ldrh	r2, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	d80b      	bhi.n	8001042 <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800102a:	4b47      	ldr	r3, [pc, #284]	; (8001148 <Paint_DrawLine+0x154>)
 800102c:	889b      	ldrh	r3, [r3, #4]
 800102e:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001030:	887a      	ldrh	r2, [r7, #2]
 8001032:	429a      	cmp	r2, r3
 8001034:	d805      	bhi.n	8001042 <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001036:	4b44      	ldr	r3, [pc, #272]	; (8001148 <Paint_DrawLine+0x154>)
 8001038:	88db      	ldrh	r3, [r3, #6]
 800103a:	b29b      	uxth	r3, r3
 800103c:	883a      	ldrh	r2, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d903      	bls.n	800104a <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8001042:	4842      	ldr	r0, [pc, #264]	; (800114c <Paint_DrawLine+0x158>)
 8001044:	f003 f932 	bl	80042ac <puts>
        return;
 8001048:	e07b      	b.n	8001142 <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	bfb8      	it	lt
 800105c:	425b      	neglt	r3, r3
 800105e:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8001060:	883a      	ldrh	r2, [r7, #0]
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	bfb8      	it	lt
 800106a:	425b      	neglt	r3, r3
 800106c:	425b      	negs	r3, r3
 800106e:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	429a      	cmp	r2, r3
 8001076:	d201      	bcs.n	800107c <Paint_DrawLine+0x88>
 8001078:	2301      	movs	r3, #1
 800107a:	e001      	b.n	8001080 <Paint_DrawLine+0x8c>
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8001082:	88ba      	ldrh	r2, [r7, #4]
 8001084:	883b      	ldrh	r3, [r7, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d201      	bcs.n	800108e <Paint_DrawLine+0x9a>
 800108a:	2301      	movs	r3, #1
 800108c:	e001      	b.n	8001092 <Paint_DrawLine+0x9e>
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	4413      	add	r3, r2
 800109a:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	3301      	adds	r3, #1
 80010a4:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 80010a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d118      	bne.n	80010e0 <Paint_DrawLine+0xec>
 80010ae:	7ffa      	ldrb	r2, [r7, #31]
 80010b0:	4b27      	ldr	r3, [pc, #156]	; (8001150 <Paint_DrawLine+0x15c>)
 80010b2:	fba3 1302 	umull	r1, r3, r3, r2
 80010b6:	0859      	lsrs	r1, r3, #1
 80010b8:	460b      	mov	r3, r1
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	440b      	add	r3, r1
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10c      	bne.n	80010e0 <Paint_DrawLine+0xec>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80010c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80010ca:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80010cc:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80010ce:	2201      	movs	r2, #1
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d6:	f7ff fef1 	bl	8000ebc <Paint_DrawPoint>
            Dotted_Len = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	77fb      	strb	r3, [r7, #31]
 80010de:	e008      	b.n	80010f2 <Paint_DrawLine+0xfe>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80010e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80010e4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80010e8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80010ea:	2401      	movs	r4, #1
 80010ec:	9400      	str	r4, [sp, #0]
 80010ee:	f7ff fee5 	bl	8000ebc <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 80010f2:	6a3b      	ldr	r3, [r7, #32]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dc0c      	bgt.n	8001116 <Paint_DrawLine+0x122>
            if (Xpoint == Xend)
 80010fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	429a      	cmp	r2, r3
 8001102:	d01b      	beq.n	800113c <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 8001104:	6a3a      	ldr	r2, [r7, #32]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	b29a      	uxth	r2, r3
 8001110:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001112:	4413      	add	r3, r2
 8001114:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbbf      	blt.n	80010a0 <Paint_DrawLine+0xac>
            if (Ypoint == Yend)
 8001120:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001122:	883b      	ldrh	r3, [r7, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d00b      	beq.n	8001140 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 8001128:	6a3a      	ldr	r2, [r7, #32]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4413      	add	r3, r2
 800112e:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	b29a      	uxth	r2, r3
 8001134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001136:	4413      	add	r3, r2
 8001138:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800113a:	e7b1      	b.n	80010a0 <Paint_DrawLine+0xac>
                break;
 800113c:	bf00      	nop
 800113e:	e000      	b.n	8001142 <Paint_DrawLine+0x14e>
                break;
 8001140:	bf00      	nop
        }
    }
}
 8001142:	372c      	adds	r7, #44	; 0x2c
 8001144:	46bd      	mov	sp, r7
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	2000009c 	.word	0x2000009c
 800114c:	080055c8 	.word	0x080055c8
 8001150:	aaaaaaab 	.word	0xaaaaaaab

08001154 <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b087      	sub	sp, #28
 8001158:	af02      	add	r7, sp, #8
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	80bb      	strh	r3, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
 800116e:	4613      	mov	r3, r2
 8001170:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8001172:	4b68      	ldr	r3, [pc, #416]	; (8001314 <Paint_DrawCircle+0x1c0>)
 8001174:	889b      	ldrh	r3, [r3, #4]
 8001176:	b29b      	uxth	r3, r3
 8001178:	88fa      	ldrh	r2, [r7, #6]
 800117a:	429a      	cmp	r2, r3
 800117c:	d805      	bhi.n	800118a <Paint_DrawCircle+0x36>
 800117e:	4b65      	ldr	r3, [pc, #404]	; (8001314 <Paint_DrawCircle+0x1c0>)
 8001180:	88db      	ldrh	r3, [r3, #6]
 8001182:	b29b      	uxth	r3, r3
 8001184:	88ba      	ldrh	r2, [r7, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	d303      	bcc.n	8001192 <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800118a:	4863      	ldr	r0, [pc, #396]	; (8001318 <Paint_DrawCircle+0x1c4>)
 800118c:	f003 f88e 	bl	80042ac <puts>
        return;
 8001190:	e16b      	b.n	800146a <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	b29b      	uxth	r3, r3
 80011a0:	f1c3 0303 	rsb	r3, r3, #3
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 80011a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	f040 8155 	bne.w	800145c <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 80011b2:	e0a6      	b.n	8001302 <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80011b4:	89fb      	ldrh	r3, [r7, #14]
 80011b6:	813b      	strh	r3, [r7, #8]
 80011b8:	e075      	b.n	80012a6 <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 80011ba:	89fa      	ldrh	r2, [r7, #14]
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	4413      	add	r3, r2
 80011c0:	b298      	uxth	r0, r3
 80011c2:	893a      	ldrh	r2, [r7, #8]
 80011c4:	88bb      	ldrh	r3, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	b299      	uxth	r1, r3
 80011ca:	883a      	ldrh	r2, [r7, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	f7ff fe73 	bl	8000ebc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	b298      	uxth	r0, r3
 80011de:	893a      	ldrh	r2, [r7, #8]
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	b299      	uxth	r1, r3
 80011e6:	883a      	ldrh	r2, [r7, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	f7ff fe65 	bl	8000ebc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 80011f2:	893b      	ldrh	r3, [r7, #8]
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	b298      	uxth	r0, r3
 80011fa:	89fa      	ldrh	r2, [r7, #14]
 80011fc:	88bb      	ldrh	r3, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	b299      	uxth	r1, r3
 8001202:	883a      	ldrh	r2, [r7, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	f7ff fe57 	bl	8000ebc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800120e:	893b      	ldrh	r3, [r7, #8]
 8001210:	88fa      	ldrh	r2, [r7, #6]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	b298      	uxth	r0, r3
 8001216:	89fb      	ldrh	r3, [r7, #14]
 8001218:	88ba      	ldrh	r2, [r7, #4]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b299      	uxth	r1, r3
 800121e:	883a      	ldrh	r2, [r7, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	f7ff fe49 	bl	8000ebc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	88fa      	ldrh	r2, [r7, #6]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	b298      	uxth	r0, r3
 8001232:	893b      	ldrh	r3, [r7, #8]
 8001234:	88ba      	ldrh	r2, [r7, #4]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	b299      	uxth	r1, r3
 800123a:	883a      	ldrh	r2, [r7, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	f7ff fe3b 	bl	8000ebc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8001246:	89fa      	ldrh	r2, [r7, #14]
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	4413      	add	r3, r2
 800124c:	b298      	uxth	r0, r3
 800124e:	893b      	ldrh	r3, [r7, #8]
 8001250:	88ba      	ldrh	r2, [r7, #4]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	b299      	uxth	r1, r3
 8001256:	883a      	ldrh	r2, [r7, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	f7ff fe2d 	bl	8000ebc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8001262:	893a      	ldrh	r2, [r7, #8]
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	4413      	add	r3, r2
 8001268:	b298      	uxth	r0, r3
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	88ba      	ldrh	r2, [r7, #4]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	b299      	uxth	r1, r3
 8001272:	883a      	ldrh	r2, [r7, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	f7ff fe1f 	bl	8000ebc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800127e:	893a      	ldrh	r2, [r7, #8]
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	4413      	add	r3, r2
 8001284:	b298      	uxth	r0, r3
 8001286:	89fa      	ldrh	r2, [r7, #14]
 8001288:	88bb      	ldrh	r3, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	b299      	uxth	r1, r3
 800128e:	883a      	ldrh	r2, [r7, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	f7ff fe11 	bl	8000ebc <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800129a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	3301      	adds	r3, #1
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	813b      	strh	r3, [r7, #8]
 80012a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80012aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dd83      	ble.n	80011ba <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 80012b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da09      	bge.n	80012ce <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	b29a      	uxth	r2, r3
 80012c0:	897b      	ldrh	r3, [r7, #10]
 80012c2:	4413      	add	r3, r2
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3306      	adds	r3, #6
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	817b      	strh	r3, [r7, #10]
 80012cc:	e013      	b.n	80012f6 <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 80012ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80012d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	b29a      	uxth	r2, r3
 80012de:	897b      	ldrh	r3, [r7, #10]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	330a      	adds	r3, #10
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 80012ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	3b01      	subs	r3, #1
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 80012f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	3301      	adds	r3, #1
 80012fe:	b29b      	uxth	r3, r3
 8001300:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 8001302:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001306:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800130a:	429a      	cmp	r2, r3
 800130c:	f77f af52 	ble.w	80011b4 <Paint_DrawCircle+0x60>
 8001310:	e0ab      	b.n	800146a <Paint_DrawCircle+0x316>
 8001312:	bf00      	nop
 8001314:	2000009c 	.word	0x2000009c
 8001318:	08005638 	.word	0x08005638
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 800131c:	89fa      	ldrh	r2, [r7, #14]
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	4413      	add	r3, r2
 8001322:	b298      	uxth	r0, r3
 8001324:	89ba      	ldrh	r2, [r7, #12]
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	b299      	uxth	r1, r3
 800132c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001330:	883a      	ldrh	r2, [r7, #0]
 8001332:	2401      	movs	r4, #1
 8001334:	9400      	str	r4, [sp, #0]
 8001336:	f7ff fdc1 	bl	8000ebc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	88fa      	ldrh	r2, [r7, #6]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b298      	uxth	r0, r3
 8001342:	89ba      	ldrh	r2, [r7, #12]
 8001344:	88bb      	ldrh	r3, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	b299      	uxth	r1, r3
 800134a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800134e:	883a      	ldrh	r2, [r7, #0]
 8001350:	2401      	movs	r4, #1
 8001352:	9400      	str	r4, [sp, #0]
 8001354:	f7ff fdb2 	bl	8000ebc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8001358:	89bb      	ldrh	r3, [r7, #12]
 800135a:	88fa      	ldrh	r2, [r7, #6]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	b298      	uxth	r0, r3
 8001360:	89fa      	ldrh	r2, [r7, #14]
 8001362:	88bb      	ldrh	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	b299      	uxth	r1, r3
 8001368:	f897 3020 	ldrb.w	r3, [r7, #32]
 800136c:	883a      	ldrh	r2, [r7, #0]
 800136e:	2401      	movs	r4, #1
 8001370:	9400      	str	r4, [sp, #0]
 8001372:	f7ff fda3 	bl	8000ebc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8001376:	89bb      	ldrh	r3, [r7, #12]
 8001378:	88fa      	ldrh	r2, [r7, #6]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	b298      	uxth	r0, r3
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	88ba      	ldrh	r2, [r7, #4]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b299      	uxth	r1, r3
 8001386:	f897 3020 	ldrb.w	r3, [r7, #32]
 800138a:	883a      	ldrh	r2, [r7, #0]
 800138c:	2401      	movs	r4, #1
 800138e:	9400      	str	r4, [sp, #0]
 8001390:	f7ff fd94 	bl	8000ebc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b298      	uxth	r0, r3
 800139c:	89bb      	ldrh	r3, [r7, #12]
 800139e:	88ba      	ldrh	r2, [r7, #4]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	b299      	uxth	r1, r3
 80013a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013a8:	883a      	ldrh	r2, [r7, #0]
 80013aa:	2401      	movs	r4, #1
 80013ac:	9400      	str	r4, [sp, #0]
 80013ae:	f7ff fd85 	bl	8000ebc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 80013b2:	89fa      	ldrh	r2, [r7, #14]
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	4413      	add	r3, r2
 80013b8:	b298      	uxth	r0, r3
 80013ba:	89bb      	ldrh	r3, [r7, #12]
 80013bc:	88ba      	ldrh	r2, [r7, #4]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	b299      	uxth	r1, r3
 80013c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013c6:	883a      	ldrh	r2, [r7, #0]
 80013c8:	2401      	movs	r4, #1
 80013ca:	9400      	str	r4, [sp, #0]
 80013cc:	f7ff fd76 	bl	8000ebc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 80013d0:	89ba      	ldrh	r2, [r7, #12]
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	4413      	add	r3, r2
 80013d6:	b298      	uxth	r0, r3
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	88ba      	ldrh	r2, [r7, #4]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	b299      	uxth	r1, r3
 80013e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013e4:	883a      	ldrh	r2, [r7, #0]
 80013e6:	2401      	movs	r4, #1
 80013e8:	9400      	str	r4, [sp, #0]
 80013ea:	f7ff fd67 	bl	8000ebc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 80013ee:	89ba      	ldrh	r2, [r7, #12]
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	4413      	add	r3, r2
 80013f4:	b298      	uxth	r0, r3
 80013f6:	89fa      	ldrh	r2, [r7, #14]
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	b299      	uxth	r1, r3
 80013fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001402:	883a      	ldrh	r2, [r7, #0]
 8001404:	2401      	movs	r4, #1
 8001406:	9400      	str	r4, [sp, #0]
 8001408:	f7ff fd58 	bl	8000ebc <Paint_DrawPoint>

            if (Esp < 0 )
 800140c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001410:	2b00      	cmp	r3, #0
 8001412:	da09      	bge.n	8001428 <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	b29a      	uxth	r2, r3
 800141a:	897b      	ldrh	r3, [r7, #10]
 800141c:	4413      	add	r3, r2
 800141e:	b29b      	uxth	r3, r3
 8001420:	3306      	adds	r3, #6
 8001422:	b29b      	uxth	r3, r3
 8001424:	817b      	strh	r3, [r7, #10]
 8001426:	e013      	b.n	8001450 <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8001428:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800142c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	b29b      	uxth	r3, r3
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	b29a      	uxth	r2, r3
 8001438:	897b      	ldrh	r3, [r7, #10]
 800143a:	4413      	add	r3, r2
 800143c:	b29b      	uxth	r3, r3
 800143e:	330a      	adds	r3, #10
 8001440:	b29b      	uxth	r3, r3
 8001442:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001444:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001448:	b29b      	uxth	r3, r3
 800144a:	3b01      	subs	r3, #1
 800144c:	b29b      	uxth	r3, r3
 800144e:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001454:	b29b      	uxth	r3, r3
 8001456:	3301      	adds	r3, #1
 8001458:	b29b      	uxth	r3, r3
 800145a:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 800145c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001460:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	f77f af59 	ble.w	800131c <Paint_DrawCircle+0x1c8>
        }
    }
}
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}

08001470 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	4603      	mov	r3, r0
 800147a:	81fb      	strh	r3, [r7, #14]
 800147c:	460b      	mov	r3, r1
 800147e:	81bb      	strh	r3, [r7, #12]
 8001480:	4613      	mov	r3, r2
 8001482:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001484:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <Paint_DrawChar+0x150>)
 8001486:	889b      	ldrh	r3, [r3, #4]
 8001488:	b29b      	uxth	r3, r3
 800148a:	89fa      	ldrh	r2, [r7, #14]
 800148c:	429a      	cmp	r2, r3
 800148e:	d805      	bhi.n	800149c <Paint_DrawChar+0x2c>
 8001490:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <Paint_DrawChar+0x150>)
 8001492:	88db      	ldrh	r3, [r3, #6]
 8001494:	b29b      	uxth	r3, r3
 8001496:	89ba      	ldrh	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d903      	bls.n	80014a4 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800149c:	4849      	ldr	r0, [pc, #292]	; (80015c4 <Paint_DrawChar+0x154>)
 800149e:	f002 ff05 	bl	80042ac <puts>
        return;
 80014a2:	e089      	b.n	80015b8 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80014a4:	7afb      	ldrb	r3, [r7, #11]
 80014a6:	3b20      	subs	r3, #32
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	88d2      	ldrh	r2, [r2, #6]
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	8892      	ldrh	r2, [r2, #4]
 80014b4:	08d2      	lsrs	r2, r2, #3
 80014b6:	b292      	uxth	r2, r2
 80014b8:	4611      	mov	r1, r2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	8892      	ldrh	r2, [r2, #4]
 80014be:	f002 0207 	and.w	r2, r2, #7
 80014c2:	b292      	uxth	r2, r2
 80014c4:	2a00      	cmp	r2, #0
 80014c6:	bf14      	ite	ne
 80014c8:	2201      	movne	r2, #1
 80014ca:	2200      	moveq	r2, #0
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440a      	add	r2, r1
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
 80014d4:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	4413      	add	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	83fb      	strh	r3, [r7, #30]
 80014e4:	e063      	b.n	80015ae <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	83bb      	strh	r3, [r7, #28]
 80014ea:	e04e      	b.n	800158a <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80014ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d118      	bne.n	8001528 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	8bbb      	ldrh	r3, [r7, #28]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	2280      	movs	r2, #128	; 0x80
 8001504:	fa42 f303 	asr.w	r3, r2, r3
 8001508:	400b      	ands	r3, r1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d031      	beq.n	8001572 <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800150e:	89fa      	ldrh	r2, [r7, #14]
 8001510:	8bbb      	ldrh	r3, [r7, #28]
 8001512:	4413      	add	r3, r2
 8001514:	b298      	uxth	r0, r3
 8001516:	89ba      	ldrh	r2, [r7, #12]
 8001518:	8bfb      	ldrh	r3, [r7, #30]
 800151a:	4413      	add	r3, r2
 800151c:	b29b      	uxth	r3, r3
 800151e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fc1b 	bl	8000d5c <Paint_SetPixel>
 8001526:	e024      	b.n	8001572 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	8bbb      	ldrh	r3, [r7, #28]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	2280      	movs	r2, #128	; 0x80
 8001536:	fa42 f303 	asr.w	r3, r2, r3
 800153a:	400b      	ands	r3, r1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00c      	beq.n	800155a <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001540:	89fa      	ldrh	r2, [r7, #14]
 8001542:	8bbb      	ldrh	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	b298      	uxth	r0, r3
 8001548:	89ba      	ldrh	r2, [r7, #12]
 800154a:	8bfb      	ldrh	r3, [r7, #30]
 800154c:	4413      	add	r3, r2
 800154e:	b29b      	uxth	r3, r3
 8001550:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fc02 	bl	8000d5c <Paint_SetPixel>
 8001558:	e00b      	b.n	8001572 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800155a:	89fa      	ldrh	r2, [r7, #14]
 800155c:	8bbb      	ldrh	r3, [r7, #28]
 800155e:	4413      	add	r3, r2
 8001560:	b298      	uxth	r0, r3
 8001562:	89ba      	ldrh	r2, [r7, #12]
 8001564:	8bfb      	ldrh	r3, [r7, #30]
 8001566:	4413      	add	r3, r2
 8001568:	b29b      	uxth	r3, r3
 800156a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fbf5 	bl	8000d5c <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001572:	8bbb      	ldrh	r3, [r7, #28]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	b29b      	uxth	r3, r3
 800157a:	2b07      	cmp	r3, #7
 800157c:	d102      	bne.n	8001584 <Paint_DrawChar+0x114>
                ptr++;
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	3301      	adds	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001584:	8bbb      	ldrh	r3, [r7, #28]
 8001586:	3301      	adds	r3, #1
 8001588:	83bb      	strh	r3, [r7, #28]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	889b      	ldrh	r3, [r3, #4]
 800158e:	8bba      	ldrh	r2, [r7, #28]
 8001590:	429a      	cmp	r2, r3
 8001592:	d3ab      	bcc.n	80014ec <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	889b      	ldrh	r3, [r3, #4]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	b29b      	uxth	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <Paint_DrawChar+0x138>
            ptr++;
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	3301      	adds	r3, #1
 80015a6:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80015a8:	8bfb      	ldrh	r3, [r7, #30]
 80015aa:	3301      	adds	r3, #1
 80015ac:	83fb      	strh	r3, [r7, #30]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	88db      	ldrh	r3, [r3, #6]
 80015b2:	8bfa      	ldrh	r2, [r7, #30]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d396      	bcc.n	80014e6 <Paint_DrawChar+0x76>
    }// Write all
}
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000009c 	.word	0x2000009c
 80015c4:	0800567c 	.word	0x0800567c

080015c8 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	60ba      	str	r2, [r7, #8]
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4603      	mov	r3, r0
 80015d4:	81fb      	strh	r3, [r7, #14]
 80015d6:	460b      	mov	r3, r1
 80015d8:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80015de:	89bb      	ldrh	r3, [r7, #12]
 80015e0:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <Paint_DrawString_EN+0xa8>)
 80015e4:	889b      	ldrh	r3, [r3, #4]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	89fa      	ldrh	r2, [r7, #14]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d805      	bhi.n	80015fa <Paint_DrawString_EN+0x32>
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <Paint_DrawString_EN+0xa8>)
 80015f0:	88db      	ldrh	r3, [r3, #6]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	89ba      	ldrh	r2, [r7, #12]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d933      	bls.n	8001662 <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80015fa:	481e      	ldr	r0, [pc, #120]	; (8001674 <Paint_DrawString_EN+0xac>)
 80015fc:	f002 fe56 	bl	80042ac <puts>
        return;
 8001600:	e033      	b.n	800166a <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8001602:	8afb      	ldrh	r3, [r7, #22]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	8892      	ldrh	r2, [r2, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a19      	ldr	r2, [pc, #100]	; (8001670 <Paint_DrawString_EN+0xa8>)
 800160c:	8892      	ldrh	r2, [r2, #4]
 800160e:	b292      	uxth	r2, r2
 8001610:	4293      	cmp	r3, r2
 8001612:	dd06      	ble.n	8001622 <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 8001614:	89fb      	ldrh	r3, [r7, #14]
 8001616:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	88da      	ldrh	r2, [r3, #6]
 800161c:	8abb      	ldrh	r3, [r7, #20]
 800161e:	4413      	add	r3, r2
 8001620:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001622:	8abb      	ldrh	r3, [r7, #20]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	88d2      	ldrh	r2, [r2, #6]
 8001628:	4413      	add	r3, r2
 800162a:	4a11      	ldr	r2, [pc, #68]	; (8001670 <Paint_DrawString_EN+0xa8>)
 800162c:	88d2      	ldrh	r2, [r2, #6]
 800162e:	b292      	uxth	r2, r2
 8001630:	4293      	cmp	r3, r2
 8001632:	dd03      	ble.n	800163c <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001638:	89bb      	ldrh	r3, [r7, #12]
 800163a:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	8ab9      	ldrh	r1, [r7, #20]
 8001642:	8af8      	ldrh	r0, [r7, #22]
 8001644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	8c3b      	ldrh	r3, [r7, #32]
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f7ff ff0f 	bl	8001470 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	3301      	adds	r3, #1
 8001656:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	889a      	ldrh	r2, [r3, #4]
 800165c:	8afb      	ldrh	r3, [r7, #22]
 800165e:	4413      	add	r3, r2
 8001660:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1cb      	bne.n	8001602 <Paint_DrawString_EN+0x3a>
    }
}
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2000009c 	.word	0x2000009c
 8001674:	080056bc 	.word	0x080056bc

08001678 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
    LCD_1IN28_RST_1;
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <LCD_1IN28_Reset+0x40>)
 8001684:	f7ff fab8 	bl	8000bf8 <DEV_Digital_Write>
    DEV_Delay_ms(100);
 8001688:	2064      	movs	r0, #100	; 0x64
 800168a:	f002 fb21 	bl	8003cd0 <delay>
    LCD_1IN28_RST_0;
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <LCD_1IN28_Reset+0x40>)
 8001696:	f7ff faaf 	bl	8000bf8 <DEV_Digital_Write>
    DEV_Delay_ms(100);
 800169a:	2064      	movs	r0, #100	; 0x64
 800169c:	f002 fb18 	bl	8003cd0 <delay>
    LCD_1IN28_RST_1;
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a6:	4804      	ldr	r0, [pc, #16]	; (80016b8 <LCD_1IN28_Reset+0x40>)
 80016a8:	f7ff faa6 	bl	8000bf8 <DEV_Digital_Write>
    DEV_Delay_ms(100);
 80016ac:	2064      	movs	r0, #100	; 0x64
 80016ae:	f002 fb0f 	bl	8003cd0 <delay>
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40020000 	.word	0x40020000

080016bc <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_0;
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016cc:	4807      	ldr	r0, [pc, #28]	; (80016ec <LCD_1IN28_SendCommand+0x30>)
 80016ce:	f7ff fa93 	bl	8000bf8 <DEV_Digital_Write>
    LCD_1IN28_CS_0;
 80016d2:	2200      	movs	r2, #0
 80016d4:	2140      	movs	r1, #64	; 0x40
 80016d6:	4806      	ldr	r0, [pc, #24]	; (80016f0 <LCD_1IN28_SendCommand+0x34>)
 80016d8:	f7ff fa8e 	bl	8000bf8 <DEV_Digital_Write>
    DEV_SPI_WRITE(Reg);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff faa4 	bl	8000c2c <DEV_SPI_WRite>
    // LCD_1IN28_CS_1;
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400

080016f4 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_1;
 80016fe:	2201      	movs	r2, #1
 8001700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <LCD_1IN28_SendData_8Bit+0x3c>)
 8001706:	f7ff fa77 	bl	8000bf8 <DEV_Digital_Write>
    LCD_1IN28_CS_0;
 800170a:	2200      	movs	r2, #0
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	4809      	ldr	r0, [pc, #36]	; (8001734 <LCD_1IN28_SendData_8Bit+0x40>)
 8001710:	f7ff fa72 	bl	8000bf8 <DEV_Digital_Write>
    DEV_SPI_WRITE(Data);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fa88 	bl	8000c2c <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 800171c:	2201      	movs	r2, #1
 800171e:	2140      	movs	r1, #64	; 0x40
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <LCD_1IN28_SendData_8Bit+0x40>)
 8001722:	f7ff fa69 	bl	8000bf8 <DEV_Digital_Write>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400

08001738 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	80fb      	strh	r3, [r7, #6]
    LCD_1IN28_DC_1;
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <LCD_1IN28_SendData_16Bit+0x4c>)
 800174a:	f7ff fa55 	bl	8000bf8 <DEV_Digital_Write>
    LCD_1IN28_CS_0;
 800174e:	2200      	movs	r2, #0
 8001750:	2140      	movs	r1, #64	; 0x40
 8001752:	480d      	ldr	r0, [pc, #52]	; (8001788 <LCD_1IN28_SendData_16Bit+0x50>)
 8001754:	f7ff fa50 	bl	8000bf8 <DEV_Digital_Write>
    DEV_SPI_WRITE(Data >> 8);
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	b29b      	uxth	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fa63 	bl	8000c2c <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fa5e 	bl	8000c2c <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8001770:	2201      	movs	r2, #1
 8001772:	2140      	movs	r1, #64	; 0x40
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <LCD_1IN28_SendData_16Bit+0x50>)
 8001776:	f7ff fa3f 	bl	8000bf8 <DEV_Digital_Write>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400

0800178c <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 8001790:	20ef      	movs	r0, #239	; 0xef
 8001792:	f7ff ff93 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 8001796:	20eb      	movs	r0, #235	; 0xeb
 8001798:	f7ff ff90 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 800179c:	2014      	movs	r0, #20
 800179e:	f7ff ffa9 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 80017a2:	20fe      	movs	r0, #254	; 0xfe
 80017a4:	f7ff ff8a 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 80017a8:	20ef      	movs	r0, #239	; 0xef
 80017aa:	f7ff ff87 	bl	80016bc <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 80017ae:	20eb      	movs	r0, #235	; 0xeb
 80017b0:	f7ff ff84 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 80017b4:	2014      	movs	r0, #20
 80017b6:	f7ff ff9d 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 80017ba:	2084      	movs	r0, #132	; 0x84
 80017bc:	f7ff ff7e 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 80017c0:	2040      	movs	r0, #64	; 0x40
 80017c2:	f7ff ff97 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 80017c6:	2085      	movs	r0, #133	; 0x85
 80017c8:	f7ff ff78 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80017cc:	20ff      	movs	r0, #255	; 0xff
 80017ce:	f7ff ff91 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 80017d2:	2086      	movs	r0, #134	; 0x86
 80017d4:	f7ff ff72 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80017d8:	20ff      	movs	r0, #255	; 0xff
 80017da:	f7ff ff8b 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 80017de:	2087      	movs	r0, #135	; 0x87
 80017e0:	f7ff ff6c 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 80017e4:	20ff      	movs	r0, #255	; 0xff
 80017e6:	f7ff ff85 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 80017ea:	2088      	movs	r0, #136	; 0x88
 80017ec:	f7ff ff66 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 80017f0:	200a      	movs	r0, #10
 80017f2:	f7ff ff7f 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 80017f6:	2089      	movs	r0, #137	; 0x89
 80017f8:	f7ff ff60 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 80017fc:	2021      	movs	r0, #33	; 0x21
 80017fe:	f7ff ff79 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 8001802:	208a      	movs	r0, #138	; 0x8a
 8001804:	f7ff ff5a 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff ff73 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 800180e:	208b      	movs	r0, #139	; 0x8b
 8001810:	f7ff ff54 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 8001814:	2080      	movs	r0, #128	; 0x80
 8001816:	f7ff ff6d 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 800181a:	208c      	movs	r0, #140	; 0x8c
 800181c:	f7ff ff4e 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001820:	2001      	movs	r0, #1
 8001822:	f7ff ff67 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 8001826:	208d      	movs	r0, #141	; 0x8d
 8001828:	f7ff ff48 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff ff61 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 8001832:	208e      	movs	r0, #142	; 0x8e
 8001834:	f7ff ff42 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001838:	20ff      	movs	r0, #255	; 0xff
 800183a:	f7ff ff5b 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 800183e:	208f      	movs	r0, #143	; 0x8f
 8001840:	f7ff ff3c 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001844:	20ff      	movs	r0, #255	; 0xff
 8001846:	f7ff ff55 	bl	80016f4 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 800184a:	20b6      	movs	r0, #182	; 0xb6
 800184c:	f7ff ff36 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff ff4f 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 8001856:	2020      	movs	r0, #32
 8001858:	f7ff ff4c 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 800185c:	2036      	movs	r0, #54	; 0x36
 800185e:	f7ff ff2d 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 8001862:	2008      	movs	r0, #8
 8001864:	f7ff ff46 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 8001868:	203a      	movs	r0, #58	; 0x3a
 800186a:	f7ff ff27 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 800186e:	2005      	movs	r0, #5
 8001870:	f7ff ff40 	bl	80016f4 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 8001874:	2090      	movs	r0, #144	; 0x90
 8001876:	f7ff ff21 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 800187a:	2008      	movs	r0, #8
 800187c:	f7ff ff3a 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001880:	2008      	movs	r0, #8
 8001882:	f7ff ff37 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001886:	2008      	movs	r0, #8
 8001888:	f7ff ff34 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 800188c:	2008      	movs	r0, #8
 800188e:	f7ff ff31 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 8001892:	20bd      	movs	r0, #189	; 0xbd
 8001894:	f7ff ff12 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 8001898:	2006      	movs	r0, #6
 800189a:	f7ff ff2b 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 800189e:	20bc      	movs	r0, #188	; 0xbc
 80018a0:	f7ff ff0c 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff ff25 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 80018aa:	20ff      	movs	r0, #255	; 0xff
 80018ac:	f7ff ff06 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 80018b0:	2060      	movs	r0, #96	; 0x60
 80018b2:	f7ff ff1f 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f7ff ff1c 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 80018bc:	2004      	movs	r0, #4
 80018be:	f7ff ff19 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 80018c2:	20c3      	movs	r0, #195	; 0xc3
 80018c4:	f7ff fefa 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 80018c8:	2013      	movs	r0, #19
 80018ca:	f7ff ff13 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 80018ce:	20c4      	movs	r0, #196	; 0xc4
 80018d0:	f7ff fef4 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 80018d4:	2013      	movs	r0, #19
 80018d6:	f7ff ff0d 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 80018da:	20c9      	movs	r0, #201	; 0xc9
 80018dc:	f7ff feee 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 80018e0:	2022      	movs	r0, #34	; 0x22
 80018e2:	f7ff ff07 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 80018e6:	20be      	movs	r0, #190	; 0xbe
 80018e8:	f7ff fee8 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 80018ec:	2011      	movs	r0, #17
 80018ee:	f7ff ff01 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 80018f2:	20e1      	movs	r0, #225	; 0xe1
 80018f4:	f7ff fee2 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 80018f8:	2010      	movs	r0, #16
 80018fa:	f7ff fefb 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 80018fe:	200e      	movs	r0, #14
 8001900:	f7ff fef8 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8001904:	20df      	movs	r0, #223	; 0xdf
 8001906:	f7ff fed9 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 800190a:	2021      	movs	r0, #33	; 0x21
 800190c:	f7ff fef2 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8001910:	200c      	movs	r0, #12
 8001912:	f7ff feef 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 8001916:	2002      	movs	r0, #2
 8001918:	f7ff feec 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 800191c:	20f0      	movs	r0, #240	; 0xf0
 800191e:	f7ff fecd 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8001922:	2045      	movs	r0, #69	; 0x45
 8001924:	f7ff fee6 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001928:	2009      	movs	r0, #9
 800192a:	f7ff fee3 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800192e:	2008      	movs	r0, #8
 8001930:	f7ff fee0 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001934:	2008      	movs	r0, #8
 8001936:	f7ff fedd 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 800193a:	2026      	movs	r0, #38	; 0x26
 800193c:	f7ff feda 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001940:	202a      	movs	r0, #42	; 0x2a
 8001942:	f7ff fed7 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 8001946:	20f1      	movs	r0, #241	; 0xf1
 8001948:	f7ff feb8 	bl	80016bc <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 800194c:	2043      	movs	r0, #67	; 0x43
 800194e:	f7ff fed1 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8001952:	2070      	movs	r0, #112	; 0x70
 8001954:	f7ff fece 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8001958:	2072      	movs	r0, #114	; 0x72
 800195a:	f7ff fecb 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 800195e:	2036      	movs	r0, #54	; 0x36
 8001960:	f7ff fec8 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 8001964:	2037      	movs	r0, #55	; 0x37
 8001966:	f7ff fec5 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 800196a:	206f      	movs	r0, #111	; 0x6f
 800196c:	f7ff fec2 	bl	80016f4 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8001970:	20f2      	movs	r0, #242	; 0xf2
 8001972:	f7ff fea3 	bl	80016bc <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 8001976:	2045      	movs	r0, #69	; 0x45
 8001978:	f7ff febc 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 800197c:	2009      	movs	r0, #9
 800197e:	f7ff feb9 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001982:	2008      	movs	r0, #8
 8001984:	f7ff feb6 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001988:	2008      	movs	r0, #8
 800198a:	f7ff feb3 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 800198e:	2026      	movs	r0, #38	; 0x26
 8001990:	f7ff feb0 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001994:	202a      	movs	r0, #42	; 0x2a
 8001996:	f7ff fead 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 800199a:	20f3      	movs	r0, #243	; 0xf3
 800199c:	f7ff fe8e 	bl	80016bc <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 80019a0:	2043      	movs	r0, #67	; 0x43
 80019a2:	f7ff fea7 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 80019a6:	2070      	movs	r0, #112	; 0x70
 80019a8:	f7ff fea4 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 80019ac:	2072      	movs	r0, #114	; 0x72
 80019ae:	f7ff fea1 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 80019b2:	2036      	movs	r0, #54	; 0x36
 80019b4:	f7ff fe9e 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 80019b8:	2037      	movs	r0, #55	; 0x37
 80019ba:	f7ff fe9b 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 80019be:	206f      	movs	r0, #111	; 0x6f
 80019c0:	f7ff fe98 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 80019c4:	20ed      	movs	r0, #237	; 0xed
 80019c6:	f7ff fe79 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 80019ca:	201b      	movs	r0, #27
 80019cc:	f7ff fe92 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 80019d0:	200b      	movs	r0, #11
 80019d2:	f7ff fe8f 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 80019d6:	20ae      	movs	r0, #174	; 0xae
 80019d8:	f7ff fe70 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 80019dc:	2077      	movs	r0, #119	; 0x77
 80019de:	f7ff fe89 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 80019e2:	20cd      	movs	r0, #205	; 0xcd
 80019e4:	f7ff fe6a 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 80019e8:	2063      	movs	r0, #99	; 0x63
 80019ea:	f7ff fe83 	bl	80016f4 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 80019ee:	2070      	movs	r0, #112	; 0x70
 80019f0:	f7ff fe64 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 80019f4:	2007      	movs	r0, #7
 80019f6:	f7ff fe7d 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80019fa:	2007      	movs	r0, #7
 80019fc:	f7ff fe7a 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001a00:	2004      	movs	r0, #4
 8001a02:	f7ff fe77 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 8001a06:	200e      	movs	r0, #14
 8001a08:	f7ff fe74 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 8001a0c:	200f      	movs	r0, #15
 8001a0e:	f7ff fe71 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001a12:	2009      	movs	r0, #9
 8001a14:	f7ff fe6e 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001a18:	2007      	movs	r0, #7
 8001a1a:	f7ff fe6b 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001a1e:	2008      	movs	r0, #8
 8001a20:	f7ff fe68 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f7ff fe65 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 8001a2a:	20e8      	movs	r0, #232	; 0xe8
 8001a2c:	f7ff fe46 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8001a30:	2034      	movs	r0, #52	; 0x34
 8001a32:	f7ff fe5f 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 8001a36:	2062      	movs	r0, #98	; 0x62
 8001a38:	f7ff fe40 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001a3c:	2018      	movs	r0, #24
 8001a3e:	f7ff fe59 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 8001a42:	200d      	movs	r0, #13
 8001a44:	f7ff fe56 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001a48:	2071      	movs	r0, #113	; 0x71
 8001a4a:	f7ff fe53 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8001a4e:	20ed      	movs	r0, #237	; 0xed
 8001a50:	f7ff fe50 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001a54:	2070      	movs	r0, #112	; 0x70
 8001a56:	f7ff fe4d 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001a5a:	2070      	movs	r0, #112	; 0x70
 8001a5c:	f7ff fe4a 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001a60:	2018      	movs	r0, #24
 8001a62:	f7ff fe47 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f7ff fe44 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001a6c:	2071      	movs	r0, #113	; 0x71
 8001a6e:	f7ff fe41 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8001a72:	20ef      	movs	r0, #239	; 0xef
 8001a74:	f7ff fe3e 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001a78:	2070      	movs	r0, #112	; 0x70
 8001a7a:	f7ff fe3b 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001a7e:	2070      	movs	r0, #112	; 0x70
 8001a80:	f7ff fe38 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8001a84:	2063      	movs	r0, #99	; 0x63
 8001a86:	f7ff fe19 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001a8a:	2018      	movs	r0, #24
 8001a8c:	f7ff fe32 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8001a90:	2011      	movs	r0, #17
 8001a92:	f7ff fe2f 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001a96:	2071      	movs	r0, #113	; 0x71
 8001a98:	f7ff fe2c 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001a9c:	20f1      	movs	r0, #241	; 0xf1
 8001a9e:	f7ff fe29 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001aa2:	2070      	movs	r0, #112	; 0x70
 8001aa4:	f7ff fe26 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001aa8:	2070      	movs	r0, #112	; 0x70
 8001aaa:	f7ff fe23 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001aae:	2018      	movs	r0, #24
 8001ab0:	f7ff fe20 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8001ab4:	2013      	movs	r0, #19
 8001ab6:	f7ff fe1d 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001aba:	2071      	movs	r0, #113	; 0x71
 8001abc:	f7ff fe1a 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8001ac0:	20f3      	movs	r0, #243	; 0xf3
 8001ac2:	f7ff fe17 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001ac6:	2070      	movs	r0, #112	; 0x70
 8001ac8:	f7ff fe14 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001acc:	2070      	movs	r0, #112	; 0x70
 8001ace:	f7ff fe11 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8001ad2:	2064      	movs	r0, #100	; 0x64
 8001ad4:	f7ff fdf2 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8001ad8:	2028      	movs	r0, #40	; 0x28
 8001ada:	f7ff fe0b 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8001ade:	2029      	movs	r0, #41	; 0x29
 8001ae0:	f7ff fe08 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001ae4:	20f1      	movs	r0, #241	; 0xf1
 8001ae6:	f7ff fe05 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f7ff fe02 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001af0:	20f1      	movs	r0, #241	; 0xf1
 8001af2:	f7ff fdff 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff fdfc 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001afc:	2007      	movs	r0, #7
 8001afe:	f7ff fdf9 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8001b02:	2066      	movs	r0, #102	; 0x66
 8001b04:	f7ff fdda 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001b08:	203c      	movs	r0, #60	; 0x3c
 8001b0a:	f7ff fdf3 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff fdf0 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8001b14:	20cd      	movs	r0, #205	; 0xcd
 8001b16:	f7ff fded 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 8001b1a:	2067      	movs	r0, #103	; 0x67
 8001b1c:	f7ff fdea 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001b20:	2045      	movs	r0, #69	; 0x45
 8001b22:	f7ff fde7 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001b26:	2045      	movs	r0, #69	; 0x45
 8001b28:	f7ff fde4 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001b2c:	2010      	movs	r0, #16
 8001b2e:	f7ff fde1 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff fdde 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff fddb 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f7ff fdd8 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 8001b44:	2067      	movs	r0, #103	; 0x67
 8001b46:	f7ff fdb9 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fdd2 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001b50:	203c      	movs	r0, #60	; 0x3c
 8001b52:	f7ff fdcf 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001b56:	2000      	movs	r0, #0
 8001b58:	f7ff fdcc 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff fdc9 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff fdc6 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff fdc3 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8001b6e:	2054      	movs	r0, #84	; 0x54
 8001b70:	f7ff fdc0 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001b74:	2010      	movs	r0, #16
 8001b76:	f7ff fdbd 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 8001b7a:	2032      	movs	r0, #50	; 0x32
 8001b7c:	f7ff fdba 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8001b80:	2098      	movs	r0, #152	; 0x98
 8001b82:	f7ff fdb7 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 8001b86:	2074      	movs	r0, #116	; 0x74
 8001b88:	f7ff fd98 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8001b8c:	2010      	movs	r0, #16
 8001b8e:	f7ff fdb1 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 8001b92:	2085      	movs	r0, #133	; 0x85
 8001b94:	f7ff fdae 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 8001b98:	2080      	movs	r0, #128	; 0x80
 8001b9a:	f7ff fdab 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff fda8 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f7ff fda5 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 8001baa:	204e      	movs	r0, #78	; 0x4e
 8001bac:	f7ff fda2 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff fd9f 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 8001bb6:	2098      	movs	r0, #152	; 0x98
 8001bb8:	f7ff fd80 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8001bbc:	203e      	movs	r0, #62	; 0x3e
 8001bbe:	f7ff fd99 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001bc2:	2007      	movs	r0, #7
 8001bc4:	f7ff fd96 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 8001bc8:	2035      	movs	r0, #53	; 0x35
 8001bca:	f7ff fd77 	bl	80016bc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8001bce:	2021      	movs	r0, #33	; 0x21
 8001bd0:	f7ff fd74 	bl	80016bc <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8001bd4:	2011      	movs	r0, #17
 8001bd6:	f7ff fd71 	bl	80016bc <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 8001bda:	2078      	movs	r0, #120	; 0x78
 8001bdc:	f002 f878 	bl	8003cd0 <delay>
	LCD_1IN28_SendCommand(0x29);
 8001be0:	2029      	movs	r0, #41	; 0x29
 8001be2:	f7ff fd6b 	bl	80016bc <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 8001be6:	2014      	movs	r0, #20
 8001be8:	f002 f872 	bl	8003cd0 <delay>
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <LCD_1IN28_SetAttributes+0x54>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 8001c00:	2308      	movs	r3, #8
 8001c02:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d108      	bne.n	8001c1c <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <LCD_1IN28_SetAttributes+0x54>)
 8001c0c:	22f0      	movs	r2, #240	; 0xf0
 8001c0e:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <LCD_1IN28_SetAttributes+0x54>)
 8001c12:	22f0      	movs	r2, #240	; 0xf0
 8001c14:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 8001c16:	23c8      	movs	r3, #200	; 0xc8
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	e007      	b.n	8001c2c <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <LCD_1IN28_SetAttributes+0x54>)
 8001c1e:	22f0      	movs	r2, #240	; 0xf0
 8001c20:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <LCD_1IN28_SetAttributes+0x54>)
 8001c24:	22f0      	movs	r2, #240	; 0xf0
 8001c26:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 8001c28:	2368      	movs	r3, #104	; 0x68
 8001c2a:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 8001c2c:	2036      	movs	r0, #54	; 0x36
 8001c2e:	f7ff fd45 	bl	80016bc <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fd5d 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200000bc 	.word	0x200000bc

08001c48 <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 8001c52:	f7ff fd11 	bl	8001678 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ffc9 	bl	8001bf0 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 8001c5e:	f7ff fd95 	bl	800178c <LCD_1IN28_InitReg>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8001c6a:	b590      	push	{r4, r7, lr}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4604      	mov	r4, r0
 8001c72:	4608      	mov	r0, r1
 8001c74:	4611      	mov	r1, r2
 8001c76:	461a      	mov	r2, r3
 8001c78:	4623      	mov	r3, r4
 8001c7a:	80fb      	strh	r3, [r7, #6]
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	80bb      	strh	r3, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8001c88:	202a      	movs	r0, #42	; 0x2a
 8001c8a:	f7ff fd17 	bl	80016bc <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff fd30 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fd2b 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff fd28 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8001ca4:	887b      	ldrh	r3, [r7, #2]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fd23 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8001cae:	202b      	movs	r0, #43	; 0x2b
 8001cb0:	f7ff fd04 	bl	80016bc <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff fd1d 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 8001cba:	88bb      	ldrh	r3, [r7, #4]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fd18 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7ff fd15 	bl	80016f4 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 8001cca:	883b      	ldrh	r3, [r7, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fd10 	bl	80016f4 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8001cd4:	202c      	movs	r0, #44	; 0x2c
 8001cd6:	f7ff fcf1 	bl	80016bc <LCD_1IN28_SendCommand>
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd90      	pop	{r4, r7, pc}
	...

08001ce4 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8001cee:	23ef      	movs	r3, #239	; 0xef
 8001cf0:	22ef      	movs	r2, #239	; 0xef
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff ffb8 	bl	8001c6a <LCD_1IN28_SetWindows>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d00:	4812      	ldr	r0, [pc, #72]	; (8001d4c <LCD_1IN28_Clear+0x68>)
 8001d02:	f7fe ff79 	bl	8000bf8 <DEV_Digital_Write>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8001d06:	2300      	movs	r3, #0
 8001d08:	81fb      	strh	r3, [r7, #14]
 8001d0a:	e017      	b.n	8001d3c <LCD_1IN28_Clear+0x58>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	81bb      	strh	r3, [r7, #12]
 8001d10:	e00e      	b.n	8001d30 <LCD_1IN28_Clear+0x4c>
			DEV_SPI_WRITE(Color>>8);
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe ff86 	bl	8000c2c <DEV_SPI_WRite>
			DEV_SPI_WRITE(Color);
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe ff81 	bl	8000c2c <DEV_SPI_WRite>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8001d2a:	89bb      	ldrh	r3, [r7, #12]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	81bb      	strh	r3, [r7, #12]
 8001d30:	89bb      	ldrh	r3, [r7, #12]
 8001d32:	2bef      	cmp	r3, #239	; 0xef
 8001d34:	d9ed      	bls.n	8001d12 <LCD_1IN28_Clear+0x2e>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8001d36:	89fb      	ldrh	r3, [r7, #14]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	81fb      	strh	r3, [r7, #14]
 8001d3c:	89fb      	ldrh	r3, [r7, #14]
 8001d3e:	2bef      	cmp	r3, #239	; 0xef
 8001d40:	d9e4      	bls.n	8001d0c <LCD_1IN28_Clear+0x28>
		}
	 }
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40020000 	.word	0x40020000

08001d50 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	80bb      	strh	r3, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	807b      	strh	r3, [r7, #2]
	LCD_1IN28_SetWindows(x,y,x,y);
 8001d62:	88bb      	ldrh	r3, [r7, #4]
 8001d64:	88fa      	ldrh	r2, [r7, #6]
 8001d66:	88b9      	ldrh	r1, [r7, #4]
 8001d68:	88f8      	ldrh	r0, [r7, #6]
 8001d6a:	f7ff ff7e 	bl	8001c6a <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fce1 	bl	8001738 <LCD_1IN28_SendData_16Bit>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 8001d8a:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <LCD_1IN28_SetBackLight+0x1c>)
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40000400 	.word	0x40000400

08001da0 <gc9a01_display_init>:
PA9		------> RST
PB6		------> CS
3.3v    ------> VCC
*/
void gc9a01_display_init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	gc9a01_ctrl_gpio_init();
 8001da4:	f000 f804 	bl	8001db0 <gc9a01_ctrl_gpio_init>
	gc9a01_spi_init();
 8001da8:	f000 f840 	bl	8001e2c <gc9a01_spi_init>
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <gc9a01_ctrl_gpio_init>:


void gc9a01_ctrl_gpio_init(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
	/*Initialize RST, DC and CS lines as output*/
	RCC->AHB1ENR |= GPIOAEN;
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <gc9a01_ctrl_gpio_init+0x70>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <gc9a01_ctrl_gpio_init+0x70>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= GPIOBEN;
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <gc9a01_ctrl_gpio_init+0x70>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <gc9a01_ctrl_gpio_init+0x70>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	6313      	str	r3, [r2, #48]	; 0x30

	CS_GPIO_Port->MODER |= (1U<<12);
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <gc9a01_ctrl_gpio_init+0x74>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <gc9a01_ctrl_gpio_init+0x74>)
 8001dd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dd6:	6013      	str	r3, [r2, #0]
	CS_GPIO_Port->MODER &= ~(1U<<13);
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <gc9a01_ctrl_gpio_init+0x74>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <gc9a01_ctrl_gpio_init+0x74>)
 8001dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001de2:	6013      	str	r3, [r2, #0]

	RST_GPIO_Port->MODER |= (1U<<18);
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <gc9a01_ctrl_gpio_init+0x78>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <gc9a01_ctrl_gpio_init+0x78>)
 8001dea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dee:	6013      	str	r3, [r2, #0]
	RST_GPIO_Port->MODER &= ~(1U<<19);
 8001df0:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <gc9a01_ctrl_gpio_init+0x78>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <gc9a01_ctrl_gpio_init+0x78>)
 8001df6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001dfa:	6013      	str	r3, [r2, #0]

	DC_GPIO_Port->MODER |= (1U<<16);
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <gc9a01_ctrl_gpio_init+0x78>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <gc9a01_ctrl_gpio_init+0x78>)
 8001e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
	DC_GPIO_Port->MODER &= ~(1U<<17);
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <gc9a01_ctrl_gpio_init+0x78>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <gc9a01_ctrl_gpio_init+0x78>)
 8001e0e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e12:	6013      	str	r3, [r2, #0]

}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40020000 	.word	0x40020000

08001e2c <gc9a01_spi_init>:

void gc9a01_spi_init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <gc9a01_spi_init+0x50>)
 8001e32:	4a13      	ldr	r2, [pc, #76]	; (8001e80 <gc9a01_spi_init+0x54>)
 8001e34:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <gc9a01_spi_init+0x50>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <gc9a01_spi_init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <gc9a01_spi_init+0x50>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <gc9a01_spi_init+0x50>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <gc9a01_spi_init+0x50>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <gc9a01_spi_init+0x50>)
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <gc9a01_spi_init+0x50>)
 8001e60:	2208      	movs	r2, #8
 8001e62:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <gc9a01_spi_init+0x50>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <gc9a01_spi_init+0x50>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28


	/*Initialize spi*/
	spi_init(&hspi1);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <gc9a01_spi_init+0x50>)
 8001e72:	f001 fd03 	bl	800387c <spi_init>


}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200000c4 	.word	0x200000c4
 8001e80:	40013000 	.word	0x40013000

08001e84 <fpu_enable>:
#include"stm32f4xx.h"

void fpu_enable(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
	//Enable Floating Point Unit:Enable CP10 and CP11 full access
	SCB->CPACR |=(1U<<20);
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <fpu_enable+0x50>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8e:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <fpu_enable+0x50>)
 8001e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1U<<21);
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <fpu_enable+0x50>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <fpu_enable+0x50>)
 8001ea0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1U<<22);
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <fpu_enable+0x50>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <fpu_enable+0x50>)
 8001eb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1U<<23);
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <fpu_enable+0x50>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <fpu_enable+0x50>)
 8001ec0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <i2c1_init>:
static void i2c_request_mem_write(uint16_t saddr, uint16_t maddr, uint16_t mem_addr_sz);
static void i2c_request_mem_read(uint16_t saddr, uint16_t maddr, uint16_t mem_addr_sz);


void i2c1_init(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |=GPIOBEN;
 8001edc:	4b4b      	ldr	r3, [pc, #300]	; (800200c <i2c1_init+0x134>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	4a4a      	ldr	r2, [pc, #296]	; (800200c <i2c1_init+0x134>)
 8001ee2:	f043 0302 	orr.w	r3, r3, #2
 8001ee6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB8 and PB9 mode to alternate function mode*/
	GPIOB->MODER &=~(1U<<16);
 8001ee8:	4b49      	ldr	r3, [pc, #292]	; (8002010 <i2c1_init+0x138>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a48      	ldr	r2, [pc, #288]	; (8002010 <i2c1_init+0x138>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<17);
 8001ef4:	4b46      	ldr	r3, [pc, #280]	; (8002010 <i2c1_init+0x138>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a45      	ldr	r2, [pc, #276]	; (8002010 <i2c1_init+0x138>)
 8001efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efe:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &=~(1U<<18);
 8001f00:	4b43      	ldr	r3, [pc, #268]	; (8002010 <i2c1_init+0x138>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a42      	ldr	r2, [pc, #264]	; (8002010 <i2c1_init+0x138>)
 8001f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<19);
 8001f0c:	4b40      	ldr	r3, [pc, #256]	; (8002010 <i2c1_init+0x138>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a3f      	ldr	r2, [pc, #252]	; (8002010 <i2c1_init+0x138>)
 8001f12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f16:	6013      	str	r3, [r2, #0]

	/*Set PB8 and PB9 output type to open drain*/
	GPIOB->OTYPER |=(1U<<8);
 8001f18:	4b3d      	ldr	r3, [pc, #244]	; (8002010 <i2c1_init+0x138>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a3c      	ldr	r2, [pc, #240]	; (8002010 <i2c1_init+0x138>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |=(1U<<9);
 8001f24:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <i2c1_init+0x138>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a39      	ldr	r2, [pc, #228]	; (8002010 <i2c1_init+0x138>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	6053      	str	r3, [r2, #4]

	/*Enable Pull-up resisters for PB8 and PB9*/
	GPIOB->PUPDR |=(1U<<16);
 8001f30:	4b37      	ldr	r3, [pc, #220]	; (8002010 <i2c1_init+0x138>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a36      	ldr	r2, [pc, #216]	; (8002010 <i2c1_init+0x138>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~(1U<<17);
 8001f3c:	4b34      	ldr	r3, [pc, #208]	; (8002010 <i2c1_init+0x138>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a33      	ldr	r2, [pc, #204]	; (8002010 <i2c1_init+0x138>)
 8001f42:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001f46:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |=(1U<<18);
 8001f48:	4b31      	ldr	r3, [pc, #196]	; (8002010 <i2c1_init+0x138>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4a30      	ldr	r2, [pc, #192]	; (8002010 <i2c1_init+0x138>)
 8001f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f52:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~(1U<<19);
 8001f54:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <i2c1_init+0x138>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a2d      	ldr	r2, [pc, #180]	; (8002010 <i2c1_init+0x138>)
 8001f5a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001f5e:	60d3      	str	r3, [r2, #12]

	/*Set PB8 and PB9 alternate function type to I2C1 (AF4)*/
	GPIOB->AFR[1] &=~(1U<<0);
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <i2c1_init+0x138>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <i2c1_init+0x138>)
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~(1U<<1);
 8001f6c:	4b28      	ldr	r3, [pc, #160]	; (8002010 <i2c1_init+0x138>)
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	4a27      	ldr	r2, [pc, #156]	; (8002010 <i2c1_init+0x138>)
 8001f72:	f023 0302 	bic.w	r3, r3, #2
 8001f76:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |=(1U<<2);
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <i2c1_init+0x138>)
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	4a24      	ldr	r2, [pc, #144]	; (8002010 <i2c1_init+0x138>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~(1U<<3);
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <i2c1_init+0x138>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	4a21      	ldr	r2, [pc, #132]	; (8002010 <i2c1_init+0x138>)
 8001f8a:	f023 0308 	bic.w	r3, r3, #8
 8001f8e:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOB->AFR[1] &=~(1U<<4);
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <i2c1_init+0x138>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <i2c1_init+0x138>)
 8001f96:	f023 0310 	bic.w	r3, r3, #16
 8001f9a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~(1U<<5);
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <i2c1_init+0x138>)
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <i2c1_init+0x138>)
 8001fa2:	f023 0320 	bic.w	r3, r3, #32
 8001fa6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |=(1U<<6);
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <i2c1_init+0x138>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	4a18      	ldr	r2, [pc, #96]	; (8002010 <i2c1_init+0x138>)
 8001fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fb2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~(1U<<7);
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <i2c1_init+0x138>)
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	4a15      	ldr	r2, [pc, #84]	; (8002010 <i2c1_init+0x138>)
 8001fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fbe:	6253      	str	r3, [r2, #36]	; 0x24

	/*Enable clock access to I2C1*/
	RCC->APB1ENR |=I2C1EN;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <i2c1_init+0x134>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <i2c1_init+0x134>)
 8001fc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fca:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enter reset mode*/
	I2C1->CR1 |=(1U<<15);
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <i2c1_init+0x13c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a10      	ldr	r2, [pc, #64]	; (8002014 <i2c1_init+0x13c>)
 8001fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd6:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode*/
	I2C1->CR1 &=~(1U<<15);
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <i2c1_init+0x13c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <i2c1_init+0x13c>)
 8001fde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fe2:	6013      	str	r3, [r2, #0]

	/*Set the peripheral clock*/
	I2C1->CR2 = (1U<<4); // 16Mhz
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <i2c1_init+0x13c>)
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	605a      	str	r2, [r3, #4]

	/*Set I2C to standard mode, 100kH clock*/
	I2C1->CCR =	I2C_100KHZ;
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <i2c1_init+0x13c>)
 8001fec:	2250      	movs	r2, #80	; 0x50
 8001fee:	61da      	str	r2, [r3, #28]

	/*Set rise time*/
	I2C1->TRISE = SD_MOD_MAX_RISE_TIME;
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <i2c1_init+0x13c>)
 8001ff2:	2211      	movs	r2, #17
 8001ff4:	621a      	str	r2, [r3, #32]

	/*Enable I2C module*/
	I2C1->CR1 |=(1U<<0);
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <i2c1_init+0x13c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a06      	ldr	r2, [pc, #24]	; (8002014 <i2c1_init+0x13c>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6013      	str	r3, [r2, #0]

}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40023800 	.word	0x40023800
 8002010:	40020400 	.word	0x40020400
 8002014:	40005400 	.word	0x40005400

08002018 <i2c_request_mem_write>:
		  /* Generate stop */
		  I2C1->CR1 |= CR1_STOP;
}

static void i2c_request_mem_write(uint16_t saddr, uint16_t maddr, uint16_t mem_addr_sz)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	80fb      	strh	r3, [r7, #6]
 8002022:	460b      	mov	r3, r1
 8002024:	80bb      	strh	r3, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	807b      	strh	r3, [r7, #2]

    __IO uint32_t tmpreg = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]

	  /* Generate Start */
	  SET_BIT(I2C1->CR1, I2C_CR1_START);
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <i2c_request_mem_write+0xa4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a22      	ldr	r2, [pc, #136]	; (80020bc <i2c_request_mem_write+0xa4>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6013      	str	r3, [r2, #0]

	  /* Wait until SB flag is set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 800203a:	bf00      	nop
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <i2c_request_mem_write+0xa4>)
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f9      	beq.n	800203c <i2c_request_mem_write+0x24>

	  I2C1->DR =  _I2C_7BIT_ADD_WRITE(saddr);
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <i2c_request_mem_write+0xa4>)
 800204e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002052:	6113      	str	r3, [r2, #16]

	  /* Wait until ADDR flag is set */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 8002054:	bf00      	nop
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <i2c_request_mem_write+0xa4>)
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f9      	beq.n	8002056 <i2c_request_mem_write+0x3e>


	     /*Clear ADDR flag*/
	    tmpreg = I2C1->SR1;
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <i2c_request_mem_write+0xa4>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	60fb      	str	r3, [r7, #12]
	    tmpreg = I2C1->SR2;
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <i2c_request_mem_write+0xa4>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	60fb      	str	r3, [r7, #12]

	    /* Wait until TXE flag is set */
	      while (!(I2C1->SR1 & SR1_TXE)){}
 800206e:	bf00      	nop
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <i2c_request_mem_write+0xa4>)
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f9      	beq.n	8002070 <i2c_request_mem_write+0x58>

	      /* If Memory address size is 8Bit */
	      if (mem_addr_sz == I2C_MEMADD_SIZE_8BIT)
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d104      	bne.n	800208c <i2c_request_mem_write+0x74>
	      {
	        /* Send Memory Address */
	        I2C1->DR = _i2c_mem_addr_lsb(maddr);
 8002082:	88bb      	ldrh	r3, [r7, #4]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <i2c_request_mem_write+0xa4>)
 8002088:	611a      	str	r2, [r3, #16]

	        /* Send LSB of Memory Address */
	        I2C1->DR = _i2c_mem_addr_lsb(maddr);
	      }

}
 800208a:	e010      	b.n	80020ae <i2c_request_mem_write+0x96>
	        I2C1->DR = _i2c_mem_addr_msb(maddr);
 800208c:	88bb      	ldrh	r3, [r7, #4]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	b2da      	uxtb	r2, r3
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <i2c_request_mem_write+0xa4>)
 8002096:	611a      	str	r2, [r3, #16]
	        while (!(I2C1->SR1 & SR1_TXE)){}
 8002098:	bf00      	nop
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <i2c_request_mem_write+0xa4>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f9      	beq.n	800209a <i2c_request_mem_write+0x82>
	        I2C1->DR = _i2c_mem_addr_lsb(maddr);
 80020a6:	88bb      	ldrh	r3, [r7, #4]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <i2c_request_mem_write+0xa4>)
 80020ac:	611a      	str	r2, [r3, #16]
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40005400 	.word	0x40005400

080020c0 <i2c_request_mem_read>:

static void i2c_request_mem_read(uint16_t saddr, uint16_t maddr, uint16_t mem_addr_sz)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
 80020ca:	460b      	mov	r3, r1
 80020cc:	80bb      	strh	r3, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	807b      	strh	r3, [r7, #2]
	  __IO uint32_t tmpreg = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]

	  /* Enable Acknowledge */
	  SET_BIT(I2C1->CR1, I2C_CR1_ACK);
 80020d6:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <i2c_request_mem_read+0xf4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a36      	ldr	r2, [pc, #216]	; (80021b4 <i2c_request_mem_read+0xf4>)
 80020dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e0:	6013      	str	r3, [r2, #0]

	  /* Generate Start */
	  SET_BIT(I2C1->CR1, I2C_CR1_START);
 80020e2:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <i2c_request_mem_read+0xf4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a33      	ldr	r2, [pc, #204]	; (80021b4 <i2c_request_mem_read+0xf4>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

	  /* Wait until SB flag is set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 80020ee:	bf00      	nop
 80020f0:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <i2c_request_mem_read+0xf4>)
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f9      	beq.n	80020f0 <i2c_request_mem_read+0x30>

	  I2C1->DR =  _I2C_7BIT_ADD_WRITE(saddr);
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4a2c      	ldr	r2, [pc, #176]	; (80021b4 <i2c_request_mem_read+0xf4>)
 8002102:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002106:	6113      	str	r3, [r2, #16]

	  /* Wait until ADDR flag is set */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 8002108:	bf00      	nop
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <i2c_request_mem_read+0xf4>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f9      	beq.n	800210a <i2c_request_mem_read+0x4a>


	     /*Clear ADDR flag*/
	    tmpreg = I2C1->SR1;
 8002116:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <i2c_request_mem_read+0xf4>)
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	60fb      	str	r3, [r7, #12]
	    tmpreg = I2C1->SR2;
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <i2c_request_mem_read+0xf4>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	60fb      	str	r3, [r7, #12]

	    /* Wait until TXE flag is set */
	      while (!(I2C1->SR1 & SR1_TXE)){}
 8002122:	bf00      	nop
 8002124:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <i2c_request_mem_read+0xf4>)
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f9      	beq.n	8002124 <i2c_request_mem_read+0x64>


	      /* If Memory address size is 8Bit */
	      if (mem_addr_sz == I2C_MEMADD_SIZE_8BIT)
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d104      	bne.n	8002140 <i2c_request_mem_read+0x80>
	      {
	        /* Send Memory Address */
	        I2C1->DR = _i2c_mem_addr_lsb(maddr);
 8002136:	88bb      	ldrh	r3, [r7, #4]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <i2c_request_mem_read+0xf4>)
 800213c:	611a      	str	r2, [r3, #16]
 800213e:	e010      	b.n	8002162 <i2c_request_mem_read+0xa2>

	      /* If Memory address size is 16Bit */
	      else
	      {
	        /* Send MSB of Memory Address */
	        I2C1->DR = _i2c_mem_addr_msb(maddr);
 8002140:	88bb      	ldrh	r3, [r7, #4]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	b29b      	uxth	r3, r3
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <i2c_request_mem_read+0xf4>)
 800214a:	611a      	str	r2, [r3, #16]

	        /* Wait until TXE flag is set */
	        while (!(I2C1->SR1 & SR1_TXE)){}
 800214c:	bf00      	nop
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <i2c_request_mem_read+0xf4>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f9      	beq.n	800214e <i2c_request_mem_read+0x8e>

	        /* Send LSB of Memory Address */
	        I2C1->DR = _i2c_mem_addr_lsb(maddr);
 800215a:	88bb      	ldrh	r3, [r7, #4]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <i2c_request_mem_read+0xf4>)
 8002160:	611a      	str	r2, [r3, #16]
	      }
	        /* Wait until TXE flag is set */
	        while (!(I2C1->SR1 & SR1_TXE)){}
 8002162:	bf00      	nop
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <i2c_request_mem_read+0xf4>)
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f9      	beq.n	8002164 <i2c_request_mem_read+0xa4>

	        /* Generate Restart */
	        SET_BIT(I2C1->CR1, I2C_CR1_START);
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <i2c_request_mem_read+0xf4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0f      	ldr	r2, [pc, #60]	; (80021b4 <i2c_request_mem_read+0xf4>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]

	        /* Wait until SB flag is set */
	        while (!(I2C1->SR1 & (SR1_SB))){}
 800217c:	bf00      	nop
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <i2c_request_mem_read+0xf4>)
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f9      	beq.n	800217e <i2c_request_mem_read+0xbe>

	        /* Send slave address */
	        I2C1->DR = _I2C_7BIT_ADD_READ(saddr);
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <i2c_request_mem_read+0xf4>)
 8002196:	611a      	str	r2, [r3, #16]

	        /* Wait until ADDR flag is set */
	        while (!(I2C1->SR1 & (SR1_ADDR))){}
 8002198:	bf00      	nop
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <i2c_request_mem_read+0xf4>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f9      	beq.n	800219a <i2c_request_mem_read+0xda>
}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	40005400 	.word	0x40005400

080021b8 <i2c_mem_write>:

void i2c_mem_write( uint16_t saddr, uint16_t maddr, uint16_t mem_addr_sz, uint8_t *p_data, uint16_t size)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	4603      	mov	r3, r0
 80021c2:	81fb      	strh	r3, [r7, #14]
 80021c4:	460b      	mov	r3, r1
 80021c6:	81bb      	strh	r3, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	817b      	strh	r3, [r7, #10]

	/*Check busy flag*/
	if(I2C1->SR2 & (SR2_BUSY))
 80021cc:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <i2c_mem_write+0xc8>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <i2c_mem_write+0x2a>
	{
    	delay(5);
 80021d8:	2005      	movs	r0, #5
 80021da:	f001 fd79 	bl	8003cd0 <delay>

    	if(I2C1->SR2 & (SR2_BUSY))
 80021de:	4b28      	ldr	r3, [pc, #160]	; (8002280 <i2c_mem_write+0xc8>)
 80021e0:	699b      	ldr	r3, [r3, #24]
    		//Do something
    	}

	}

	uint32_t XferSize = size;
 80021e2:	8c3b      	ldrh	r3, [r7, #32]
 80021e4:	617b      	str	r3, [r7, #20]
	uint32_t XferCount =  size;
 80021e6:	8c3b      	ldrh	r3, [r7, #32]
 80021e8:	613b      	str	r3, [r7, #16]

    /* Disable Pos */
    CLEAR_BIT(I2C1->CR1, I2C_CR1_POS);
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <i2c_mem_write+0xc8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a24      	ldr	r2, [pc, #144]	; (8002280 <i2c_mem_write+0xc8>)
 80021f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021f4:	6013      	str	r3, [r2, #0]


    /* Send Slave Address and Memory Address */
    i2c_request_mem_write( saddr, maddr, mem_addr_sz);
 80021f6:	897a      	ldrh	r2, [r7, #10]
 80021f8:	89b9      	ldrh	r1, [r7, #12]
 80021fa:	89fb      	ldrh	r3, [r7, #14]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff0b 	bl	8002018 <i2c_request_mem_write>

    while (XferSize > 0U)
 8002202:	e029      	b.n	8002258 <i2c_mem_write+0xa0>
    {
        /*Wait until transmitter is empty*/
          while(!(I2C1->SR1 & SR1_TXE)){}
 8002204:	bf00      	nop
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <i2c_mem_write+0xc8>)
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f9      	beq.n	8002206 <i2c_mem_write+0x4e>

          /* Write data to DR */
          I2C1->DR = *p_data;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <i2c_mem_write+0xc8>)
 8002218:	611a      	str	r2, [r3, #16]

          /* Increment Buffer pointer */
          p_data++;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3301      	adds	r3, #1
 800221e:	607b      	str	r3, [r7, #4]


          /* Update counter */
          XferSize--;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3b01      	subs	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
          XferCount--;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	3b01      	subs	r3, #1
 800222a:	613b      	str	r3, [r7, #16]

          if ((I2C1->SR1 & SR1_BTF) && (XferSize != 0U))
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <i2c_mem_write+0xc8>)
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00f      	beq.n	8002258 <i2c_mem_write+0xa0>
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00c      	beq.n	8002258 <i2c_mem_write+0xa0>
            {
              /* Write data to DR */
              I2C1->DR = *p_data;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <i2c_mem_write+0xc8>)
 8002244:	611a      	str	r2, [r3, #16]

              /* Increment Buffer pointer */
              p_data++;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3301      	adds	r3, #1
 800224a:	607b      	str	r3, [r7, #4]

              /* Update counter */
              XferSize--;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3b01      	subs	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
              XferCount--;
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	3b01      	subs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
    while (XferSize > 0U)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1d2      	bne.n	8002204 <i2c_mem_write+0x4c>

            }
    }

    /* Wait until BTF flag is set */
    while(!((I2C1->SR1 & SR1_BTF))){}
 800225e:	bf00      	nop
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <i2c_mem_write+0xc8>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f9      	beq.n	8002260 <i2c_mem_write+0xa8>

    /* Generate Stop */
    SET_BIT(I2C1->CR1, I2C_CR1_STOP);
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <i2c_mem_write+0xc8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a03      	ldr	r2, [pc, #12]	; (8002280 <i2c_mem_write+0xc8>)
 8002272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002276:	6013      	str	r3, [r2, #0]

}
 8002278:	bf00      	nop
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40005400 	.word	0x40005400

08002284 <i2c_mem_read>:

void i2c_mem_read( uint16_t saddr, uint16_t maddr, uint16_t mem_addr_sz, uint8_t *p_data, uint16_t size)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	4603      	mov	r3, r0
 800228e:	81fb      	strh	r3, [r7, #14]
 8002290:	460b      	mov	r3, r1
 8002292:	81bb      	strh	r3, [r7, #12]
 8002294:	4613      	mov	r3, r2
 8002296:	817b      	strh	r3, [r7, #10]
	  __IO uint32_t tmpreg = 0x00U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]

	    /* Wait until BUSY flag is reset */
		while (I2C1->SR2 & (SR2_BUSY)){}
 800229c:	bf00      	nop
 800229e:	4b85      	ldr	r3, [pc, #532]	; (80024b4 <i2c_mem_read+0x230>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f9      	bne.n	800229e <i2c_mem_read+0x1a>

		uint32_t XferSize = size;
 80022aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022ac:	61fb      	str	r3, [r7, #28]
		uint32_t XferCount =  size;
 80022ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022b0:	61bb      	str	r3, [r7, #24]

	    /* Disable Pos */
	    CLEAR_BIT(I2C1->CR1, I2C_CR1_POS);
 80022b2:	4b80      	ldr	r3, [pc, #512]	; (80024b4 <i2c_mem_read+0x230>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7f      	ldr	r2, [pc, #508]	; (80024b4 <i2c_mem_read+0x230>)
 80022b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022bc:	6013      	str	r3, [r2, #0]

	    /* Send Slave Address and Memory Address */
	    i2c_request_mem_read( saddr, maddr, mem_addr_sz);
 80022be:	897a      	ldrh	r2, [r7, #10]
 80022c0:	89b9      	ldrh	r1, [r7, #12]
 80022c2:	89fb      	ldrh	r3, [r7, #14]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fefb 	bl	80020c0 <i2c_request_mem_read>


	    if (XferSize == 0U)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10c      	bne.n	80022ea <i2c_mem_read+0x66>
	    {
	      /* Clear ADDR flag */
	      tmpreg = I2C1->SR1;
 80022d0:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <i2c_mem_read+0x230>)
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	617b      	str	r3, [r7, #20]
	      tmpreg = I2C1->SR2;
 80022d6:	4b77      	ldr	r3, [pc, #476]	; (80024b4 <i2c_mem_read+0x230>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	617b      	str	r3, [r7, #20]
	      /* Generate Stop */
	      SET_BIT(I2C1->CR1, I2C_CR1_STOP);
 80022dc:	4b75      	ldr	r3, [pc, #468]	; (80024b4 <i2c_mem_read+0x230>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a74      	ldr	r2, [pc, #464]	; (80024b4 <i2c_mem_read+0x230>)
 80022e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e0db      	b.n	80024a2 <i2c_mem_read+0x21e>
	    }

	    else if (XferSize == 1U)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d112      	bne.n	8002316 <i2c_mem_read+0x92>
	    {
	      /* Disable Acknowledge */
	      CLEAR_BIT(I2C1->CR1, I2C_CR1_ACK);
 80022f0:	4b70      	ldr	r3, [pc, #448]	; (80024b4 <i2c_mem_read+0x230>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a6f      	ldr	r2, [pc, #444]	; (80024b4 <i2c_mem_read+0x230>)
 80022f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022fa:	6013      	str	r3, [r2, #0]

	      /* Clear ADDR flag */
	      tmpreg = I2C1->SR1;
 80022fc:	4b6d      	ldr	r3, [pc, #436]	; (80024b4 <i2c_mem_read+0x230>)
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	617b      	str	r3, [r7, #20]
	      tmpreg = I2C1->SR2;
 8002302:	4b6c      	ldr	r3, [pc, #432]	; (80024b4 <i2c_mem_read+0x230>)
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	617b      	str	r3, [r7, #20]
	      /* Generate Stop */
	      SET_BIT(I2C1->CR1, I2C_CR1_STOP);
 8002308:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <i2c_mem_read+0x230>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a69      	ldr	r2, [pc, #420]	; (80024b4 <i2c_mem_read+0x230>)
 800230e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	e0c5      	b.n	80024a2 <i2c_mem_read+0x21e>
	    }

	    else if (XferSize == 2U)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d112      	bne.n	8002342 <i2c_mem_read+0xbe>
	    {
	      /* Disable Acknowledge */
	      CLEAR_BIT(I2C1->CR1, I2C_CR1_ACK);
 800231c:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <i2c_mem_read+0x230>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a64      	ldr	r2, [pc, #400]	; (80024b4 <i2c_mem_read+0x230>)
 8002322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002326:	6013      	str	r3, [r2, #0]

	      /* Enable Pos */
	      SET_BIT(I2C1->CR1, I2C_CR1_POS);
 8002328:	4b62      	ldr	r3, [pc, #392]	; (80024b4 <i2c_mem_read+0x230>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a61      	ldr	r2, [pc, #388]	; (80024b4 <i2c_mem_read+0x230>)
 800232e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002332:	6013      	str	r3, [r2, #0]

	      /* Clear ADDR flag */
	      tmpreg = I2C1->SR1;
 8002334:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <i2c_mem_read+0x230>)
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	617b      	str	r3, [r7, #20]
	      tmpreg = I2C1->SR2;
 800233a:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <i2c_mem_read+0x230>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e0af      	b.n	80024a2 <i2c_mem_read+0x21e>
	    }
	    else
	    {
	      /* Clear ADDR flag */
	        tmpreg = I2C1->SR1;
 8002342:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <i2c_mem_read+0x230>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	617b      	str	r3, [r7, #20]
	        tmpreg = I2C1->SR2;
 8002348:	4b5a      	ldr	r3, [pc, #360]	; (80024b4 <i2c_mem_read+0x230>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	617b      	str	r3, [r7, #20]
	    }

	    while (XferSize > 0U)
 800234e:	e0a8      	b.n	80024a2 <i2c_mem_read+0x21e>
	    {
	        if (XferSize <= 3U)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d87c      	bhi.n	8002450 <i2c_mem_read+0x1cc>
	         {
	            /* One byte */
	            if (XferSize == 1U)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d115      	bne.n	8002388 <i2c_mem_read+0x104>
	            {
	                /* Wait until RXNE flag is set */
	              	while (!(I2C1->SR1 & SR1_RXNE)){}
 800235c:	bf00      	nop
 800235e:	4b55      	ldr	r3, [pc, #340]	; (80024b4 <i2c_mem_read+0x230>)
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f9      	beq.n	800235e <i2c_mem_read+0xda>

	                /* Read data from DR */
	                 *p_data = (uint8_t)I2C1->DR;
 800236a:	4b52      	ldr	r3, [pc, #328]	; (80024b4 <i2c_mem_read+0x230>)
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	701a      	strb	r2, [r3, #0]

	                 /* Increment Buffer pointer */
	                 p_data++;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3301      	adds	r3, #1
 8002378:	607b      	str	r3, [r7, #4]

	                 /* Update counter */
	                 XferSize--;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b01      	subs	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
	                 XferCount--;
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	3b01      	subs	r3, #1
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	e08c      	b.n	80024a2 <i2c_mem_read+0x21e>

	            }
	            /* Two bytes */
	             else if (XferSize == 2U)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d11b      	bne.n	80023c6 <i2c_mem_read+0x142>
	             {
	                 /* Wait until BTF flag is set */
	               	while (!(I2C1->SR1 & (SR1_BTF))){}
 800238e:	bf00      	nop
 8002390:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <i2c_mem_read+0x230>)
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f9      	beq.n	8002390 <i2c_mem_read+0x10c>

	                /* Generate Stop */
	                SET_BIT(I2C1->CR1, I2C_CR1_STOP);
 800239c:	4b45      	ldr	r3, [pc, #276]	; (80024b4 <i2c_mem_read+0x230>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a44      	ldr	r2, [pc, #272]	; (80024b4 <i2c_mem_read+0x230>)
 80023a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a6:	6013      	str	r3, [r2, #0]

	                /* Read data from DR */
		             *p_data = (uint8_t)I2C1->DR;
 80023a8:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <i2c_mem_read+0x230>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	701a      	strb	r2, [r3, #0]

		                 /* Increment Buffer pointer */
		                 p_data++;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3301      	adds	r3, #1
 80023b6:	607b      	str	r3, [r7, #4]

		                 /* Update counter */
		                 XferSize--;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	61fb      	str	r3, [r7, #28]
		                 XferCount--;
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	e06d      	b.n	80024a2 <i2c_mem_read+0x21e>
	             }
	            /* 3 Last bytes */
	            else
	            {
	                /* Wait until BTF flag is set */
	              	while (!(I2C1->SR1 & (SR1_BTF))){}
 80023c6:	bf00      	nop
 80023c8:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <i2c_mem_read+0x230>)
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f9      	beq.n	80023c8 <i2c_mem_read+0x144>

	                /* Disable Acknowledge */
	                CLEAR_BIT(I2C1->CR1, I2C_CR1_ACK);
 80023d4:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <i2c_mem_read+0x230>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a36      	ldr	r2, [pc, #216]	; (80024b4 <i2c_mem_read+0x230>)
 80023da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023de:	6013      	str	r3, [r2, #0]

	                /* Read data from DR */
		             *p_data = (uint8_t)I2C1->DR;
 80023e0:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <i2c_mem_read+0x230>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	701a      	strb	r2, [r3, #0]

					 /* Increment Buffer pointer */
					 p_data++;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3301      	adds	r3, #1
 80023ee:	607b      	str	r3, [r7, #4]

					 /* Update counter */
					 XferSize--;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	61fb      	str	r3, [r7, #28]
					 XferCount--;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	61bb      	str	r3, [r7, #24]

					/* Wait until BTF flag is set */
						while (!(I2C1->SR1 & (SR1_BTF))){}
 80023fc:	bf00      	nop
 80023fe:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <i2c_mem_read+0x230>)
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f9      	beq.n	80023fe <i2c_mem_read+0x17a>

				          /* Generate Stop */
				          SET_BIT(I2C1->CR1, I2C_CR1_STOP);
 800240a:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <i2c_mem_read+0x230>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a29      	ldr	r2, [pc, #164]	; (80024b4 <i2c_mem_read+0x230>)
 8002410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002414:	6013      	str	r3, [r2, #0]

				          /* Read data from DR */
				          *p_data = (uint8_t)I2C1->DR;
 8002416:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <i2c_mem_read+0x230>)
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	701a      	strb	r2, [r3, #0]

						 /* Increment Buffer pointer */
						 p_data++;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3301      	adds	r3, #1
 8002424:	607b      	str	r3, [r7, #4]

						 /* Update counter */
						 XferSize--;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b01      	subs	r3, #1
 800242a:	61fb      	str	r3, [r7, #28]
						 XferCount--;
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	3b01      	subs	r3, #1
 8002430:	61bb      	str	r3, [r7, #24]

				          /* Read data from DR */
				          *p_data = (uint8_t)I2C1->DR;
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <i2c_mem_read+0x230>)
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	701a      	strb	r2, [r3, #0]

						 /* Increment Buffer pointer */
						 p_data++;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3301      	adds	r3, #1
 8002440:	607b      	str	r3, [r7, #4]

						 /* Update counter */
						 XferSize--;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3b01      	subs	r3, #1
 8002446:	61fb      	str	r3, [r7, #28]
						 XferCount--;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	3b01      	subs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	e028      	b.n	80024a2 <i2c_mem_read+0x21e>
	         }

	        else
	        {
	            /* Wait until RXNE flag is set */
	          	while (!(I2C1->SR1 & SR1_RXNE)){}
 8002450:	bf00      	nop
 8002452:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <i2c_mem_read+0x230>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f9      	beq.n	8002452 <i2c_mem_read+0x1ce>

	            /* Read data from DR */
	            *p_data = (uint8_t)I2C1->DR;
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <i2c_mem_read+0x230>)
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	701a      	strb	r2, [r3, #0]

				 /* Increment Buffer pointer */
					 p_data++;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3301      	adds	r3, #1
 800246c:	607b      	str	r3, [r7, #4]

					 /* Update counter */
					 XferSize--;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b01      	subs	r3, #1
 8002472:	61fb      	str	r3, [r7, #28]
					 XferCount--;
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	3b01      	subs	r3, #1
 8002478:	61bb      	str	r3, [r7, #24]

					if(I2C1->SR1 & (SR1_BTF))
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <i2c_mem_read+0x230>)
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <i2c_mem_read+0x21e>
					{
					  /* Read data from DR */
					  *p_data = (uint8_t)I2C1->DR;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <i2c_mem_read+0x230>)
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	701a      	strb	r2, [r3, #0]

					  /* Increment Buffer pointer */
					  p_data++;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3301      	adds	r3, #1
 8002494:	607b      	str	r3, [r7, #4]

					  /* Update counter */
					  XferSize--;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b01      	subs	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
					  XferCount--;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	3b01      	subs	r3, #1
 80024a0:	61bb      	str	r3, [r7, #24]
	    while (XferSize > 0U)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f47f af53 	bne.w	8002350 <i2c_mem_read+0xcc>
					}

	        }
	    }
}
 80024aa:	bf00      	nop
 80024ac:	bf00      	nop
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40005400 	.word	0x40005400

080024b8 <main>:
 * TIMEBASE
 */


int main()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	//Enable FPU
	fpu_enable();
 80024bc:	f7ff fce2 	bl	8001e84 <fpu_enable>

	//Initialize UART
	debug_uart_init();
 80024c0:	f001 fc7e 	bl	8003dc0 <debug_uart_init>

	rtc_init();
 80024c4:	f000 ffa4 	bl	8003410 <rtc_init>
	//Initialize Timebase
	timebase_init();
 80024c8:	f001 fc44 	bl	8003d54 <timebase_init>

	gc9a01_display_init();
 80024cc:	f7ff fc68 	bl	8001da0 <gc9a01_display_init>

	i2c1_init();
 80024d0:	f7ff fd02 	bl	8001ed8 <i2c1_init>

	max30102_init();
 80024d4:	f000 f8d5 	bl	8002682 <max30102_init>

	pa10_gpio_init();
 80024d8:	f000 f956 	bl	8002788 <pa10_gpio_init>


	gc9a01_start();
 80024dc:	f000 f984 	bl	80027e8 <gc9a01_start>

	while(1)
	{
		max30102_process();
 80024e0:	f000 f8e0 	bl	80026a4 <max30102_process>
		show_time();
 80024e4:	f000 fa6e 	bl	80029c4 <show_time>
	{
 80024e8:	e7fa      	b.n	80024e0 <main+0x28>

080024ea <max30102_write_reg>:
#include"max30102.h"

void max30102_write_reg(uint8_t reg_addr, uint8_t data)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af02      	add	r7, sp, #8
 80024f0:	4603      	mov	r3, r0
 80024f2:	460a      	mov	r2, r1
 80024f4:	71fb      	strb	r3, [r7, #7]
 80024f6:	4613      	mov	r3, r2
 80024f8:	71bb      	strb	r3, [r7, #6]
	i2c_mem_write(I2C_WRITE_ADDR, reg_addr, 1, &data,1);
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	b299      	uxth	r1, r3
 80024fe:	1dbb      	adds	r3, r7, #6
 8002500:	2201      	movs	r2, #1
 8002502:	9200      	str	r2, [sp, #0]
 8002504:	2201      	movs	r2, #1
 8002506:	20ae      	movs	r0, #174	; 0xae
 8002508:	f7ff fe56 	bl	80021b8 <i2c_mem_write>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <max30102_read_reg>:


void max30102_read_reg(uint8_t reg_addr, uint8_t *data)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af02      	add	r7, sp, #8
 800251a:	4603      	mov	r3, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	71fb      	strb	r3, [r7, #7]
	i2c_mem_read(I2C_READ_ADDR, reg_addr, 1, &data,1);
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	b299      	uxth	r1, r3
 8002524:	463b      	mov	r3, r7
 8002526:	2201      	movs	r2, #1
 8002528:	9200      	str	r2, [sp, #0]
 800252a:	2201      	movs	r2, #1
 800252c:	20af      	movs	r0, #175	; 0xaf
 800252e:	f7ff fea9 	bl	8002284 <i2c_mem_read>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <max30102_params_init>:

void max30102_params_init(void)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	af00      	add	r7, sp, #0
	/*Enable interrupts for FIFO almost full and PPG RDY*/
	max30102_write_reg(REG_INTR_ENABLE_1, 0xC0U);
 800253e:	21c0      	movs	r1, #192	; 0xc0
 8002540:	2002      	movs	r0, #2
 8002542:	f7ff ffd2 	bl	80024ea <max30102_write_reg>

	max30102_write_reg(REG_INTR_ENABLE_2, 0x00U); // Interrupt Enable 2 Register
 8002546:	2100      	movs	r1, #0
 8002548:	2003      	movs	r0, #3
 800254a:	f7ff ffce 	bl	80024ea <max30102_write_reg>

	// Initialize all FIFO pointers to zero to reset the FIFO buffer
	max30102_write_reg(REG_FIFO_WR_PTR, 0x00U);  // FIFO Write Pointer Register
 800254e:	2100      	movs	r1, #0
 8002550:	2004      	movs	r0, #4
 8002552:	f7ff ffca 	bl	80024ea <max30102_write_reg>
	max30102_write_reg(REG_OVF_COUNTER, 0x00U);  // Over Flow Counter Register
 8002556:	2100      	movs	r1, #0
 8002558:	2005      	movs	r0, #5
 800255a:	f7ff ffc6 	bl	80024ea <max30102_write_reg>
	max30102_write_reg(REG_FIFO_RD_PTR, 0x00U);  // FIFO Read Pointer Register
 800255e:	2100      	movs	r1, #0
 8002560:	2006      	movs	r0, #6
 8002562:	f7ff ffc2 	bl	80024ea <max30102_write_reg>

	// Configure FIFO: set sample averaging to 4, and set FIFO almost full threshold to maximum
	max30102_write_reg(REG_FIFO_CONFIG, 0x4FU);
 8002566:	214f      	movs	r1, #79	; 0x4f
 8002568:	2008      	movs	r0, #8
 800256a:	f7ff ffbe 	bl	80024ea <max30102_write_reg>

	// Set the operational mode to SpO2 (uses both Red and IR LEDs)
	max30102_write_reg(REG_MODE_CONFIG, 0x03U);  // Mode Configuration Register
 800256e:	2103      	movs	r1, #3
 8002570:	2009      	movs	r0, #9
 8002572:	f7ff ffba 	bl	80024ea <max30102_write_reg>

	// Configure SpO2 measurement settings: highest LED pulse width, 100 Hz sampling rate,
	// and ADC range to 4096 nA
	max30102_write_reg(REG_SPO2_CONFIG, 0x27U);  // SpO2 Configuration Register
 8002576:	2127      	movs	r1, #39	; 0x27
 8002578:	200a      	movs	r0, #10
 800257a:	f7ff ffb6 	bl	80024ea <max30102_write_reg>

	// Set the current for both LEDs (LED1 and LED2) to approximately 7mA
	max30102_write_reg(REG_LED1_PA, 0x24U);      // LED1 Pulse Amplitude Register
 800257e:	2124      	movs	r1, #36	; 0x24
 8002580:	200c      	movs	r0, #12
 8002582:	f7ff ffb2 	bl	80024ea <max30102_write_reg>
	max30102_write_reg(REG_LED2_PA, 0x24U);      // LED2 Pulse Amplitude Register
 8002586:	2124      	movs	r1, #36	; 0x24
 8002588:	200d      	movs	r0, #13
 800258a:	f7ff ffae 	bl	80024ea <max30102_write_reg>

	// Set the pilot LED current to approximately 25mA
	max30102_write_reg(REG_PILOT_PA, 0x7FU);     // Pilot LED Pulse Amplitude Register
 800258e:	217f      	movs	r1, #127	; 0x7f
 8002590:	2010      	movs	r0, #16
 8002592:	f7ff ffaa 	bl	80024ea <max30102_write_reg>
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}

0800259a <max30102_read_fifo>:
 *
 * @param[out] pun_red_led Pointer to store the accumulated red LED data.
 * @param[out] pun_ir_led Pointer to store the accumulated IR LED data.
 */
void max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b088      	sub	sp, #32
 800259e:	af02      	add	r7, sp, #8
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
    uint32_t un_temp;
    uint8_t uch_temp;
    uint8_t uch_i2c_data[6];

    // Clear any pending interrupts by reading the interrupt status registers
    max30102_read_reg(REG_INTR_STATUS_1, &uch_temp);
 80025a4:	f107 0313 	add.w	r3, r7, #19
 80025a8:	4619      	mov	r1, r3
 80025aa:	2000      	movs	r0, #0
 80025ac:	f7ff ffb2 	bl	8002514 <max30102_read_reg>
    max30102_read_reg(REG_INTR_STATUS_2, &uch_temp);
 80025b0:	f107 0313 	add.w	r3, r7, #19
 80025b4:	4619      	mov	r1, r3
 80025b6:	2001      	movs	r0, #1
 80025b8:	f7ff ffac 	bl	8002514 <max30102_read_reg>

    // Read 6 bytes from the FIFO data register
    i2c_mem_read(I2C_READ_ADDR, REG_FIFO_DATA, 1, uch_i2c_data, 6U);
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	2206      	movs	r2, #6
 80025c2:	9200      	str	r2, [sp, #0]
 80025c4:	2201      	movs	r2, #1
 80025c6:	2107      	movs	r1, #7
 80025c8:	20af      	movs	r0, #175	; 0xaf
 80025ca:	f7ff fe5b 	bl	8002284 <i2c_mem_read>

    // Initialize the output data
    *pun_ir_led = 0UL;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
    *pun_red_led = 0UL;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]

    // Start assembling the 18-bit red LED data from 3 bytes of I2C data
    un_temp = (uint32_t)uch_i2c_data[0];  // Convert the first byte of red LED data to a 32-bit integer
 80025da:	7b3b      	ldrb	r3, [r7, #12]
 80025dc:	617b      	str	r3, [r7, #20]
    un_temp <<= 16;  // Shift the byte left by 16 bits to position it as the most significant byte
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	617b      	str	r3, [r7, #20]
    *pun_red_led += un_temp;  // Add this byte to the red LED data accumulator
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	441a      	add	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	601a      	str	r2, [r3, #0]

    un_temp = (uint32_t)uch_i2c_data[1];  // Convert the second byte of red LED data to a 32-bit integer
 80025f0:	7b7b      	ldrb	r3, [r7, #13]
 80025f2:	617b      	str	r3, [r7, #20]
    un_temp <<= 8;  // Shift the byte left by 8 bits to position it as the middle byte
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	617b      	str	r3, [r7, #20]
    *pun_red_led += un_temp;  // Add this byte to the red LED data accumulator
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	441a      	add	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	601a      	str	r2, [r3, #0]

    un_temp = (uint32_t)uch_i2c_data[2];  // Convert the third byte of red LED data to a 32-bit integer
 8002606:	7bbb      	ldrb	r3, [r7, #14]
 8002608:	617b      	str	r3, [r7, #20]
    *pun_red_led += un_temp;  // Add this byte directly to the red LED data accumulator (this byte is the least significant)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	601a      	str	r2, [r3, #0]

    // Start assembling the 18-bit IR LED data from 3 bytes of I2C data
    un_temp = (uint32_t)uch_i2c_data[3];  // Convert the first byte of IR LED data to a 32-bit integer
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	617b      	str	r3, [r7, #20]
    un_temp <<= 16;  // Shift the byte left by 16 bits to position it as the most significant byte
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	617b      	str	r3, [r7, #20]
    *pun_ir_led += un_temp;  // Add this byte to the IR LED data accumulator
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	441a      	add	r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	601a      	str	r2, [r3, #0]

    un_temp = (uint32_t)uch_i2c_data[4];  // Convert the second byte of IR LED data to a 32-bit integer
 800262c:	7c3b      	ldrb	r3, [r7, #16]
 800262e:	617b      	str	r3, [r7, #20]
    un_temp <<= 8;  // Shift the byte left by 8 bits to position it as the middle byte
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	617b      	str	r3, [r7, #20]
    *pun_ir_led += un_temp;  // Add this byte to the IR LED data accumulator
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	441a      	add	r2, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	601a      	str	r2, [r3, #0]

    un_temp = (uint32_t)uch_i2c_data[5];  // Convert the third byte of IR LED data to a 32-bit integer
 8002642:	7c7b      	ldrb	r3, [r7, #17]
 8002644:	617b      	str	r3, [r7, #20]
    *pun_ir_led += un_temp;  // Add this byte directly to the IR LED data accumulator (this byte is the least significant)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	441a      	add	r2, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	601a      	str	r2, [r3, #0]

    // Mask the most significant bits to get the correct data range
    *pun_red_led &= 0x03FFFF;  // Mask the upper 6 bits for 18-bit data
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	601a      	str	r2, [r3, #0]
    *pun_ir_led &= 0x03FFFF;   // Mask the upper 6 bits for 18-bit data
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <max30102_reset>:


void max30102_reset(void)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	af00      	add	r7, sp, #0
	max30102_write_reg(REG_MODE_CONFIG, 0x40U);
 8002676:	2140      	movs	r1, #64	; 0x40
 8002678:	2009      	movs	r0, #9
 800267a:	f7ff ff36 	bl	80024ea <max30102_write_reg>
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}

08002682 <max30102_init>:
float correl_val;
bool get_pa10_state(void);


void max30102_init(void)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
	uint8_t dummy;
	max30102_reset();
 8002688:	f7ff fff3 	bl	8002672 <max30102_reset>
	max30102_read_reg(REG_INTR_STATUS_1,&dummy);
 800268c:	1dfb      	adds	r3, r7, #7
 800268e:	4619      	mov	r1, r3
 8002690:	2000      	movs	r0, #0
 8002692:	f7ff ff3f 	bl	8002514 <max30102_read_reg>
	max30102_params_init();
 8002696:	f7ff ff50 	bl	800253a <max30102_params_init>

}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <max30102_process>:

void max30102_process(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af06      	add	r7, sp, #24
	int i;
	for(i=0;i<BUFFER_SIZE;i++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	e014      	b.n	80026da <max30102_process+0x36>
	{
		/*Wait until interrupt pin is set*/
		while(get_pa10_state()==1){}
 80026b0:	bf00      	nop
 80026b2:	f000 f887 	bl	80027c4 <get_pa10_state>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1fa      	bne.n	80026b2 <max30102_process+0xe>

		//Read MAX FIFO
		max30102_read_fifo((aun_red_buffer+i),(aun_ir_buffer+i));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4a27      	ldr	r2, [pc, #156]	; (8002760 <max30102_process+0xbc>)
 80026c2:	441a      	add	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4926      	ldr	r1, [pc, #152]	; (8002764 <max30102_process+0xc0>)
 80026ca:	440b      	add	r3, r1
 80026cc:	4619      	mov	r1, r3
 80026ce:	4610      	mov	r0, r2
 80026d0:	f7ff ff63 	bl	800259a <max30102_read_fifo>
	for(i=0;i<BUFFER_SIZE;i++)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3301      	adds	r3, #1
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b63      	cmp	r3, #99	; 0x63
 80026de:	dde7      	ble.n	80026b0 <max30102_process+0xc>
	}
	//Then compute HR and SPO2
	compute_HR_SPO2(aun_ir_buffer,BUFFER_SIZE,
 80026e0:	4b21      	ldr	r3, [pc, #132]	; (8002768 <max30102_process+0xc4>)
 80026e2:	9304      	str	r3, [sp, #16]
 80026e4:	4b21      	ldr	r3, [pc, #132]	; (800276c <max30102_process+0xc8>)
 80026e6:	9303      	str	r3, [sp, #12]
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <max30102_process+0xcc>)
 80026ea:	9302      	str	r3, [sp, #8]
 80026ec:	4b21      	ldr	r3, [pc, #132]	; (8002774 <max30102_process+0xd0>)
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	4b21      	ldr	r3, [pc, #132]	; (8002778 <max30102_process+0xd4>)
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	4b21      	ldr	r3, [pc, #132]	; (800277c <max30102_process+0xd8>)
 80026f6:	4a1a      	ldr	r2, [pc, #104]	; (8002760 <max30102_process+0xbc>)
 80026f8:	2164      	movs	r1, #100	; 0x64
 80026fa:	481a      	ldr	r0, [pc, #104]	; (8002764 <max30102_process+0xc0>)
 80026fc:	f000 f99c 	bl	8002a38 <compute_HR_SPO2>
			         aun_red_buffer,
			          &n_spo2, &ch_spo2_valid,&n_heart_rate,
						 &ch_hr_valid,&ratio_val,&correl_val);

	if((n_heart_rate >MIN_HR) && (n_heart_rate <MAX_HR))
 8002700:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <max30102_process+0xd0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b28      	cmp	r3, #40	; 0x28
 8002706:	dd08      	ble.n	800271a <max30102_process+0x76>
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <max30102_process+0xd0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2bb3      	cmp	r3, #179	; 0xb3
 800270e:	dc04      	bgt.n	800271a <max30102_process+0x76>
	{
		update_pulse_ox_heart_rate(n_heart_rate);
 8002710:	4b18      	ldr	r3, [pc, #96]	; (8002774 <max30102_process+0xd0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 f915 	bl	8002944 <update_pulse_ox_heart_rate>
	}

	if((n_spo2 > MIN_SPO2) && (n_spo2 < MAX_SPO2))
 800271a:	4b18      	ldr	r3, [pc, #96]	; (800277c <max30102_process+0xd8>)
 800271c:	edd3 7a00 	vldr	s15, [r3]
 8002720:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002780 <max30102_process+0xdc>
 8002724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272c:	dc00      	bgt.n	8002730 <max30102_process+0x8c>
		{
		update_pulse_ox_spo2(n_spo2);
		}
}
 800272e:	e013      	b.n	8002758 <max30102_process+0xb4>
	if((n_spo2 > MIN_SPO2) && (n_spo2 < MAX_SPO2))
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <max30102_process+0xd8>)
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002784 <max30102_process+0xe0>
 800273a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002742:	d400      	bmi.n	8002746 <max30102_process+0xa2>
}
 8002744:	e008      	b.n	8002758 <max30102_process+0xb4>
		update_pulse_ox_spo2(n_spo2);
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <max30102_process+0xd8>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002750:	ee17 0a90 	vmov	r0, s15
 8002754:	f000 f916 	bl	8002984 <update_pulse_ox_spo2>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000298 	.word	0x20000298
 8002764:	20000108 	.word	0x20000108
 8002768:	20000438 	.word	0x20000438
 800276c:	20000434 	.word	0x20000434
 8002770:	20000429 	.word	0x20000429
 8002774:	2000042c 	.word	0x2000042c
 8002778:	20000428 	.word	0x20000428
 800277c:	20000430 	.word	0x20000430
 8002780:	42aa0000 	.word	0x42aa0000
 8002784:	42c80000 	.word	0x42c80000

08002788 <pa10_gpio_init>:
//PA10 will be interrupt pin for max30102
void pa10_gpio_init(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=(1U<<0);
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <pa10_gpio_init+0x34>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <pa10_gpio_init+0x34>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &=~(1U<<20);
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <pa10_gpio_init+0x38>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <pa10_gpio_init+0x38>)
 800279e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80027a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<21);
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <pa10_gpio_init+0x38>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <pa10_gpio_init+0x38>)
 80027aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027ae:	6013      	str	r3, [r2, #0]

}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40020000 	.word	0x40020000

080027c4 <get_pa10_state>:

bool get_pa10_state(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
	if(GPIOA->IDR &(INT_PIN))
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <get_pa10_state+0x20>)
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <get_pa10_state+0x14>
	{
		return true;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <get_pa10_state+0x16>
	}
	else
	{
		return false;
 80027d8:	2300      	movs	r3, #0
	}
}
 80027da:	4618      	mov	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40020000 	.word	0x40020000

080027e8 <gc9a01_start>:

uint8_t time_buff[BUFF_LEN] = {0};


void gc9a01_start(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af04      	add	r7, sp, #16
	DEV_Module_Init();
 80027ee:	f7fe fa2f 	bl	8000c50 <DEV_Module_Init>
  
	LCD_1IN28_SetBackLight(1000);
 80027f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027f6:	f7ff fac3 	bl	8001d80 <LCD_1IN28_SetBackLight>
	LCD_1IN28_Init(VERTICAL);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7ff fa24 	bl	8001c48 <LCD_1IN28_Init>
 	LCD_1IN28_Clear(BLACK);
 8002800:	2000      	movs	r0, #0
 8002802:	f7ff fa6f 	bl	8001ce4 <LCD_1IN28_Clear>
	
	Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 8002806:	2300      	movs	r3, #0
 8002808:	2200      	movs	r2, #0
 800280a:	21f0      	movs	r1, #240	; 0xf0
 800280c:	20f0      	movs	r0, #240	; 0xf0
 800280e:	f7fe fa39 	bl	8000c84 <Paint_NewImage>
	
	Paint_SetClearFuntion(LCD_1IN28_Clear);
 8002812:	4843      	ldr	r0, [pc, #268]	; (8002920 <gc9a01_start+0x138>)
 8002814:	f7fe fa82 	bl	8000d1c <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 8002818:	4842      	ldr	r0, [pc, #264]	; (8002924 <gc9a01_start+0x13c>)
 800281a:	f7fe fa8f 	bl	8000d3c <Paint_SetDisplayFuntion>

	
  Paint_DrawCircle(120,120, 120, BLUE ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 800281e:	2300      	movs	r3, #0
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	2302      	movs	r3, #2
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	231f      	movs	r3, #31
 8002828:	2278      	movs	r2, #120	; 0x78
 800282a:	2178      	movs	r1, #120	; 0x78
 800282c:	2078      	movs	r0, #120	; 0x78
 800282e:	f7fe fc91 	bl	8001154 <Paint_DrawCircle>
  Paint_DrawLine  (120, 0, 120, 12,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8002832:	2300      	movs	r3, #0
 8002834:	9302      	str	r3, [sp, #8]
 8002836:	2304      	movs	r3, #4
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	230c      	movs	r3, #12
 8002842:	2278      	movs	r2, #120	; 0x78
 8002844:	2100      	movs	r1, #0
 8002846:	2078      	movs	r0, #120	; 0x78
 8002848:	f7fe fbd4 	bl	8000ff4 <Paint_DrawLine>
  Paint_DrawLine  (120, 228, 120, 240,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 800284c:	2300      	movs	r3, #0
 800284e:	9302      	str	r3, [sp, #8]
 8002850:	2304      	movs	r3, #4
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	23f0      	movs	r3, #240	; 0xf0
 800285c:	2278      	movs	r2, #120	; 0x78
 800285e:	21e4      	movs	r1, #228	; 0xe4
 8002860:	2078      	movs	r0, #120	; 0x78
 8002862:	f7fe fbc7 	bl	8000ff4 <Paint_DrawLine>
  Paint_DrawLine  (0, 120, 12, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8002866:	2300      	movs	r3, #0
 8002868:	9302      	str	r3, [sp, #8]
 800286a:	2304      	movs	r3, #4
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2378      	movs	r3, #120	; 0x78
 8002876:	220c      	movs	r2, #12
 8002878:	2178      	movs	r1, #120	; 0x78
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe fbba 	bl	8000ff4 <Paint_DrawLine>
  Paint_DrawLine  (228, 120, 240, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8002880:	2300      	movs	r3, #0
 8002882:	9302      	str	r3, [sp, #8]
 8002884:	2304      	movs	r3, #4
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2378      	movs	r3, #120	; 0x78
 8002890:	22f0      	movs	r2, #240	; 0xf0
 8002892:	2178      	movs	r1, #120	; 0x78
 8002894:	20e4      	movs	r0, #228	; 0xe4
 8002896:	f7fe fbad 	bl	8000ff4 <Paint_DrawLine>

  Paint_DrawString_EN(65, 40, "Heart Rate ",&Font16,  BLACK, GREEN);
 800289a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2300      	movs	r3, #0
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	4b20      	ldr	r3, [pc, #128]	; (8002928 <gc9a01_start+0x140>)
 80028a6:	4a21      	ldr	r2, [pc, #132]	; (800292c <gc9a01_start+0x144>)
 80028a8:	2128      	movs	r1, #40	; 0x28
 80028aa:	2041      	movs	r0, #65	; 0x41
 80028ac:	f7fe fe8c 	bl	80015c8 <Paint_DrawString_EN>
  Paint_DrawString_EN(100, 70, "-- ",&Font24,  BLACK, RED);
 80028b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	2300      	movs	r3, #0
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <gc9a01_start+0x148>)
 80028bc:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <gc9a01_start+0x14c>)
 80028be:	2146      	movs	r1, #70	; 0x46
 80028c0:	2064      	movs	r0, #100	; 0x64
 80028c2:	f7fe fe81 	bl	80015c8 <Paint_DrawString_EN>
  Paint_DrawString_EN(130, 70, "BPM ",&Font16,  BLACK, BLUE);
 80028c6:	231f      	movs	r3, #31
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	2300      	movs	r3, #0
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <gc9a01_start+0x140>)
 80028d0:	4a19      	ldr	r2, [pc, #100]	; (8002938 <gc9a01_start+0x150>)
 80028d2:	2146      	movs	r1, #70	; 0x46
 80028d4:	2082      	movs	r0, #130	; 0x82
 80028d6:	f7fe fe77 	bl	80015c8 <Paint_DrawString_EN>

  Paint_DrawString_EN(65, 110, "Blood Oxygen",&Font16,  BLACK, GREEN);
 80028da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	2300      	movs	r3, #0
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <gc9a01_start+0x140>)
 80028e6:	4a15      	ldr	r2, [pc, #84]	; (800293c <gc9a01_start+0x154>)
 80028e8:	216e      	movs	r1, #110	; 0x6e
 80028ea:	2041      	movs	r0, #65	; 0x41
 80028ec:	f7fe fe6c 	bl	80015c8 <Paint_DrawString_EN>
  Paint_DrawString_EN(100, 140, "-- ",&Font24,  BLACK, RED);
 80028f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	2300      	movs	r3, #0
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <gc9a01_start+0x148>)
 80028fc:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <gc9a01_start+0x14c>)
 80028fe:	218c      	movs	r1, #140	; 0x8c
 8002900:	2064      	movs	r0, #100	; 0x64
 8002902:	f7fe fe61 	bl	80015c8 <Paint_DrawString_EN>
  Paint_DrawString_EN(130, 140, "% ",&Font16,  BLACK, BLUE);
 8002906:	231f      	movs	r3, #31
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	2300      	movs	r3, #0
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <gc9a01_start+0x140>)
 8002910:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <gc9a01_start+0x158>)
 8002912:	218c      	movs	r1, #140	; 0x8c
 8002914:	2082      	movs	r0, #130	; 0x82
 8002916:	f7fe fe57 	bl	80015c8 <Paint_DrawString_EN>


  
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	08001ce5 	.word	0x08001ce5
 8002924:	08001d51 	.word	0x08001d51
 8002928:	20000000 	.word	0x20000000
 800292c:	08005754 	.word	0x08005754
 8002930:	20000008 	.word	0x20000008
 8002934:	08005760 	.word	0x08005760
 8002938:	08005764 	.word	0x08005764
 800293c:	0800576c 	.word	0x0800576c
 8002940:	0800577c 	.word	0x0800577c

08002944 <update_pulse_ox_heart_rate>:

void update_pulse_ox_heart_rate(int32_t hr_val)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af02      	add	r7, sp, #8
 800294a:	6078      	str	r0, [r7, #4]
	char screen_buff[3];

	snprintf(screen_buff,sizeof(screen_buff),"%d ",(int)hr_val);
 800294c:	f107 000c 	add.w	r0, r7, #12
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a0a      	ldr	r2, [pc, #40]	; (800297c <update_pulse_ox_heart_rate+0x38>)
 8002954:	2103      	movs	r1, #3
 8002956:	f001 fcb1 	bl	80042bc <sniprintf>
	Paint_DrawString_EN(100, 70, screen_buff,&Font24,  BLACK, RED);
 800295a:	f107 020c 	add.w	r2, r7, #12
 800295e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	2300      	movs	r3, #0
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <update_pulse_ox_heart_rate+0x3c>)
 800296a:	2146      	movs	r1, #70	; 0x46
 800296c:	2064      	movs	r0, #100	; 0x64
 800296e:	f7fe fe2b 	bl	80015c8 <Paint_DrawString_EN>
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	08005780 	.word	0x08005780
 8002980:	20000008 	.word	0x20000008

08002984 <update_pulse_ox_spo2>:

void update_pulse_ox_spo2(int32_t spo2)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af02      	add	r7, sp, #8
 800298a:	6078      	str	r0, [r7, #4]
	char screen_buff[3];

	snprintf(screen_buff,sizeof(screen_buff),"%d ",(int)spo2);
 800298c:	f107 000c 	add.w	r0, r7, #12
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <update_pulse_ox_spo2+0x38>)
 8002994:	2103      	movs	r1, #3
 8002996:	f001 fc91 	bl	80042bc <sniprintf>
	Paint_DrawString_EN(100, 140, screen_buff,&Font24,  BLACK, RED);
 800299a:	f107 020c 	add.w	r2, r7, #12
 800299e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	2300      	movs	r3, #0
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <update_pulse_ox_spo2+0x3c>)
 80029aa:	218c      	movs	r1, #140	; 0x8c
 80029ac:	2064      	movs	r0, #100	; 0x64
 80029ae:	f7fe fe0b 	bl	80015c8 <Paint_DrawString_EN>

}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	08005780 	.word	0x08005780
 80029c0:	20000008 	.word	0x20000008

080029c4 <show_time>:

void show_time(void)
{
 80029c4:	b5b0      	push	{r4, r5, r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af02      	add	r7, sp, #8
	/*Display format :  hh : mm : ss*/
	sprintf((char *)time_buff,"%.2d :%.2d :%.2d",rtc_convert_bcd2bin(rtc_time_get_hour()),
 80029ca:	f000 fdbf 	bl	800354c <rtc_time_get_hour>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fd84 	bl	80034e0 <rtc_convert_bcd2bin>
 80029d8:	4603      	mov	r3, r0
 80029da:	461c      	mov	r4, r3
			rtc_convert_bcd2bin(rtc_time_get_minute()),
 80029dc:	f000 fda8 	bl	8003530 <rtc_time_get_minute>
 80029e0:	4603      	mov	r3, r0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fd7b 	bl	80034e0 <rtc_convert_bcd2bin>
 80029ea:	4603      	mov	r3, r0
	sprintf((char *)time_buff,"%.2d :%.2d :%.2d",rtc_convert_bcd2bin(rtc_time_get_hour()),
 80029ec:	461d      	mov	r5, r3
			rtc_convert_bcd2bin(rtc_time_get_second()));
 80029ee:	f000 fd91 	bl	8003514 <rtc_time_get_second>
 80029f2:	4603      	mov	r3, r0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fd72 	bl	80034e0 <rtc_convert_bcd2bin>
 80029fc:	4603      	mov	r3, r0
	sprintf((char *)time_buff,"%.2d :%.2d :%.2d",rtc_convert_bcd2bin(rtc_time_get_hour()),
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	462b      	mov	r3, r5
 8002a02:	4622      	mov	r2, r4
 8002a04:	4908      	ldr	r1, [pc, #32]	; (8002a28 <show_time+0x64>)
 8002a06:	4809      	ldr	r0, [pc, #36]	; (8002a2c <show_time+0x68>)
 8002a08:	f001 fc8c 	bl	8004324 <siprintf>

	Paint_DrawString_EN(70, 180, time_buff,&Font16,  BLACK, GBLUE);
 8002a0c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	2300      	movs	r3, #0
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <show_time+0x6c>)
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <show_time+0x68>)
 8002a1a:	21b4      	movs	r1, #180	; 0xb4
 8002a1c:	2046      	movs	r0, #70	; 0x46
 8002a1e:	f7fe fdd3 	bl	80015c8 <Paint_DrawString_EN>

}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bdb0      	pop	{r4, r5, r7, pc}
 8002a28:	08005784 	.word	0x08005784
 8002a2c:	2000043c 	.word	0x2000043c
 8002a30:	20000000 	.word	0x20000000
 8002a34:	00000000 	.word	0x00000000

08002a38 <compute_HR_SPO2>:

void compute_HR_SPO2(uint32_t *pun_ir_buffer,uint32_t n_buffer_length,
		             uint32_t *pun_red_buffer,
		             float *pn_spo2,int8_t *pch_spo2_valid,int32_t *pn_heart_rate,
					 int8_t *pch_hr_valid,float *ratio,float *correl)
{
 8002a38:	b5b0      	push	{r4, r5, r7, lr}
 8002a3a:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 8002a3e:	af02      	add	r7, sp, #8
 8002a40:	f507 745a 	add.w	r4, r7, #872	; 0x368
 8002a44:	f5a4 7457 	sub.w	r4, r4, #860	; 0x35c
 8002a48:	6020      	str	r0, [r4, #0]
 8002a4a:	f507 705a 	add.w	r0, r7, #872	; 0x368
 8002a4e:	f5a0 7058 	sub.w	r0, r0, #864	; 0x360
 8002a52:	6001      	str	r1, [r0, #0]
 8002a54:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8002a58:	f5a1 7159 	sub.w	r1, r1, #868	; 0x364
 8002a5c:	600a      	str	r2, [r1, #0]
 8002a5e:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002a62:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8002a66:	6013      	str	r3, [r2, #0]
		float an_x[BUFFER_SIZE];
		float an_y[BUFFER_SIZE];
		float *ptr_x,*ptr_y;


		f_ir_mean = 0.0;
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
		f_red_mean = 0.0;
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c

		for(k= 0; k < n_buffer_length; k++)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8002a7e:	e02c      	b.n	8002ada <compute_HR_SPO2+0xa2>
		{
			f_ir_mean +=pun_ir_buffer[k];
 8002a80:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002a8a:	f5a2 7257 	sub.w	r2, r2, #860	; 0x35c
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	4413      	add	r3, r2
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9c:	ed97 7ad8 	vldr	s14, [r7, #864]	; 0x360
 8002aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa4:	edc7 7ad8 	vstr	s15, [r7, #864]	; 0x360
			f_red_mean +=pun_red_buffer[k];
 8002aa8:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002ab2:	f5a2 7259 	sub.w	r2, r2, #868	; 0x364
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac4:	ed97 7ad7 	vldr	s14, [r7, #860]	; 0x35c
 8002ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002acc:	edc7 7ad7 	vstr	s15, [r7, #860]	; 0x35c
		for(k= 0; k < n_buffer_length; k++)
 8002ad0:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8002ada:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8002ade:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002ae2:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8c9      	bhi.n	8002a80 <compute_HR_SPO2+0x48>

		}

		f_ir_mean =  f_ir_mean/n_buffer_length;
 8002aec:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002af0:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002afe:	edd7 6ad8 	vldr	s13, [r7, #864]	; 0x360
 8002b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b06:	edc7 7ad8 	vstr	s15, [r7, #864]	; 0x360
		f_red_mean =  f_red_mean/n_buffer_length;
 8002b0a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002b0e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	ee07 3a90 	vmov	s15, r3
 8002b18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b1c:	edd7 6ad7 	vldr	s13, [r7, #860]	; 0x35c
 8002b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b24:	edc7 7ad7 	vstr	s15, [r7, #860]	; 0x35c

		//Subtract  mean from signal to remove DC
		for(k = 0, ptr_x = an_x, ptr_y = an_y; k < n_buffer_length;++k,++ptr_x,++ptr_y)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8002b2e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002b32:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002b36:	f107 0310 	add.w	r3, r7, #16
 8002b3a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8002b3e:	e03a      	b.n	8002bb6 <compute_HR_SPO2+0x17e>
		{
			*ptr_x = pun_ir_buffer[k] - f_ir_mean;
 8002b40:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002b4a:	f5a2 7257 	sub.w	r2, r2, #860	; 0x35c
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	ee07 3a90 	vmov	s15, r3
 8002b58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b5c:	edd7 7ad8 	vldr	s15, [r7, #864]	; 0x360
 8002b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b64:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002b68:	edc3 7a00 	vstr	s15, [r3]
			*ptr_y = pun_red_buffer[k] - f_red_mean;
 8002b6c:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002b76:	f5a2 7259 	sub.w	r2, r2, #868	; 0x364
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	ee07 3a90 	vmov	s15, r3
 8002b84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b88:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 8002b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b90:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002b94:	edc3 7a00 	vstr	s15, [r3]
		for(k = 0, ptr_x = an_x, ptr_y = an_y; k < n_buffer_length;++k,++ptr_x,++ptr_y)
 8002b98:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8002ba2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002bac:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8002bb6:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8002bba:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002bbe:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d8bb      	bhi.n	8002b40 <compute_HR_SPO2+0x108>

		}
		//TO DO DEBUG:  Plot signal
	    for(int i = 0; i < n_buffer_length;i++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8002bce:	e029      	b.n	8002c24 <compute_HR_SPO2+0x1ec>
	    {
	    	printf("%d,",(int)an_x[i]);
 8002bd0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002bd4:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8002bd8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002be8:	ee17 1a90 	vmov	r1, s15
 8002bec:	48da      	ldr	r0, [pc, #872]	; (8002f58 <compute_HR_SPO2+0x520>)
 8002bee:	f001 faf7 	bl	80041e0 <iprintf>
	    	printf("%d\r\n",(int)an_y[i]);
 8002bf2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002bf6:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 8002bfa:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c0a:	ee17 1a90 	vmov	r1, s15
 8002c0e:	48d3      	ldr	r0, [pc, #844]	; (8002f5c <compute_HR_SPO2+0x524>)
 8002c10:	f001 fae6 	bl	80041e0 <iprintf>
	    	delay(10);
 8002c14:	200a      	movs	r0, #10
 8002c16:	f001 f85b 	bl	8003cd0 <delay>
	    for(int i = 0; i < n_buffer_length;i++)
 8002c1a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8002c24:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002c28:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002c2c:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d8cc      	bhi.n	8002bd0 <compute_HR_SPO2+0x198>

	    }

		//Remove linear trend SUM_OF_SQS

		beta_ir=calculate_linear_regression_beta(an_x,MEAN_IDX,SUM_OF_SQS);
 8002c36:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002c3a:	eddf 0ac9 	vldr	s1, [pc, #804]	; 8002f60 <compute_HR_SPO2+0x528>
 8002c3e:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 8002f64 <compute_HR_SPO2+0x52c>
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fa3c 	bl	80030c0 <calculate_linear_regression_beta>
 8002c48:	ed87 0ad2 	vstr	s0, [r7, #840]	; 0x348
		beta_red=calculate_linear_regression_beta(an_y,MEAN_IDX,SUM_OF_SQS);
 8002c4c:	f107 0310 	add.w	r3, r7, #16
 8002c50:	eddf 0ac3 	vldr	s1, [pc, #780]	; 8002f60 <compute_HR_SPO2+0x528>
 8002c54:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 8002f64 <compute_HR_SPO2+0x52c>
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fa31 	bl	80030c0 <calculate_linear_regression_beta>
 8002c5e:	ed87 0ad1 	vstr	s0, [r7, #836]	; 0x344

		for(k=0,x= -MEAN_IDX,ptr_x=an_x,ptr_y=an_y;k<n_buffer_length;++k,++x,++ptr_x,++ptr_y)
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8002c68:	4bbf      	ldr	r3, [pc, #764]	; (8002f68 <compute_HR_SPO2+0x530>)
 8002c6a:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8002c6e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002c72:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8002c7e:	e036      	b.n	8002cee <compute_HR_SPO2+0x2b6>
		{
			*ptr_x -= beta_ir * x;
 8002c80:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002c84:	ed93 7a00 	vldr	s14, [r3]
 8002c88:	edd7 6ad2 	vldr	s13, [r7, #840]	; 0x348
 8002c8c:	edd7 7ad6 	vldr	s15, [r7, #856]	; 0x358
 8002c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c98:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002c9c:	edc3 7a00 	vstr	s15, [r3]
			*ptr_y -= beta_red * x;
 8002ca0:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002ca4:	ed93 7a00 	vldr	s14, [r3]
 8002ca8:	edd7 6ad1 	vldr	s13, [r7, #836]	; 0x344
 8002cac:	edd7 7ad6 	vldr	s15, [r7, #856]	; 0x358
 8002cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb8:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002cbc:	edc3 7a00 	vstr	s15, [r3]
		for(k=0,x= -MEAN_IDX,ptr_x=an_x,ptr_y=an_y;k<n_buffer_length;++k,++x,++ptr_x,++ptr_y)
 8002cc0:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8002cca:	edd7 7ad6 	vldr	s15, [r7, #856]	; 0x358
 8002cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cd6:	edc7 7ad6 	vstr	s15, [r7, #856]	; 0x358
 8002cda:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002cde:	3304      	adds	r3, #4
 8002ce0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002ce4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002ce8:	3304      	adds	r3, #4
 8002cea:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8002cee:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8002cf2:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002cf6:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d8bf      	bhi.n	8002c80 <compute_HR_SPO2+0x248>
		}

		//Calculate RMS of signals
		x_ac=get_rms(an_x,n_buffer_length,&f_ir_sumsq);
 8002d00:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002d04:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002d08:	6819      	ldr	r1, [r3, #0]
 8002d0a:	f507 724d 	add.w	r2, r7, #820	; 0x334
 8002d0e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fa18 	bl	8003148 <get_rms>
 8002d18:	ed87 0ad0 	vstr	s0, [r7, #832]	; 0x340
		y_ac=get_rms(an_y,n_buffer_length,&f_red_sumsq);
 8002d1c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002d20:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002d24:	6819      	ldr	r1, [r3, #0]
 8002d26:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fa0a 	bl	8003148 <get_rms>
 8002d34:	ed87 0acf 	vstr	s0, [r7, #828]	; 0x33c

		//Calculate Pearson Correlation between signals (checks for good red and IR values, if its good enough it will continue SpO2 calculation)

		*correl=get_correlation_prod(an_x,an_y,n_buffer_length) /sqrt(f_ir_sumsq*f_red_sumsq);
 8002d38:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002d3c:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	f107 0110 	add.w	r1, r7, #16
 8002d46:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f974 	bl	8003038 <get_correlation_prod>
 8002d50:	ee10 3a10 	vmov	r3, s0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fbf7 	bl	8000548 <__aeabi_f2d>
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	460d      	mov	r5, r1
 8002d5e:	ed97 7acd 	vldr	s14, [r7, #820]	; 0x334
 8002d62:	edd7 7acc 	vldr	s15, [r7, #816]	; 0x330
 8002d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6a:	ee17 0a90 	vmov	r0, s15
 8002d6e:	f7fd fbeb 	bl	8000548 <__aeabi_f2d>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	ec43 2b10 	vmov	d0, r2, r3
 8002d7a:	f002 fa5e 	bl	800523a <sqrt>
 8002d7e:	ec53 2b10 	vmov	r2, r3, d0
 8002d82:	4620      	mov	r0, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	f7fd fd61 	bl	800084c <__aeabi_ddiv>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f7fd fee1 	bl	8000b58 <__aeabi_d2f>
 8002d96:	4602      	mov	r2, r0
 8002d98:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002d9c:	601a      	str	r2, [r3, #0]

		//Find signal periodicity (allows to detect heartbeat)

		if(*correl>=min_pearson_correlation)
 8002d9e:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002f6c <compute_HR_SPO2+0x534>
 8002daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	db32      	blt.n	8002e1a <compute_HR_SPO2+0x3e2>
		{
			if(n_last_peak_interval==LOWEST_PK_PK_INTERVAL)
 8002db4:	4b6e      	ldr	r3, [pc, #440]	; (8002f70 <compute_HR_SPO2+0x538>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d110      	bne.n	8002dde <compute_HR_SPO2+0x3a6>
			{
			   periodicity_search_init(an_x,n_buffer_length,&n_last_peak_interval,HIGHEST_PK_PK_INTERVAL, min_autocorrelation_ratio, f_ir_sumsq);
 8002dbc:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002dc0:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	edd7 7acd 	vldr	s15, [r7, #820]	; 0x334
 8002dca:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8002dce:	eef0 0a67 	vmov.f32	s1, s15
 8002dd2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002dd6:	2325      	movs	r3, #37	; 0x25
 8002dd8:	4a65      	ldr	r2, [pc, #404]	; (8002f70 <compute_HR_SPO2+0x538>)
 8002dda:	f000 fa05 	bl	80031e8 <periodicity_search_init>

		    }
			if(n_last_peak_interval!=0)
 8002dde:	4b64      	ldr	r3, [pc, #400]	; (8002f70 <compute_HR_SPO2+0x538>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <compute_HR_SPO2+0x3dc>
			{
				sig_periodicity(an_x,n_buffer_length,&n_last_peak_interval,LOWEST_PK_PK_INTERVAL, HIGHEST_PK_PK_INTERVAL, min_autocorrelation_ratio, f_ir_sumsq,ratio );
 8002de6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002dea:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002dee:	6819      	ldr	r1, [r3, #0]
 8002df0:	edd7 7acd 	vldr	s15, [r7, #820]	; 0x334
 8002df4:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8002df8:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	2325      	movs	r3, #37	; 0x25
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	eef0 0a67 	vmov.f32	s1, s15
 8002e06:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	4a58      	ldr	r2, [pc, #352]	; (8002f70 <compute_HR_SPO2+0x538>)
 8002e0e:	f000 fa60 	bl	80032d2 <sig_periodicity>
 8002e12:	e002      	b.n	8002e1a <compute_HR_SPO2+0x3e2>

		    }
			else
			{
				n_last_peak_interval=0;
 8002e14:	4b56      	ldr	r3, [pc, #344]	; (8002f70 <compute_HR_SPO2+0x538>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
			}

		}
		//Calculate the heart rate
		if(n_last_peak_interval !=0)
 8002e1a:	4b55      	ldr	r3, [pc, #340]	; (8002f70 <compute_HR_SPO2+0x538>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d029      	beq.n	8002e76 <compute_HR_SPO2+0x43e>
		{
			*pn_heart_rate = (int32_t)(FS60/n_last_peak_interval);
 8002e22:	4b53      	ldr	r3, [pc, #332]	; (8002f70 <compute_HR_SPO2+0x538>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002e2a:	fb92 f2f3 	sdiv	r2, r2, r3
 8002e2e:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002e32:	601a      	str	r2, [r3, #0]
			*pch_hr_valid=1;
 8002e34:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
			*pn_spo2 = -999;
			*pch_spo2_valid=0;
			return;
		}
		//Calculate SpO2
		xy_ratio = (y_ac * f_ir_mean)/(x_ac*f_red_mean);
 8002e3c:	ed97 7acf 	vldr	s14, [r7, #828]	; 0x33c
 8002e40:	edd7 7ad8 	vldr	s15, [r7, #864]	; 0x360
 8002e44:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e48:	ed97 7ad0 	vldr	s14, [r7, #832]	; 0x340
 8002e4c:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 8002e50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e58:	edc7 7ace 	vstr	s15, [r7, #824]	; 0x338
		if(xy_ratio > 0.02 && xy_ratio <1.84)
 8002e5c:	f8d7 0338 	ldr.w	r0, [r7, #824]	; 0x338
 8002e60:	f7fd fb72 	bl	8000548 <__aeabi_f2d>
 8002e64:	a332      	add	r3, pc, #200	; (adr r3, 8002f30 <compute_HR_SPO2+0x4f8>)
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f7fd fe55 	bl	8000b18 <__aeabi_dcmpgt>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d114      	bne.n	8002e9e <compute_HR_SPO2+0x466>
 8002e74:	e082      	b.n	8002f7c <compute_HR_SPO2+0x544>
			*pn_heart_rate=-999;
 8002e76:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002e7a:	4a3e      	ldr	r2, [pc, #248]	; (8002f74 <compute_HR_SPO2+0x53c>)
 8002e7c:	601a      	str	r2, [r3, #0]
			*pch_hr_valid=0;
 8002e7e:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002e82:	2200      	movs	r2, #0
 8002e84:	701a      	strb	r2, [r3, #0]
			*pn_spo2 = -999;
 8002e86:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002e8a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a39      	ldr	r2, [pc, #228]	; (8002f78 <compute_HR_SPO2+0x540>)
 8002e92:	601a      	str	r2, [r3, #0]
			*pch_spo2_valid=0;
 8002e94:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	e079      	b.n	8002f92 <compute_HR_SPO2+0x55a>
		if(xy_ratio > 0.02 && xy_ratio <1.84)
 8002e9e:	f8d7 0338 	ldr.w	r0, [r7, #824]	; 0x338
 8002ea2:	f7fd fb51 	bl	8000548 <__aeabi_f2d>
 8002ea6:	a324      	add	r3, pc, #144	; (adr r3, 8002f38 <compute_HR_SPO2+0x500>)
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	f7fd fe16 	bl	8000adc <__aeabi_dcmplt>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d062      	beq.n	8002f7c <compute_HR_SPO2+0x544>
		{
			*pn_spo2 = (-45.06 * xy_ratio + 30.354)*xy_ratio + 94.845;
 8002eb6:	f8d7 0338 	ldr.w	r0, [r7, #824]	; 0x338
 8002eba:	f7fd fb45 	bl	8000548 <__aeabi_f2d>
 8002ebe:	a320      	add	r3, pc, #128	; (adr r3, 8002f40 <compute_HR_SPO2+0x508>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f7fd fb98 	bl	80005f8 <__aeabi_dmul>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	a31d      	add	r3, pc, #116	; (adr r3, 8002f48 <compute_HR_SPO2+0x510>)
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	f7fd f9d9 	bl	800028c <__adddf3>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4614      	mov	r4, r2
 8002ee0:	461d      	mov	r5, r3
 8002ee2:	f8d7 0338 	ldr.w	r0, [r7, #824]	; 0x338
 8002ee6:	f7fd fb2f 	bl	8000548 <__aeabi_f2d>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4620      	mov	r0, r4
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	f7fd fb81 	bl	80005f8 <__aeabi_dmul>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	a314      	add	r3, pc, #80	; (adr r3, 8002f50 <compute_HR_SPO2+0x518>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd f9c2 	bl	800028c <__adddf3>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f7fd fe22 	bl	8000b58 <__aeabi_d2f>
 8002f14:	4602      	mov	r2, r0
 8002f16:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002f1a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	601a      	str	r2, [r3, #0]
			*pch_spo2_valid=1;
 8002f22:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e032      	b.n	8002f92 <compute_HR_SPO2+0x55a>
 8002f2c:	f3af 8000 	nop.w
 8002f30:	47ae147b 	.word	0x47ae147b
 8002f34:	3f947ae1 	.word	0x3f947ae1
 8002f38:	d70a3d71 	.word	0xd70a3d71
 8002f3c:	3ffd70a3 	.word	0x3ffd70a3
 8002f40:	147ae148 	.word	0x147ae148
 8002f44:	c04687ae 	.word	0xc04687ae
 8002f48:	be76c8b4 	.word	0xbe76c8b4
 8002f4c:	403e5a9f 	.word	0x403e5a9f
 8002f50:	7ae147ae 	.word	0x7ae147ae
 8002f54:	4057b614 	.word	0x4057b614
 8002f58:	08005798 	.word	0x08005798
 8002f5c:	0800579c 	.word	0x0800579c
 8002f60:	47a2be80 	.word	0x47a2be80
 8002f64:	42460000 	.word	0x42460000
 8002f68:	c2460000 	.word	0xc2460000
 8002f6c:	3f4ccccd 	.word	0x3f4ccccd
 8002f70:	20000010 	.word	0x20000010
 8002f74:	fffffc19 	.word	0xfffffc19
 8002f78:	c479c000 	.word	0xc479c000
		}
		else
		{
			*pn_spo2 = -999;
 8002f7c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002f80:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a05      	ldr	r2, [pc, #20]	; (8002f9c <compute_HR_SPO2+0x564>)
 8002f88:	601a      	str	r2, [r3, #0]
			*pch_spo2_valid=0;
 8002f8a:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
		}

}
 8002f92:	f507 775a 	add.w	r7, r7, #872	; 0x368
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bdb0      	pop	{r4, r5, r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	c479c000 	.word	0xc479c000

08002fa0 <calculate_autocorrelation>:
//Calculate lag(offset) between signals
float calculate_autocorrelation(float *data_points,int length, int lag)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
	if(lag<0 || lag>=length)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	db03      	blt.n	8002fba <calculate_autocorrelation+0x1a>
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	db02      	blt.n	8002fc0 <calculate_autocorrelation+0x20>
	{
		return 0;
 8002fba:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003034 <calculate_autocorrelation+0x94>
 8002fbe:	e02f      	b.n	8003020 <calculate_autocorrelation+0x80>
	}

	float sum =0.0;
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
	for (int i=0;i<(length-lag);i++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	e018      	b.n	8002ffe <calculate_autocorrelation+0x5e>
	{
		sum += data_points[i] * data_points[i+lag];
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	ed93 7a00 	vldr	s14, [r3]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fec:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff4:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i=0;i<(length-lag);i++)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	429a      	cmp	r2, r3
 8003008:	dbe0      	blt.n	8002fcc <calculate_autocorrelation+0x2c>

	}
	return sum/(length-lag);
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003018:	ed97 7a05 	vldr	s14, [r7, #20]
 800301c:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8003020:	eef0 7a66 	vmov.f32	s15, s13
 8003024:	eeb0 0a67 	vmov.f32	s0, s15
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	00000000 	.word	0x00000000

08003038 <get_correlation_prod>:


float get_correlation_prod(float*x_data,float*y_data,int length)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
	if(length<1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	dc01      	bgt.n	800304e <get_correlation_prod+0x16>
	{
		return NAN;
 800304a:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <get_correlation_prod+0x84>)
 800304c:	e02c      	b.n	80030a8 <get_correlation_prod+0x70>
	}
	float dot_product=0.0f;
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
	for(int i=0;i<length;i++)
 8003054:	2300      	movs	r3, #0
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	e016      	b.n	8003088 <get_correlation_prod+0x50>
	{
		dot_product += x_data[i]*y_data[i];
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4413      	add	r3, r2
 8003062:	ed93 7a00 	vldr	s14, [r3]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	4413      	add	r3, r2
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003076:	ed97 7a07 	vldr	s14, [r7, #28]
 800307a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307e:	edc7 7a07 	vstr	s15, [r7, #28]
	for(int i=0;i<length;i++)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	3301      	adds	r3, #1
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	dbe4      	blt.n	800305a <get_correlation_prod+0x22>
	}
	float norm_dot_prod = dot_product /(float) length;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800309a:	edd7 6a07 	vldr	s13, [r7, #28]
 800309e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a2:	edc7 7a05 	vstr	s15, [r7, #20]
	return norm_dot_prod ;
 80030a6:	697b      	ldr	r3, [r7, #20]

}
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eeb0 0a67 	vmov.f32	s0, s15
 80030b0:	3724      	adds	r7, #36	; 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	7fc00000 	.word	0x7fc00000

080030c0 <calculate_linear_regression_beta>:


float calculate_linear_regression_beta(float *data_points,float mean_index, float sum_of_squares)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	; 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80030cc:	edc7 0a01 	vstr	s1, [r7, #4]
	float index, beta=0.0,*data_ptr;
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]

	for(index=-mean_index,data_ptr=data_points;index<=mean_index;++index,++data_ptr)
 80030d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80030da:	eef1 7a67 	vneg.f32	s15, s15
 80030de:	edc7 7a07 	vstr	s15, [r7, #28]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	e017      	b.n	8003118 <calculate_linear_regression_beta+0x58>
	{
		beta +=index *(*data_ptr); //Accumulate the weighted sum of data points
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	ed93 7a00 	vldr	s14, [r3]
 80030ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80030f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80030fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fe:	edc7 7a06 	vstr	s15, [r7, #24]
	for(index=-mean_index,data_ptr=data_points;index<=mean_index;++index,++data_ptr)
 8003102:	edd7 7a07 	vldr	s15, [r7, #28]
 8003106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800310a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800310e:	edc7 7a07 	vstr	s15, [r7, #28]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3304      	adds	r3, #4
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	ed97 7a07 	vldr	s14, [r7, #28]
 800311c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003128:	d9de      	bls.n	80030e8 <calculate_linear_regression_beta+0x28>

	}

	return beta/sum_of_squares;
 800312a:	ed97 7a06 	vldr	s14, [r7, #24]
 800312e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003132:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003136:	eef0 7a66 	vmov.f32	s15, s13
}
 800313a:	eeb0 0a67 	vmov.f32	s0, s15
 800313e:	3724      	adds	r7, #36	; 0x24
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <get_rms>:

float get_rms(float *data_points, int length, float *sumsq)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
	int i;
	float *data_ptr;
	float r;
	if(length<1)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	dc01      	bgt.n	800315e <get_rms+0x16>
		{
			return NAN;
 800315a:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <get_rms+0x9c>)
 800315c:	e03b      	b.n	80031d6 <get_rms+0x8e>
		}
	(*sumsq=0.0);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	601a      	str	r2, [r3, #0]

	for(i=0,data_ptr=data_points;i<length;++i,++data_ptr)
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	e00f      	b.n	8003190 <get_rms+0x48>
	{
		r=(*data_ptr);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	617b      	str	r3, [r7, #20]
		(*sumsq)=r*r;
 8003176:	edd7 7a05 	vldr	s15, [r7, #20]
 800317a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	edc3 7a00 	vstr	s15, [r3]
	for(i=0,data_ptr=data_points;i<length;++i,++data_ptr)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	3301      	adds	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	3304      	adds	r3, #4
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	429a      	cmp	r2, r3
 8003196:	dbeb      	blt.n	8003170 <get_rms+0x28>
	}

	(*sumsq)/=length;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	edd3 6a00 	vldr	s13, [r3]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	edc3 7a00 	vstr	s15, [r3]
	return sqrt(*sumsq);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd f9c6 	bl	8000548 <__aeabi_f2d>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	ec43 2b10 	vmov	d0, r2, r3
 80031c4:	f002 f839 	bl	800523a <sqrt>
 80031c8:	ec53 2b10 	vmov	r2, r3, d0
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	f7fd fcc2 	bl	8000b58 <__aeabi_d2f>
 80031d4:	4603      	mov	r3, r0

}
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eeb0 0a67 	vmov.f32	s0, s15
 80031de:	3720      	adds	r7, #32
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	7fc00000 	.word	0x7fc00000

080031e8 <periodicity_search_init>:


void periodicity_search_init(float *data_points, int length, int32_t *last_periodicity,
		                    int max_distance,
		                    float min_auto_ratio,float auto_lag0/*baseline for comparison*/)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	; 0x30
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6178      	str	r0, [r7, #20]
 80031f0:	6139      	str	r1, [r7, #16]
 80031f2:	60fa      	str	r2, [r7, #12]
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80031fa:	edc7 0a00 	vstr	s1, [r7]
	//Validate input parameters
	if(length<=0 || max_distance>=length|| min_auto_ratio<=0 || auto_lag0 ==0)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	dd11      	ble.n	8003228 <periodicity_search_init+0x40>
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	429a      	cmp	r2, r3
 800320a:	da0d      	bge.n	8003228 <periodicity_search_init+0x40>
 800320c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003210:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003218:	d906      	bls.n	8003228 <periodicity_search_init+0x40>
 800321a:	edd7 7a00 	vldr	s15, [r7]
 800321e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003226:	d103      	bne.n	8003230 <periodicity_search_init+0x48>
	{
		*last_periodicity=0;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
		return;
 800322e:	e04d      	b.n	80032cc <periodicity_search_init+0xe4>
	}

	//Calculate the autocorrelation at the last known periodicity
	float current_autocorrelation = calculate_autocorrelation(data_points,length,*last_periodicity);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	6939      	ldr	r1, [r7, #16]
 8003238:	6978      	ldr	r0, [r7, #20]
 800323a:	f7ff feb1 	bl	8002fa0 <calculate_autocorrelation>
 800323e:	ed87 0a08 	vstr	s0, [r7, #32]
	float max_autocorrelation = current_autocorrelation;
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c

	int optimal_lag= *last_periodicity;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28

	//Iterrate through data_points in steps of 2 from last known periodicity to max distance
	for(int lag = *last_periodicity ;lag<=max_distance ;lag+=2)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
 8003252:	e023      	b.n	800329c <periodicity_search_init+0xb4>
	{
		float autocorrelation = calculate_autocorrelation(data_points,length,lag);
 8003254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003256:	6939      	ldr	r1, [r7, #16]
 8003258:	6978      	ldr	r0, [r7, #20]
 800325a:	f7ff fea1 	bl	8002fa0 <calculate_autocorrelation>
 800325e:	ed87 0a07 	vstr	s0, [r7, #28]


			//Check if current lag's autocorrelation is a new maximum
			//and exceeds the min threshold
			if((autocorrelation / auto_lag0)>= min_auto_ratio && autocorrelation >max_autocorrelation)
 8003262:	edd7 6a07 	vldr	s13, [r7, #28]
 8003266:	ed97 7a00 	vldr	s14, [r7]
 800326a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800326e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327a:	d80c      	bhi.n	8003296 <periodicity_search_init+0xae>
 800327c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003280:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	dd03      	ble.n	8003296 <periodicity_search_init+0xae>
			{
				max_autocorrelation = autocorrelation;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
				optimal_lag =lag;
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int lag = *last_periodicity ;lag<=max_distance ;lag+=2)
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	3302      	adds	r3, #2
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
 800329c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	ddd7      	ble.n	8003254 <periodicity_search_init+0x6c>

			}
	}

	if(max_autocorrelation/auto_lag0 >= min_auto_ratio)
 80032a4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80032a8:	ed97 7a00 	vldr	s14, [r7]
 80032ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80032b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032bc:	d803      	bhi.n	80032c6 <periodicity_search_init+0xde>
	{
		*last_periodicity=optimal_lag; //Set last periodicity to optimal lag found
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	e002      	b.n	80032cc <periodicity_search_init+0xe4>
	}
	else
	{
		*last_periodicity=0;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
	}

}
 80032cc:	3730      	adds	r7, #48	; 0x30
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <sig_periodicity>:


void sig_periodicity(float *data_points, int length,
		             int32_t *last_periodicity, int min_distance, int max_distance
		              ,float min_auto_ratio, float auto_lag0, float *ratio)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b08e      	sub	sp, #56	; 0x38
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6178      	str	r0, [r7, #20]
 80032da:	6139      	str	r1, [r7, #16]
 80032dc:	60fa      	str	r2, [r7, #12]
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	ed87 0a01 	vstr	s0, [r7, #4]
 80032e4:	edc7 0a00 	vstr	s1, [r7]
	//Validate input parameters
		if(length<=0 || max_distance>=length|| min_auto_ratio<=0 || auto_lag0 ==0)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	dd11      	ble.n	8003312 <sig_periodicity+0x40>
 80032ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	da0d      	bge.n	8003312 <sig_periodicity+0x40>
 80032f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80032fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	d906      	bls.n	8003312 <sig_periodicity+0x40>
 8003304:	edd7 7a00 	vldr	s15, [r7]
 8003308:	eef5 7a40 	vcmp.f32	s15, #0.0
 800330c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003310:	d107      	bne.n	8003322 <sig_periodicity+0x50>
		{
			*last_periodicity=0;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
			*ratio=0.0;
 8003318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
			return;
 8003320:	e073      	b.n	800340a <sig_periodicity+0x138>
		}

		//Start search from the previous known periodicity
		int current_lag= *last_periodicity;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	637b      	str	r3, [r7, #52]	; 0x34

		//Calculate initialthe autocorrelation
		float current_autocorrelation = calculate_autocorrelation(data_points,length,current_lag);
 8003328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800332a:	6939      	ldr	r1, [r7, #16]
 800332c:	6978      	ldr	r0, [r7, #20]
 800332e:	f7ff fe37 	bl	8002fa0 <calculate_autocorrelation>
 8003332:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		//Store current as max
		float max_autocorrelation = current_autocorrelation;
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28

		int optimal_lag= current_lag;
 800333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c


		//Search for autocorrelation to the left of lag
		while(current_lag>=min_distance)
 800333e:	e019      	b.n	8003374 <sig_periodicity+0xa2>
		{
			float left_autocorrelation=calculate_autocorrelation(data_points,length,current_lag-1);
 8003340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003342:	3b01      	subs	r3, #1
 8003344:	461a      	mov	r2, r3
 8003346:	6939      	ldr	r1, [r7, #16]
 8003348:	6978      	ldr	r0, [r7, #20]
 800334a:	f7ff fe29 	bl	8002fa0 <calculate_autocorrelation>
 800334e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

			//Check if we found a local maximum
			if(left_autocorrelation<=current_autocorrelation)
 8003352:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003356:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800335a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800335e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003362:	d90c      	bls.n	800337e <sig_periodicity+0xac>
			{
				//Stop the left search because there is no improvement
				break;
			}
			//Update the current autocorrelation to the new one found
			current_autocorrelation=left_autocorrelation;
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	633b      	str	r3, [r7, #48]	; 0x30

			//Update the optimal lag
			optimal_lag=current_lag-1;
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	3b01      	subs	r3, #1
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c

			//Decrement the current lag for next iteration
			current_lag--;
 800336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003370:	3b01      	subs	r3, #1
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
		while(current_lag>=min_distance)
 8003374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	429a      	cmp	r2, r3
 800337a:	dae1      	bge.n	8003340 <sig_periodicity+0x6e>
 800337c:	e000      	b.n	8003380 <sig_periodicity+0xae>
				break;
 800337e:	bf00      	nop
		}


		//Search for autocorrelation to the right of lag
		 current_lag= *last_periodicity;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	637b      	str	r3, [r7, #52]	; 0x34

		//Calculate initialthe autocorrelation
		 current_autocorrelation = max_autocorrelation;//Rest to max autocorrelation
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	633b      	str	r3, [r7, #48]	; 0x30

		//Reset variables
		while(current_lag<=max_distance)
 800338a:	e019      	b.n	80033c0 <sig_periodicity+0xee>
		{
			//Calculate autocorreraltion for right lag
			float right_autocorrelation=calculate_autocorrelation(data_points,length,current_lag+1);
 800338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338e:	3301      	adds	r3, #1
 8003390:	461a      	mov	r2, r3
 8003392:	6939      	ldr	r1, [r7, #16]
 8003394:	6978      	ldr	r0, [r7, #20]
 8003396:	f7ff fe03 	bl	8002fa0 <calculate_autocorrelation>
 800339a:	ed87 0a08 	vstr	s0, [r7, #32]

						//Check if we found a local maximum
						if(right_autocorrelation<=current_autocorrelation)
 800339e:	ed97 7a08 	vldr	s14, [r7, #32]
 80033a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80033a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ae:	d90c      	bls.n	80033ca <sig_periodicity+0xf8>
						{
							//Stop the right search because there is no improvement
							break;
						}
						//Update the current autocorrelation to the new one found
						current_autocorrelation=right_autocorrelation;
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30

						//Update the optimal lag
						optimal_lag=current_lag+1;
 80033b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b6:	3301      	adds	r3, #1
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c

						//Increment the current lag for next iteration
						current_lag++;
 80033ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033bc:	3301      	adds	r3, #1
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
		while(current_lag<=max_distance)
 80033c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c4:	429a      	cmp	r2, r3
 80033c6:	dde1      	ble.n	800338c <sig_periodicity+0xba>
 80033c8:	e000      	b.n	80033cc <sig_periodicity+0xfa>
							break;
 80033ca:	bf00      	nop

		}

		//Final validation of periodicity found
		float final_ratio =current_autocorrelation /auto_lag0;
 80033cc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80033d0:	ed97 7a00 	vldr	s14, [r7]
 80033d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033d8:	edc7 7a07 	vstr	s15, [r7, #28]

		if(final_ratio>=min_auto_ratio)
 80033dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80033e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ec:	db06      	blt.n	80033fc <sig_periodicity+0x12a>
		{
			*last_periodicity= optimal_lag;//Update last periodicity to the optimal lag found
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f2:	601a      	str	r2, [r3, #0]
			*ratio=final_ratio;            //Store the ratio in the output variable
 80033f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e006      	b.n	800340a <sig_periodicity+0x138>
		}
		else
		{
			//Set variables to 0
			*last_periodicity=0.0;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
			*ratio=0.0;
 8003402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
		}
}
 800340a:	3738      	adds	r7, #56	; 0x38
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <rtc_init>:
static void rtc_set_asynch_prescaler(uint32_t AsynchPrescaler);
static void rtc_set_synch_prescaler(uint32_t SynchPrescaler);
static uint8_t exit_init_seq(void);

void rtc_init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	/*Enable clock access to PWR */
	RCC->APB1ENR |= PWREN;
 8003414:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <rtc_init+0xc4>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	4a2e      	ldr	r2, [pc, #184]	; (80034d4 <rtc_init+0xc4>)
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enable Backup access to config RTC*/
	PWR->CR |=CR_DBP;
 8003420:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <rtc_init+0xc8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a2c      	ldr	r2, [pc, #176]	; (80034d8 <rtc_init+0xc8>)
 8003426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342a:	6013      	str	r3, [r2, #0]

	/*Enable Low Speed Internal (LSI)*/
	RCC->CSR |=CSR_LSION;
 800342c:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <rtc_init+0xc4>)
 800342e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003430:	4a28      	ldr	r2, [pc, #160]	; (80034d4 <rtc_init+0xc4>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6753      	str	r3, [r2, #116]	; 0x74

	/*Wait for LSI to be ready*/
	while((RCC->CSR & CSR_LSIRDY) != CSR_LSIRDY){}
 8003438:	bf00      	nop
 800343a:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <rtc_init+0xc4>)
 800343c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d1f9      	bne.n	800343a <rtc_init+0x2a>

	/*Force backup domain reset*/
	RCC->BDCR |=BDCR_BDRST;
 8003446:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <rtc_init+0xc4>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a22      	ldr	r2, [pc, #136]	; (80034d4 <rtc_init+0xc4>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6713      	str	r3, [r2, #112]	; 0x70

	/*Release backup domain reset*/
	RCC->BDCR &= ~BDCR_BDRST;
 8003452:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <rtc_init+0xc4>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	4a1f      	ldr	r2, [pc, #124]	; (80034d4 <rtc_init+0xc4>)
 8003458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345c:	6713      	str	r3, [r2, #112]	; 0x70

	/*Set RTC clock source to LSI*/
	RCC->BDCR &=~(1U<<8);
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <rtc_init+0xc4>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <rtc_init+0xc4>)
 8003464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003468:	6713      	str	r3, [r2, #112]	; 0x70
	RCC->BDCR |= (1U<<9);
 800346a:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <rtc_init+0xc4>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a19      	ldr	r2, [pc, #100]	; (80034d4 <rtc_init+0xc4>)
 8003470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003474:	6713      	str	r3, [r2, #112]	; 0x70

	/*Enable the RTC*/
	RCC->BDCR |=BDCR_RTCEN;
 8003476:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <rtc_init+0xc4>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <rtc_init+0xc4>)
 800347c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003480:	6713      	str	r3, [r2, #112]	; 0x70

	/*Disable RTC registers write protection*/
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_1;
 8003482:	4b16      	ldr	r3, [pc, #88]	; (80034dc <rtc_init+0xcc>)
 8003484:	22ca      	movs	r2, #202	; 0xca
 8003486:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_2;
 8003488:	4b14      	ldr	r3, [pc, #80]	; (80034dc <rtc_init+0xcc>)
 800348a:	2253      	movs	r2, #83	; 0x53
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enter the initialization mode*/
	if(rtc_init_seq() != 1)
 800348e:	f000 f921 	bl	80036d4 <rtc_init_seq>
	{
		//Do something...
	}

	/*Set desired date :  Friday December 29th 2016*/
	rtc_date_config(WEEKDAY_FRIDAY,0x29,MONTH_DECEMBER,0x16);
 8003492:	2316      	movs	r3, #22
 8003494:	2212      	movs	r2, #18
 8003496:	2129      	movs	r1, #41	; 0x29
 8003498:	2005      	movs	r0, #5
 800349a:	f000 f891 	bl	80035c0 <rtc_date_config>

	/*Set desired time :  11:59:55 PM*/
	rtc_time_config(TIME_FORMAT_PM,0x11,0x59,0X55);
 800349e:	2355      	movs	r3, #85	; 0x55
 80034a0:	2259      	movs	r2, #89	; 0x59
 80034a2:	2111      	movs	r1, #17
 80034a4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80034a8:	f000 f8b0 	bl	800360c <rtc_time_config>

	/*Set hour format*/
	RTC->CR |=CR_FMT;
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <rtc_init+0xcc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <rtc_init+0xcc>)
 80034b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b6:	6093      	str	r3, [r2, #8]

	/*Set Asynch prescaler*/
	rtc_set_asynch_prescaler(RTC_ASYNCH_PREDIV);
 80034b8:	207f      	movs	r0, #127	; 0x7f
 80034ba:	f000 f855 	bl	8003568 <rtc_set_asynch_prescaler>

	/*Set Sync prescaler*/
	rtc_set_synch_prescaler(RTC_SYNCH_PREDIV);
 80034be:	20f9      	movs	r0, #249	; 0xf9
 80034c0:	f000 f868 	bl	8003594 <rtc_set_synch_prescaler>

	/*Exit the initialization mode*/
	exit_init_seq();
 80034c4:	f000 f928 	bl	8003718 <exit_init_seq>

	/*Enable RTC registers write protection*/
	RTC->WPR = 0xFF;
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <rtc_init+0xcc>)
 80034ca:	22ff      	movs	r2, #255	; 0xff
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40007000 	.word	0x40007000
 80034dc:	40002800 	.word	0x40002800

080034e0 <rtc_convert_bcd2bin>:
{
	return  (uint8_t)((((value) / 10U) << 4U) | ((value) % 10U));
}

uint8_t rtc_convert_bcd2bin(uint8_t value )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
	return (uint8_t)(((uint8_t)((value) & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U + ((value) & (uint8_t)0x0FU));
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4413      	add	r3, r2
 8003504:	b2db      	uxtb	r3, r3
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <rtc_time_get_second>:
{
 return (uint32_t)((READ_BIT(RTC->DR, (RTC_DR_MT | RTC_DR_MU)))>> RTC_DR_MU_Pos);
}

uint32_t rtc_time_get_second(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
 return (uint32_t)(READ_BIT(RTC->TR, (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <rtc_time_get_second+0x18>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40002800 	.word	0x40002800

08003530 <rtc_time_get_minute>:

uint32_t rtc_time_get_minute(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
 return (uint32_t)(READ_BIT(RTC->TR, (RTC_TR_MNT | RTC_TR_MNU))>> RTC_TR_MNU_Pos);
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <rtc_time_get_minute+0x18>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40002800 	.word	0x40002800

0800354c <rtc_time_get_hour>:


 uint32_t rtc_time_get_hour(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RTC->TR, (RTC_TR_HT | RTC_TR_HU))) >> RTC_TR_HU_Pos);
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <rtc_time_get_hour+0x18>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0c1b      	lsrs	r3, r3, #16
 8003556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	40002800 	.word	0x40002800

08003568 <rtc_set_asynch_prescaler>:

static void rtc_set_asynch_prescaler(uint32_t AsynchPrescaler)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <rtc_set_asynch_prescaler+0x28>)
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	4904      	ldr	r1, [pc, #16]	; (8003590 <rtc_set_asynch_prescaler+0x28>)
 800357e:	4313      	orrs	r3, r2
 8003580:	610b      	str	r3, [r1, #16]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40002800 	.word	0x40002800

08003594 <rtc_set_synch_prescaler>:



static void rtc_set_synch_prescaler(uint32_t SynchPrescaler)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800359c:	4b07      	ldr	r3, [pc, #28]	; (80035bc <rtc_set_synch_prescaler+0x28>)
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035a8:	4904      	ldr	r1, [pc, #16]	; (80035bc <rtc_set_synch_prescaler+0x28>)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	610b      	str	r3, [r1, #16]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	40002800 	.word	0x40002800

080035c0 <rtc_date_config>:


static void rtc_date_config(uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 80035c0:	b490      	push	{r4, r7}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;

  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	041b      	lsls	r3, r3, #16
 80035d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 80035da:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 80035e2:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 80035e8:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTC->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <rtc_date_config+0x44>)
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <rtc_date_config+0x48>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	4a03      	ldr	r2, [pc, #12]	; (8003604 <rtc_date_config+0x44>)
 80035f6:	4323      	orrs	r3, r4
 80035f8:	6053      	str	r3, [r2, #4]
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc90      	pop	{r4, r7}
 8003602:	4770      	bx	lr
 8003604:	40002800 	.word	0x40002800
 8003608:	ff0000c0 	.word	0xff0000c0

0800360c <rtc_time_config>:



static void rtc_time_config(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 800360c:	b490      	push	{r4, r7}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	041b      	lsls	r3, r3, #16
 800361e:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 800362c:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8003632:	ea42 0403 	orr.w	r4, r2, r3
  MODIFY_REG(RTC->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <rtc_time_config+0x48>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 800363e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003642:	4a04      	ldr	r2, [pc, #16]	; (8003654 <rtc_time_config+0x48>)
 8003644:	4323      	orrs	r3, r4
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bc90      	pop	{r4, r7}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40002800 	.word	0x40002800

08003658 <_rtc_enable_init_mode>:


void _rtc_enable_init_mode(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
	RTC->ISR = RTC_INIT_MASK;
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <_rtc_enable_init_mode+0x18>)
 800365e:	f04f 32ff 	mov.w	r2, #4294967295
 8003662:	60da      	str	r2, [r3, #12]
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40002800 	.word	0x40002800

08003674 <_rtc_disable_init_mode>:

void _rtc_disable_init_mode(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
	RTC->ISR = ~RTC_INIT_MASK;
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <_rtc_disable_init_mode+0x14>)
 800367a:	2200      	movs	r2, #0
 800367c:	60da      	str	r2, [r3, #12]
}
 800367e:	bf00      	nop
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40002800 	.word	0x40002800

0800368c <_rtc_isActiveflag_init>:

uint8_t _rtc_isActiveflag_init(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0

	return ((RTC->ISR & ISR_INITF) == ISR_INITF);
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <_rtc_isActiveflag_init+0x20>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40002800 	.word	0x40002800

080036b0 <_rtc_isActiveflag_rs>:

uint8_t _rtc_isActiveflag_rs(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
	return ((RTC->ISR & ISR_RSF) == ISR_RSF);
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <_rtc_isActiveflag_rs+0x20>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b20      	cmp	r3, #32
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	40002800 	.word	0x40002800

080036d4 <rtc_init_seq>:

static uint8_t rtc_init_seq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
	/*Start init mode*/
	_rtc_enable_init_mode();
 80036d8:	f7ff ffbe 	bl	8003658 <_rtc_enable_init_mode>

	/*Wait till we are in init mode*/
	while(_rtc_isActiveflag_init() != 1){}
 80036dc:	bf00      	nop
 80036de:	f7ff ffd5 	bl	800368c <_rtc_isActiveflag_init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d1fa      	bne.n	80036de <rtc_init_seq+0xa>

	return 1;
 80036e8:	2301      	movs	r3, #1
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <wait_for_synchro>:

static uint8_t wait_for_synchro(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
	 /*Clear RSF*/
	RTC->ISR &= ~ISR_RSF;
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <wait_for_synchro+0x24>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a06      	ldr	r2, [pc, #24]	; (8003714 <wait_for_synchro+0x24>)
 80036fa:	f023 0320 	bic.w	r3, r3, #32
 80036fe:	60d3      	str	r3, [r2, #12]

	/*Wait for registers synch*/
	while(_rtc_isActiveflag_rs() !=1){}
 8003700:	bf00      	nop
 8003702:	f7ff ffd5 	bl	80036b0 <_rtc_isActiveflag_rs>
 8003706:	4603      	mov	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d1fa      	bne.n	8003702 <wait_for_synchro+0x12>

	return 1;
 800370c:	2301      	movs	r3, #1
}
 800370e:	4618      	mov	r0, r3
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40002800 	.word	0x40002800

08003718 <exit_init_seq>:
static uint8_t exit_init_seq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
	/*Stop init mode*/
	_rtc_disable_init_mode();
 800371c:	f7ff ffaa 	bl	8003674 <_rtc_disable_init_mode>

	/*Wait for registers to synchronise*/
	return (wait_for_synchro());
 8003720:	f7ff ffe6 	bl	80036f0 <wait_for_synchro>
 8003724:	4603      	mov	r3, r0
}
 8003726:	4618      	mov	r0, r3
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8003730:	4b50      	ldr	r3, [pc, #320]	; (8003874 <spi1_gpio_init+0x148>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	4a4f      	ldr	r2, [pc, #316]	; (8003874 <spi1_gpio_init+0x148>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 800373c:	4b4e      	ldr	r3, [pc, #312]	; (8003878 <spi1_gpio_init+0x14c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a4d      	ldr	r2, [pc, #308]	; (8003878 <spi1_gpio_init+0x14c>)
 8003742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003746:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8003748:	4b4b      	ldr	r3, [pc, #300]	; (8003878 <spi1_gpio_init+0x14c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a4a      	ldr	r2, [pc, #296]	; (8003878 <spi1_gpio_init+0x14c>)
 800374e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003752:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8003754:	4b48      	ldr	r3, [pc, #288]	; (8003878 <spi1_gpio_init+0x14c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a47      	ldr	r2, [pc, #284]	; (8003878 <spi1_gpio_init+0x14c>)
 800375a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800375e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 8003760:	4b45      	ldr	r3, [pc, #276]	; (8003878 <spi1_gpio_init+0x14c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a44      	ldr	r2, [pc, #272]	; (8003878 <spi1_gpio_init+0x14c>)
 8003766:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800376a:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 800376c:	4b42      	ldr	r3, [pc, #264]	; (8003878 <spi1_gpio_init+0x14c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a41      	ldr	r2, [pc, #260]	; (8003878 <spi1_gpio_init+0x14c>)
 8003772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003776:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8003778:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <spi1_gpio_init+0x14c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a3e      	ldr	r2, [pc, #248]	; (8003878 <spi1_gpio_init+0x14c>)
 800377e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003782:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8003784:	4b3c      	ldr	r3, [pc, #240]	; (8003878 <spi1_gpio_init+0x14c>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4a3b      	ldr	r2, [pc, #236]	; (8003878 <spi1_gpio_init+0x14c>)
 800378a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800378e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <spi1_gpio_init+0x14c>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	4a38      	ldr	r2, [pc, #224]	; (8003878 <spi1_gpio_init+0x14c>)
 8003796:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800379a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 800379c:	4b36      	ldr	r3, [pc, #216]	; (8003878 <spi1_gpio_init+0x14c>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	4a35      	ldr	r2, [pc, #212]	; (8003878 <spi1_gpio_init+0x14c>)
 80037a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 80037a8:	4b33      	ldr	r3, [pc, #204]	; (8003878 <spi1_gpio_init+0x14c>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4a32      	ldr	r2, [pc, #200]	; (8003878 <spi1_gpio_init+0x14c>)
 80037ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037b2:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 80037b4:	4b30      	ldr	r3, [pc, #192]	; (8003878 <spi1_gpio_init+0x14c>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <spi1_gpio_init+0x14c>)
 80037ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 80037c0:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <spi1_gpio_init+0x14c>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	4a2c      	ldr	r2, [pc, #176]	; (8003878 <spi1_gpio_init+0x14c>)
 80037c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80037ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 80037cc:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <spi1_gpio_init+0x14c>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	4a29      	ldr	r2, [pc, #164]	; (8003878 <spi1_gpio_init+0x14c>)
 80037d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <spi1_gpio_init+0x14c>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	4a26      	ldr	r2, [pc, #152]	; (8003878 <spi1_gpio_init+0x14c>)
 80037de:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80037e2:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 80037e4:	4b24      	ldr	r3, [pc, #144]	; (8003878 <spi1_gpio_init+0x14c>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	4a23      	ldr	r2, [pc, #140]	; (8003878 <spi1_gpio_init+0x14c>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 80037f0:	4b21      	ldr	r3, [pc, #132]	; (8003878 <spi1_gpio_init+0x14c>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a20      	ldr	r2, [pc, #128]	; (8003878 <spi1_gpio_init+0x14c>)
 80037f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80037fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 80037fc:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <spi1_gpio_init+0x14c>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <spi1_gpio_init+0x14c>)
 8003802:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003806:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <spi1_gpio_init+0x14c>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	4a1a      	ldr	r2, [pc, #104]	; (8003878 <spi1_gpio_init+0x14c>)
 800380e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003812:	6213      	str	r3, [r2, #32]


	 /*Set Pin speed to very high*/

	/*PA5*/
	GPIOA->OSPEEDR |=(1U<<10);
 8003814:	4b18      	ldr	r3, [pc, #96]	; (8003878 <spi1_gpio_init+0x14c>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a17      	ldr	r2, [pc, #92]	; (8003878 <spi1_gpio_init+0x14c>)
 800381a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800381e:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=(1U<<11);
 8003820:	4b15      	ldr	r3, [pc, #84]	; (8003878 <spi1_gpio_init+0x14c>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <spi1_gpio_init+0x14c>)
 8003826:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800382a:	6093      	str	r3, [r2, #8]

	/*PA6*/
	GPIOA->OSPEEDR |=(1U<<12);
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <spi1_gpio_init+0x14c>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a11      	ldr	r2, [pc, #68]	; (8003878 <spi1_gpio_init+0x14c>)
 8003832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003836:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=(1U<<13);
 8003838:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <spi1_gpio_init+0x14c>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a0e      	ldr	r2, [pc, #56]	; (8003878 <spi1_gpio_init+0x14c>)
 800383e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003842:	6093      	str	r3, [r2, #8]

	/*PA7*/
	GPIOA->OSPEEDR |=(1U<<14);
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <spi1_gpio_init+0x14c>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <spi1_gpio_init+0x14c>)
 800384a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800384e:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=(1U<<15);
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <spi1_gpio_init+0x14c>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a08      	ldr	r2, [pc, #32]	; (8003878 <spi1_gpio_init+0x14c>)
 8003856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800385a:	6093      	str	r3, [r2, #8]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <spi1_gpio_init+0x148>)
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	4a04      	ldr	r2, [pc, #16]	; (8003874 <spi1_gpio_init+0x148>)
 8003862:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003866:	6453      	str	r3, [r2, #68]	; 0x44

}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	40020000 	.word	0x40020000

0800387c <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <spi_init+0x12>
	{
		return DEV_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e05a      	b.n	8003944 <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	629a      	str	r2, [r3, #40]	; 0x28

	if(hspi->State == SPI_STATE_RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <spi_init+0x26>
	{
		spi1_gpio_init();
 800389e:	f7ff ff45 	bl	800372c <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b8:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003906:	ea42 0103 	orr.w	r1, r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	f003 0104 	and.w	r1, r3, #4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f003 0210 	and.w	r2, r3, #16
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->State =  SPI_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   return DEV_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <spi_transmit>:



StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	75fb      	strb	r3, [r7, #23]
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	82bb      	strh	r3, [r7, #20]
	tickstart = get_tick();
 8003964:	f000 f9d2 	bl	8003d0c <get_tick>
 8003968:	6138      	str	r0, [r7, #16]

	if(hspi->State != SPI_STATE_READY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d007      	beq.n	8003984 <spi_transmit+0x38>
	{
		error_code = DEV_BUSY;
 8003974:	2302      	movs	r3, #2
 8003976:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	e0fd      	b.n	8003b80 <spi_transmit+0x234>
	}

	if((p_data == NULL) || (size  == 0))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <spi_transmit+0x44>
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d107      	bne.n	80039a0 <spi_transmit+0x54>
	{
		error_code =  DEV_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return error_code;
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	e0ef      	b.n	8003b80 <spi_transmit+0x234>
	}

	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2203      	movs	r2, #3
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi->TxXferSize =  size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	88fa      	ldrh	r2, [r7, #6]
 80039b8:	861a      	strh	r2, [r3, #48]	; 0x30
	hspi->TxXferCount=  size;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	88fa      	ldrh	r2, [r7, #6]
 80039be:	865a      	strh	r2, [r3, #50]	; 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	635a      	str	r2, [r3, #52]	; 0x34
	hspi->RxXferSize =  0;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	871a      	strh	r2, [r3, #56]	; 0x38
	hspi->RxXferCount=  0;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	875a      	strh	r2, [r3, #58]	; 0x3a

	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039da:	d10f      	bne.n	80039fc <spi_transmit+0xb0>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ea:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039fa:	601a      	str	r2, [r3, #0]

	}

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d007      	beq.n	8003a1a <spi_transmit+0xce>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a18:	601a      	str	r2, [r3, #0]
	}

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a22:	d150      	bne.n	8003ac6 <spi_transmit+0x17a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  1))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <spi_transmit+0xe6>
 8003a2c:	8abb      	ldrh	r3, [r7, #20]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d143      	bne.n	8003aba <spi_transmit+0x16e>
		{
			hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	1c9a      	adds	r2, r3, #2
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c
			hspi->TxXferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	865a      	strh	r2, [r3, #50]	; 0x32
		}

		while(hspi->TxXferCount> 0)
 8003a56:	e030      	b.n	8003aba <spi_transmit+0x16e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d012      	beq.n	8003a8c <spi_transmit+0x140>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c
				hspi->TxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	865a      	strh	r2, [r3, #50]	; 0x32
 8003a8a:	e016      	b.n	8003aba <spi_transmit+0x16e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8003a8c:	f000 f93e 	bl	8003d0c <get_tick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d803      	bhi.n	8003aa4 <spi_transmit+0x158>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa2:	d102      	bne.n	8003aaa <spi_transmit+0x15e>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d107      	bne.n	8003aba <spi_transmit+0x16e>
		         {
					error_code = DEV_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	e062      	b.n	8003b80 <spi_transmit+0x234>
		while(hspi->TxXferCount> 0)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1c9      	bne.n	8003a58 <spi_transmit+0x10c>
 8003ac4:	e051      	b.n	8003b6a <spi_transmit+0x21e>

	}
	/*Transmit data in 8 bit mode*/
	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  1))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <spi_transmit+0x188>
 8003ace:	8abb      	ldrh	r3, [r7, #20]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d145      	bne.n	8003b60 <spi_transmit+0x214>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	7812      	ldrb	r2, [r2, #0]
 8003ae0:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	62da      	str	r2, [r3, #44]	; 0x2c
			hspi->TxXferCount--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	865a      	strh	r2, [r3, #50]	; 0x32
		}
		while(hspi->TxXferCount> 0)
 8003afa:	e031      	b.n	8003b60 <spi_transmit+0x214>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d013      	beq.n	8003b32 <spi_transmit+0x1e6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	330c      	adds	r3, #12
 8003b14:	7812      	ldrb	r2, [r2, #0]
 8003b16:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	62da      	str	r2, [r3, #44]	; 0x2c
				hspi->TxXferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	865a      	strh	r2, [r3, #50]	; 0x32
 8003b30:	e016      	b.n	8003b60 <spi_transmit+0x214>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8003b32:	f000 f8eb 	bl	8003d0c <get_tick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d803      	bhi.n	8003b4a <spi_transmit+0x1fe>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d102      	bne.n	8003b50 <spi_transmit+0x204>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <spi_transmit+0x214>
		         {
					error_code = DEV_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					return error_code;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	e00f      	b.n	8003b80 <spi_transmit+0x234>
		while(hspi->TxXferCount> 0)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1c8      	bne.n	8003afc <spi_transmit+0x1b0>
		}

	}


	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <spi_transmit+0x22a>
	{
		error_code = DEV_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	return error_code;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]

}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e00a      	b.n	8003bb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b9a:	f3af 8000 	nop.w
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	60ba      	str	r2, [r7, #8]
 8003ba6:	b2ca      	uxtb	r2, r1
 8003ba8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	3301      	adds	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	dbf0      	blt.n	8003b9a <_read+0x12>
  }

  return len;
 8003bb8:	687b      	ldr	r3, [r7, #4]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b086      	sub	sp, #24
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	e009      	b.n	8003be8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	60ba      	str	r2, [r7, #8]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 f8e3 	bl	8003da8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	3301      	adds	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	dbf1      	blt.n	8003bd4 <_write+0x12>
  }
  return len;
 8003bf0:	687b      	ldr	r3, [r7, #4]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <_close>:

int _close(int file)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c22:	605a      	str	r2, [r3, #4]
  return 0;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <_isatty>:

int _isatty(int file)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c3a:	2301      	movs	r3, #1
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c6c:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <_sbrk+0x5c>)
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <_sbrk+0x60>)
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <_sbrk+0x64>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <_sbrk+0x64>)
 8003c82:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <_sbrk+0x68>)
 8003c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <_sbrk+0x64>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d207      	bcs.n	8003ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c94:	f000 fc9c 	bl	80045d0 <__errno>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	220c      	movs	r2, #12
 8003c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca2:	e009      	b.n	8003cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <_sbrk+0x64>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <_sbrk+0x64>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <_sbrk+0x64>)
 8003cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20020000 	.word	0x20020000
 8003cc4:	00000400 	.word	0x00000400
 8003cc8:	20000450 	.word	0x20000450
 8003ccc:	200005a8 	.word	0x200005a8

08003cd0 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8003cd8:	f000 f818 	bl	8003d0c <get_tick>
 8003cdc:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d002      	beq.n	8003cf0 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3301      	adds	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8003cf0:	bf00      	nop
 8003cf2:	f000 f80b 	bl	8003d0c <get_tick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d8f7      	bhi.n	8003cf2 <delay+0x22>

}
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <get_tick>:

uint32_t get_tick(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d10:	b672      	cpsid	i
}
 8003d12:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <get_tick+0x24>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a06      	ldr	r2, [pc, #24]	; (8003d34 <get_tick+0x28>)
 8003d1a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d1c:	b662      	cpsie	i
}
 8003d1e:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <get_tick+0x28>)
 8003d22:	681b      	ldr	r3, [r3, #0]

}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000454 	.word	0x20000454
 8003d34:	20000458 	.word	0x20000458

08003d38 <tick_increment>:
static void tick_increment(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <tick_increment+0x18>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	4a03      	ldr	r2, [pc, #12]	; (8003d50 <tick_increment+0x18>)
 8003d44:	6013      	str	r3, [r2, #0]
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	20000454 	.word	0x20000454

08003d54 <timebase_init>:
void timebase_init(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d58:	b672      	cpsid	i
}
 8003d5a:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per second*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <timebase_init+0x44>)
 8003d5e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8003d62:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <timebase_init+0x44>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <timebase_init+0x44>)
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <timebase_init+0x44>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <timebase_init+0x44>)
 8003d76:	f043 0302 	orr.w	r3, r3, #2
 8003d7a:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <timebase_init+0x44>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a05      	ldr	r2, [pc, #20]	; (8003d98 <timebase_init+0x44>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d88:	b662      	cpsie	i
}
 8003d8a:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	e000e010 	.word	0xe000e010

08003d9c <SysTick_Handler>:

void SysTick_Handler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
	//HAL_IncTick();
	tick_increment();
 8003da0:	f7ff ffca 	bl	8003d38 <tick_increment>
}
 8003da4:	bf00      	nop
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f84f 	bl	8003e54 <uart_write>
	return ch;
 8003db6:	687b      	ldr	r3, [r7, #4]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <debug_uart_init>:

void debug_uart_init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8003dc4:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <debug_uart_init+0x84>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <debug_uart_init+0x84>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <debug_uart_init+0x88>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <debug_uart_init+0x88>)
 8003dd6:	f023 0310 	bic.w	r3, r3, #16
 8003dda:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <debug_uart_init+0x88>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <debug_uart_init+0x88>)
 8003de2:	f043 0320 	orr.w	r3, r3, #32
 8003de6:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8003de8:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <debug_uart_init+0x88>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <debug_uart_init+0x88>)
 8003dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <debug_uart_init+0x88>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	4a13      	ldr	r2, [pc, #76]	; (8003e48 <debug_uart_init+0x88>)
 8003dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dfe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8003e00:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <debug_uart_init+0x88>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <debug_uart_init+0x88>)
 8003e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e0a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8003e0c:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <debug_uart_init+0x88>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	4a0d      	ldr	r2, [pc, #52]	; (8003e48 <debug_uart_init+0x88>)
 8003e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e16:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <debug_uart_init+0x84>)
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <debug_uart_init+0x84>)
 8003e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e22:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8003e24:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003e28:	4808      	ldr	r0, [pc, #32]	; (8003e4c <debug_uart_init+0x8c>)
 8003e2a:	f000 f83f 	bl	8003eac <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <debug_uart_init+0x90>)
 8003e30:	2208      	movs	r2, #8
 8003e32:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <debug_uart_init+0x90>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <debug_uart_init+0x90>)
 8003e3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e3e:	60d3      	str	r3, [r2, #12]
}
 8003e40:	bf00      	nop
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40020000 	.word	0x40020000
 8003e4c:	00f42400 	.word	0x00f42400
 8003e50:	40004400 	.word	0x40004400

08003e54 <uart_write>:



static void uart_write(int ch)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8003e5c:	bf00      	nop
 8003e5e:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <uart_write+0x2c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f9      	beq.n	8003e5e <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <uart_write+0x2c>)
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	6053      	str	r3, [r2, #4]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40004400 	.word	0x40004400

08003e84 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	085a      	lsrs	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	441a      	add	r2, r3
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	b29b      	uxth	r3, r3
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8003eb6:	6839      	ldr	r1, [r7, #0]
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ffe3 	bl	8003e84 <compute_uart_bd>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <uart_set_baudrate+0x24>)
 8003ec4:	609a      	str	r2, [r3, #8]
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40004400 	.word	0x40004400

08003ed4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ed4:	480d      	ldr	r0, [pc, #52]	; (8003f0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ed6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ed8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003edc:	480c      	ldr	r0, [pc, #48]	; (8003f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ede:	490d      	ldr	r1, [pc, #52]	; (8003f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ee0:	4a0d      	ldr	r2, [pc, #52]	; (8003f18 <LoopForever+0xe>)
  movs r3, #0
 8003ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ee4:	e002      	b.n	8003eec <LoopCopyDataInit>

08003ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eea:	3304      	adds	r3, #4

08003eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ef0:	d3f9      	bcc.n	8003ee6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ef4:	4c0a      	ldr	r4, [pc, #40]	; (8003f20 <LoopForever+0x16>)
  movs r3, #0
 8003ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ef8:	e001      	b.n	8003efe <LoopFillZerobss>

08003efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003efc:	3204      	adds	r2, #4

08003efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f00:	d3fb      	bcc.n	8003efa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003f02:	f000 fb6b 	bl	80045dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f06:	f7fe fad7 	bl	80024b8 <main>

08003f0a <LoopForever>:

LoopForever:
  b LoopForever
 8003f0a:	e7fe      	b.n	8003f0a <LoopForever>
  ldr   r0, =_estack
 8003f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f14:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003f18:	08007e78 	.word	0x08007e78
  ldr r2, =_sbss
 8003f1c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003f20:	200005a8 	.word	0x200005a8

08003f24 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f24:	e7fe      	b.n	8003f24 <ADC_IRQHandler>
	...

08003f28 <sbrk_aligned>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	4e0e      	ldr	r6, [pc, #56]	; (8003f64 <sbrk_aligned+0x3c>)
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	6831      	ldr	r1, [r6, #0]
 8003f30:	4605      	mov	r5, r0
 8003f32:	b911      	cbnz	r1, 8003f3a <sbrk_aligned+0x12>
 8003f34:	f000 fb2a 	bl	800458c <_sbrk_r>
 8003f38:	6030      	str	r0, [r6, #0]
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	f000 fb25 	bl	800458c <_sbrk_r>
 8003f42:	1c43      	adds	r3, r0, #1
 8003f44:	d00a      	beq.n	8003f5c <sbrk_aligned+0x34>
 8003f46:	1cc4      	adds	r4, r0, #3
 8003f48:	f024 0403 	bic.w	r4, r4, #3
 8003f4c:	42a0      	cmp	r0, r4
 8003f4e:	d007      	beq.n	8003f60 <sbrk_aligned+0x38>
 8003f50:	1a21      	subs	r1, r4, r0
 8003f52:	4628      	mov	r0, r5
 8003f54:	f000 fb1a 	bl	800458c <_sbrk_r>
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d101      	bne.n	8003f60 <sbrk_aligned+0x38>
 8003f5c:	f04f 34ff 	mov.w	r4, #4294967295
 8003f60:	4620      	mov	r0, r4
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	20000460 	.word	0x20000460

08003f68 <_malloc_r>:
 8003f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f6c:	1ccd      	adds	r5, r1, #3
 8003f6e:	f025 0503 	bic.w	r5, r5, #3
 8003f72:	3508      	adds	r5, #8
 8003f74:	2d0c      	cmp	r5, #12
 8003f76:	bf38      	it	cc
 8003f78:	250c      	movcc	r5, #12
 8003f7a:	2d00      	cmp	r5, #0
 8003f7c:	4607      	mov	r7, r0
 8003f7e:	db01      	blt.n	8003f84 <_malloc_r+0x1c>
 8003f80:	42a9      	cmp	r1, r5
 8003f82:	d905      	bls.n	8003f90 <_malloc_r+0x28>
 8003f84:	230c      	movs	r3, #12
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	2600      	movs	r6, #0
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004064 <_malloc_r+0xfc>
 8003f94:	f000 f868 	bl	8004068 <__malloc_lock>
 8003f98:	f8d8 3000 	ldr.w	r3, [r8]
 8003f9c:	461c      	mov	r4, r3
 8003f9e:	bb5c      	cbnz	r4, 8003ff8 <_malloc_r+0x90>
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	f7ff ffc0 	bl	8003f28 <sbrk_aligned>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	4604      	mov	r4, r0
 8003fac:	d155      	bne.n	800405a <_malloc_r+0xf2>
 8003fae:	f8d8 4000 	ldr.w	r4, [r8]
 8003fb2:	4626      	mov	r6, r4
 8003fb4:	2e00      	cmp	r6, #0
 8003fb6:	d145      	bne.n	8004044 <_malloc_r+0xdc>
 8003fb8:	2c00      	cmp	r4, #0
 8003fba:	d048      	beq.n	800404e <_malloc_r+0xe6>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	4638      	mov	r0, r7
 8003fc2:	eb04 0903 	add.w	r9, r4, r3
 8003fc6:	f000 fae1 	bl	800458c <_sbrk_r>
 8003fca:	4581      	cmp	r9, r0
 8003fcc:	d13f      	bne.n	800404e <_malloc_r+0xe6>
 8003fce:	6821      	ldr	r1, [r4, #0]
 8003fd0:	1a6d      	subs	r5, r5, r1
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	f7ff ffa7 	bl	8003f28 <sbrk_aligned>
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d037      	beq.n	800404e <_malloc_r+0xe6>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	442b      	add	r3, r5
 8003fe2:	6023      	str	r3, [r4, #0]
 8003fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d038      	beq.n	800405e <_malloc_r+0xf6>
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	42a2      	cmp	r2, r4
 8003ff0:	d12b      	bne.n	800404a <_malloc_r+0xe2>
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	e00f      	b.n	8004018 <_malloc_r+0xb0>
 8003ff8:	6822      	ldr	r2, [r4, #0]
 8003ffa:	1b52      	subs	r2, r2, r5
 8003ffc:	d41f      	bmi.n	800403e <_malloc_r+0xd6>
 8003ffe:	2a0b      	cmp	r2, #11
 8004000:	d917      	bls.n	8004032 <_malloc_r+0xca>
 8004002:	1961      	adds	r1, r4, r5
 8004004:	42a3      	cmp	r3, r4
 8004006:	6025      	str	r5, [r4, #0]
 8004008:	bf18      	it	ne
 800400a:	6059      	strne	r1, [r3, #4]
 800400c:	6863      	ldr	r3, [r4, #4]
 800400e:	bf08      	it	eq
 8004010:	f8c8 1000 	streq.w	r1, [r8]
 8004014:	5162      	str	r2, [r4, r5]
 8004016:	604b      	str	r3, [r1, #4]
 8004018:	4638      	mov	r0, r7
 800401a:	f104 060b 	add.w	r6, r4, #11
 800401e:	f000 f829 	bl	8004074 <__malloc_unlock>
 8004022:	f026 0607 	bic.w	r6, r6, #7
 8004026:	1d23      	adds	r3, r4, #4
 8004028:	1af2      	subs	r2, r6, r3
 800402a:	d0ae      	beq.n	8003f8a <_malloc_r+0x22>
 800402c:	1b9b      	subs	r3, r3, r6
 800402e:	50a3      	str	r3, [r4, r2]
 8004030:	e7ab      	b.n	8003f8a <_malloc_r+0x22>
 8004032:	42a3      	cmp	r3, r4
 8004034:	6862      	ldr	r2, [r4, #4]
 8004036:	d1dd      	bne.n	8003ff4 <_malloc_r+0x8c>
 8004038:	f8c8 2000 	str.w	r2, [r8]
 800403c:	e7ec      	b.n	8004018 <_malloc_r+0xb0>
 800403e:	4623      	mov	r3, r4
 8004040:	6864      	ldr	r4, [r4, #4]
 8004042:	e7ac      	b.n	8003f9e <_malloc_r+0x36>
 8004044:	4634      	mov	r4, r6
 8004046:	6876      	ldr	r6, [r6, #4]
 8004048:	e7b4      	b.n	8003fb4 <_malloc_r+0x4c>
 800404a:	4613      	mov	r3, r2
 800404c:	e7cc      	b.n	8003fe8 <_malloc_r+0x80>
 800404e:	230c      	movs	r3, #12
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	4638      	mov	r0, r7
 8004054:	f000 f80e 	bl	8004074 <__malloc_unlock>
 8004058:	e797      	b.n	8003f8a <_malloc_r+0x22>
 800405a:	6025      	str	r5, [r4, #0]
 800405c:	e7dc      	b.n	8004018 <_malloc_r+0xb0>
 800405e:	605b      	str	r3, [r3, #4]
 8004060:	deff      	udf	#255	; 0xff
 8004062:	bf00      	nop
 8004064:	2000045c 	.word	0x2000045c

08004068 <__malloc_lock>:
 8004068:	4801      	ldr	r0, [pc, #4]	; (8004070 <__malloc_lock+0x8>)
 800406a:	f000 badb 	b.w	8004624 <__retarget_lock_acquire_recursive>
 800406e:	bf00      	nop
 8004070:	200005a4 	.word	0x200005a4

08004074 <__malloc_unlock>:
 8004074:	4801      	ldr	r0, [pc, #4]	; (800407c <__malloc_unlock+0x8>)
 8004076:	f000 bad6 	b.w	8004626 <__retarget_lock_release_recursive>
 800407a:	bf00      	nop
 800407c:	200005a4 	.word	0x200005a4

08004080 <std>:
 8004080:	2300      	movs	r3, #0
 8004082:	b510      	push	{r4, lr}
 8004084:	4604      	mov	r4, r0
 8004086:	e9c0 3300 	strd	r3, r3, [r0]
 800408a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800408e:	6083      	str	r3, [r0, #8]
 8004090:	8181      	strh	r1, [r0, #12]
 8004092:	6643      	str	r3, [r0, #100]	; 0x64
 8004094:	81c2      	strh	r2, [r0, #14]
 8004096:	6183      	str	r3, [r0, #24]
 8004098:	4619      	mov	r1, r3
 800409a:	2208      	movs	r2, #8
 800409c:	305c      	adds	r0, #92	; 0x5c
 800409e:	f000 fa39 	bl	8004514 <memset>
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <std+0x38>)
 80040a4:	6263      	str	r3, [r4, #36]	; 0x24
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <std+0x3c>)
 80040a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <std+0x40>)
 80040ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <std+0x44>)
 80040b0:	6224      	str	r4, [r4, #32]
 80040b2:	6323      	str	r3, [r4, #48]	; 0x30
 80040b4:	bd10      	pop	{r4, pc}
 80040b6:	bf00      	nop
 80040b8:	08004365 	.word	0x08004365
 80040bc:	08004387 	.word	0x08004387
 80040c0:	080043bf 	.word	0x080043bf
 80040c4:	080043e3 	.word	0x080043e3

080040c8 <stdio_exit_handler>:
 80040c8:	4a02      	ldr	r2, [pc, #8]	; (80040d4 <stdio_exit_handler+0xc>)
 80040ca:	4903      	ldr	r1, [pc, #12]	; (80040d8 <stdio_exit_handler+0x10>)
 80040cc:	4803      	ldr	r0, [pc, #12]	; (80040dc <stdio_exit_handler+0x14>)
 80040ce:	f000 b869 	b.w	80041a4 <_fwalk_sglue>
 80040d2:	bf00      	nop
 80040d4:	20000014 	.word	0x20000014
 80040d8:	08005041 	.word	0x08005041
 80040dc:	20000020 	.word	0x20000020

080040e0 <cleanup_stdio>:
 80040e0:	6841      	ldr	r1, [r0, #4]
 80040e2:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <cleanup_stdio+0x34>)
 80040e4:	4299      	cmp	r1, r3
 80040e6:	b510      	push	{r4, lr}
 80040e8:	4604      	mov	r4, r0
 80040ea:	d001      	beq.n	80040f0 <cleanup_stdio+0x10>
 80040ec:	f000 ffa8 	bl	8005040 <_fflush_r>
 80040f0:	68a1      	ldr	r1, [r4, #8]
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <cleanup_stdio+0x38>)
 80040f4:	4299      	cmp	r1, r3
 80040f6:	d002      	beq.n	80040fe <cleanup_stdio+0x1e>
 80040f8:	4620      	mov	r0, r4
 80040fa:	f000 ffa1 	bl	8005040 <_fflush_r>
 80040fe:	68e1      	ldr	r1, [r4, #12]
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <cleanup_stdio+0x3c>)
 8004102:	4299      	cmp	r1, r3
 8004104:	d004      	beq.n	8004110 <cleanup_stdio+0x30>
 8004106:	4620      	mov	r0, r4
 8004108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800410c:	f000 bf98 	b.w	8005040 <_fflush_r>
 8004110:	bd10      	pop	{r4, pc}
 8004112:	bf00      	nop
 8004114:	20000464 	.word	0x20000464
 8004118:	200004cc 	.word	0x200004cc
 800411c:	20000534 	.word	0x20000534

08004120 <global_stdio_init.part.0>:
 8004120:	b510      	push	{r4, lr}
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <global_stdio_init.part.0+0x30>)
 8004124:	4c0b      	ldr	r4, [pc, #44]	; (8004154 <global_stdio_init.part.0+0x34>)
 8004126:	4a0c      	ldr	r2, [pc, #48]	; (8004158 <global_stdio_init.part.0+0x38>)
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	4620      	mov	r0, r4
 800412c:	2200      	movs	r2, #0
 800412e:	2104      	movs	r1, #4
 8004130:	f7ff ffa6 	bl	8004080 <std>
 8004134:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004138:	2201      	movs	r2, #1
 800413a:	2109      	movs	r1, #9
 800413c:	f7ff ffa0 	bl	8004080 <std>
 8004140:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004144:	2202      	movs	r2, #2
 8004146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800414a:	2112      	movs	r1, #18
 800414c:	f7ff bf98 	b.w	8004080 <std>
 8004150:	2000059c 	.word	0x2000059c
 8004154:	20000464 	.word	0x20000464
 8004158:	080040c9 	.word	0x080040c9

0800415c <__sfp_lock_acquire>:
 800415c:	4801      	ldr	r0, [pc, #4]	; (8004164 <__sfp_lock_acquire+0x8>)
 800415e:	f000 ba61 	b.w	8004624 <__retarget_lock_acquire_recursive>
 8004162:	bf00      	nop
 8004164:	200005a5 	.word	0x200005a5

08004168 <__sfp_lock_release>:
 8004168:	4801      	ldr	r0, [pc, #4]	; (8004170 <__sfp_lock_release+0x8>)
 800416a:	f000 ba5c 	b.w	8004626 <__retarget_lock_release_recursive>
 800416e:	bf00      	nop
 8004170:	200005a5 	.word	0x200005a5

08004174 <__sinit>:
 8004174:	b510      	push	{r4, lr}
 8004176:	4604      	mov	r4, r0
 8004178:	f7ff fff0 	bl	800415c <__sfp_lock_acquire>
 800417c:	6a23      	ldr	r3, [r4, #32]
 800417e:	b11b      	cbz	r3, 8004188 <__sinit+0x14>
 8004180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004184:	f7ff bff0 	b.w	8004168 <__sfp_lock_release>
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <__sinit+0x28>)
 800418a:	6223      	str	r3, [r4, #32]
 800418c:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <__sinit+0x2c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f5      	bne.n	8004180 <__sinit+0xc>
 8004194:	f7ff ffc4 	bl	8004120 <global_stdio_init.part.0>
 8004198:	e7f2      	b.n	8004180 <__sinit+0xc>
 800419a:	bf00      	nop
 800419c:	080040e1 	.word	0x080040e1
 80041a0:	2000059c 	.word	0x2000059c

080041a4 <_fwalk_sglue>:
 80041a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a8:	4607      	mov	r7, r0
 80041aa:	4688      	mov	r8, r1
 80041ac:	4614      	mov	r4, r2
 80041ae:	2600      	movs	r6, #0
 80041b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041b4:	f1b9 0901 	subs.w	r9, r9, #1
 80041b8:	d505      	bpl.n	80041c6 <_fwalk_sglue+0x22>
 80041ba:	6824      	ldr	r4, [r4, #0]
 80041bc:	2c00      	cmp	r4, #0
 80041be:	d1f7      	bne.n	80041b0 <_fwalk_sglue+0xc>
 80041c0:	4630      	mov	r0, r6
 80041c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041c6:	89ab      	ldrh	r3, [r5, #12]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d907      	bls.n	80041dc <_fwalk_sglue+0x38>
 80041cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041d0:	3301      	adds	r3, #1
 80041d2:	d003      	beq.n	80041dc <_fwalk_sglue+0x38>
 80041d4:	4629      	mov	r1, r5
 80041d6:	4638      	mov	r0, r7
 80041d8:	47c0      	blx	r8
 80041da:	4306      	orrs	r6, r0
 80041dc:	3568      	adds	r5, #104	; 0x68
 80041de:	e7e9      	b.n	80041b4 <_fwalk_sglue+0x10>

080041e0 <iprintf>:
 80041e0:	b40f      	push	{r0, r1, r2, r3}
 80041e2:	b507      	push	{r0, r1, r2, lr}
 80041e4:	4906      	ldr	r1, [pc, #24]	; (8004200 <iprintf+0x20>)
 80041e6:	ab04      	add	r3, sp, #16
 80041e8:	6808      	ldr	r0, [r1, #0]
 80041ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ee:	6881      	ldr	r1, [r0, #8]
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	f000 fbf5 	bl	80049e0 <_vfiprintf_r>
 80041f6:	b003      	add	sp, #12
 80041f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041fc:	b004      	add	sp, #16
 80041fe:	4770      	bx	lr
 8004200:	2000006c 	.word	0x2000006c

08004204 <_puts_r>:
 8004204:	6a03      	ldr	r3, [r0, #32]
 8004206:	b570      	push	{r4, r5, r6, lr}
 8004208:	6884      	ldr	r4, [r0, #8]
 800420a:	4605      	mov	r5, r0
 800420c:	460e      	mov	r6, r1
 800420e:	b90b      	cbnz	r3, 8004214 <_puts_r+0x10>
 8004210:	f7ff ffb0 	bl	8004174 <__sinit>
 8004214:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004216:	07db      	lsls	r3, r3, #31
 8004218:	d405      	bmi.n	8004226 <_puts_r+0x22>
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	0598      	lsls	r0, r3, #22
 800421e:	d402      	bmi.n	8004226 <_puts_r+0x22>
 8004220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004222:	f000 f9ff 	bl	8004624 <__retarget_lock_acquire_recursive>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	0719      	lsls	r1, r3, #28
 800422a:	d513      	bpl.n	8004254 <_puts_r+0x50>
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	b18b      	cbz	r3, 8004254 <_puts_r+0x50>
 8004230:	3e01      	subs	r6, #1
 8004232:	68a3      	ldr	r3, [r4, #8]
 8004234:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004238:	3b01      	subs	r3, #1
 800423a:	60a3      	str	r3, [r4, #8]
 800423c:	b9e9      	cbnz	r1, 800427a <_puts_r+0x76>
 800423e:	2b00      	cmp	r3, #0
 8004240:	da2e      	bge.n	80042a0 <_puts_r+0x9c>
 8004242:	4622      	mov	r2, r4
 8004244:	210a      	movs	r1, #10
 8004246:	4628      	mov	r0, r5
 8004248:	f000 f8cf 	bl	80043ea <__swbuf_r>
 800424c:	3001      	adds	r0, #1
 800424e:	d007      	beq.n	8004260 <_puts_r+0x5c>
 8004250:	250a      	movs	r5, #10
 8004252:	e007      	b.n	8004264 <_puts_r+0x60>
 8004254:	4621      	mov	r1, r4
 8004256:	4628      	mov	r0, r5
 8004258:	f000 f904 	bl	8004464 <__swsetup_r>
 800425c:	2800      	cmp	r0, #0
 800425e:	d0e7      	beq.n	8004230 <_puts_r+0x2c>
 8004260:	f04f 35ff 	mov.w	r5, #4294967295
 8004264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004266:	07da      	lsls	r2, r3, #31
 8004268:	d405      	bmi.n	8004276 <_puts_r+0x72>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	059b      	lsls	r3, r3, #22
 800426e:	d402      	bmi.n	8004276 <_puts_r+0x72>
 8004270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004272:	f000 f9d8 	bl	8004626 <__retarget_lock_release_recursive>
 8004276:	4628      	mov	r0, r5
 8004278:	bd70      	pop	{r4, r5, r6, pc}
 800427a:	2b00      	cmp	r3, #0
 800427c:	da04      	bge.n	8004288 <_puts_r+0x84>
 800427e:	69a2      	ldr	r2, [r4, #24]
 8004280:	429a      	cmp	r2, r3
 8004282:	dc06      	bgt.n	8004292 <_puts_r+0x8e>
 8004284:	290a      	cmp	r1, #10
 8004286:	d004      	beq.n	8004292 <_puts_r+0x8e>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	6022      	str	r2, [r4, #0]
 800428e:	7019      	strb	r1, [r3, #0]
 8004290:	e7cf      	b.n	8004232 <_puts_r+0x2e>
 8004292:	4622      	mov	r2, r4
 8004294:	4628      	mov	r0, r5
 8004296:	f000 f8a8 	bl	80043ea <__swbuf_r>
 800429a:	3001      	adds	r0, #1
 800429c:	d1c9      	bne.n	8004232 <_puts_r+0x2e>
 800429e:	e7df      	b.n	8004260 <_puts_r+0x5c>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	250a      	movs	r5, #10
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	6022      	str	r2, [r4, #0]
 80042a8:	701d      	strb	r5, [r3, #0]
 80042aa:	e7db      	b.n	8004264 <_puts_r+0x60>

080042ac <puts>:
 80042ac:	4b02      	ldr	r3, [pc, #8]	; (80042b8 <puts+0xc>)
 80042ae:	4601      	mov	r1, r0
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	f7ff bfa7 	b.w	8004204 <_puts_r>
 80042b6:	bf00      	nop
 80042b8:	2000006c 	.word	0x2000006c

080042bc <sniprintf>:
 80042bc:	b40c      	push	{r2, r3}
 80042be:	b530      	push	{r4, r5, lr}
 80042c0:	4b17      	ldr	r3, [pc, #92]	; (8004320 <sniprintf+0x64>)
 80042c2:	1e0c      	subs	r4, r1, #0
 80042c4:	681d      	ldr	r5, [r3, #0]
 80042c6:	b09d      	sub	sp, #116	; 0x74
 80042c8:	da08      	bge.n	80042dc <sniprintf+0x20>
 80042ca:	238b      	movs	r3, #139	; 0x8b
 80042cc:	602b      	str	r3, [r5, #0]
 80042ce:	f04f 30ff 	mov.w	r0, #4294967295
 80042d2:	b01d      	add	sp, #116	; 0x74
 80042d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042d8:	b002      	add	sp, #8
 80042da:	4770      	bx	lr
 80042dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80042e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80042e4:	bf14      	ite	ne
 80042e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80042ea:	4623      	moveq	r3, r4
 80042ec:	9304      	str	r3, [sp, #16]
 80042ee:	9307      	str	r3, [sp, #28]
 80042f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042f4:	9002      	str	r0, [sp, #8]
 80042f6:	9006      	str	r0, [sp, #24]
 80042f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80042fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042fe:	ab21      	add	r3, sp, #132	; 0x84
 8004300:	a902      	add	r1, sp, #8
 8004302:	4628      	mov	r0, r5
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	f000 fa43 	bl	8004790 <_svfiprintf_r>
 800430a:	1c43      	adds	r3, r0, #1
 800430c:	bfbc      	itt	lt
 800430e:	238b      	movlt	r3, #139	; 0x8b
 8004310:	602b      	strlt	r3, [r5, #0]
 8004312:	2c00      	cmp	r4, #0
 8004314:	d0dd      	beq.n	80042d2 <sniprintf+0x16>
 8004316:	9b02      	ldr	r3, [sp, #8]
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e7d9      	b.n	80042d2 <sniprintf+0x16>
 800431e:	bf00      	nop
 8004320:	2000006c 	.word	0x2000006c

08004324 <siprintf>:
 8004324:	b40e      	push	{r1, r2, r3}
 8004326:	b500      	push	{lr}
 8004328:	b09c      	sub	sp, #112	; 0x70
 800432a:	ab1d      	add	r3, sp, #116	; 0x74
 800432c:	9002      	str	r0, [sp, #8]
 800432e:	9006      	str	r0, [sp, #24]
 8004330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004334:	4809      	ldr	r0, [pc, #36]	; (800435c <siprintf+0x38>)
 8004336:	9107      	str	r1, [sp, #28]
 8004338:	9104      	str	r1, [sp, #16]
 800433a:	4909      	ldr	r1, [pc, #36]	; (8004360 <siprintf+0x3c>)
 800433c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004340:	9105      	str	r1, [sp, #20]
 8004342:	6800      	ldr	r0, [r0, #0]
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	a902      	add	r1, sp, #8
 8004348:	f000 fa22 	bl	8004790 <_svfiprintf_r>
 800434c:	9b02      	ldr	r3, [sp, #8]
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	b01c      	add	sp, #112	; 0x70
 8004354:	f85d eb04 	ldr.w	lr, [sp], #4
 8004358:	b003      	add	sp, #12
 800435a:	4770      	bx	lr
 800435c:	2000006c 	.word	0x2000006c
 8004360:	ffff0208 	.word	0xffff0208

08004364 <__sread>:
 8004364:	b510      	push	{r4, lr}
 8004366:	460c      	mov	r4, r1
 8004368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800436c:	f000 f8fc 	bl	8004568 <_read_r>
 8004370:	2800      	cmp	r0, #0
 8004372:	bfab      	itete	ge
 8004374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004376:	89a3      	ldrhlt	r3, [r4, #12]
 8004378:	181b      	addge	r3, r3, r0
 800437a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800437e:	bfac      	ite	ge
 8004380:	6563      	strge	r3, [r4, #84]	; 0x54
 8004382:	81a3      	strhlt	r3, [r4, #12]
 8004384:	bd10      	pop	{r4, pc}

08004386 <__swrite>:
 8004386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800438a:	461f      	mov	r7, r3
 800438c:	898b      	ldrh	r3, [r1, #12]
 800438e:	05db      	lsls	r3, r3, #23
 8004390:	4605      	mov	r5, r0
 8004392:	460c      	mov	r4, r1
 8004394:	4616      	mov	r6, r2
 8004396:	d505      	bpl.n	80043a4 <__swrite+0x1e>
 8004398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800439c:	2302      	movs	r3, #2
 800439e:	2200      	movs	r2, #0
 80043a0:	f000 f8d0 	bl	8004544 <_lseek_r>
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043ae:	81a3      	strh	r3, [r4, #12]
 80043b0:	4632      	mov	r2, r6
 80043b2:	463b      	mov	r3, r7
 80043b4:	4628      	mov	r0, r5
 80043b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ba:	f000 b8f7 	b.w	80045ac <_write_r>

080043be <__sseek>:
 80043be:	b510      	push	{r4, lr}
 80043c0:	460c      	mov	r4, r1
 80043c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c6:	f000 f8bd 	bl	8004544 <_lseek_r>
 80043ca:	1c43      	adds	r3, r0, #1
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	bf15      	itete	ne
 80043d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80043d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043da:	81a3      	strheq	r3, [r4, #12]
 80043dc:	bf18      	it	ne
 80043de:	81a3      	strhne	r3, [r4, #12]
 80043e0:	bd10      	pop	{r4, pc}

080043e2 <__sclose>:
 80043e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e6:	f000 b89d 	b.w	8004524 <_close_r>

080043ea <__swbuf_r>:
 80043ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ec:	460e      	mov	r6, r1
 80043ee:	4614      	mov	r4, r2
 80043f0:	4605      	mov	r5, r0
 80043f2:	b118      	cbz	r0, 80043fc <__swbuf_r+0x12>
 80043f4:	6a03      	ldr	r3, [r0, #32]
 80043f6:	b90b      	cbnz	r3, 80043fc <__swbuf_r+0x12>
 80043f8:	f7ff febc 	bl	8004174 <__sinit>
 80043fc:	69a3      	ldr	r3, [r4, #24]
 80043fe:	60a3      	str	r3, [r4, #8]
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	071a      	lsls	r2, r3, #28
 8004404:	d525      	bpl.n	8004452 <__swbuf_r+0x68>
 8004406:	6923      	ldr	r3, [r4, #16]
 8004408:	b31b      	cbz	r3, 8004452 <__swbuf_r+0x68>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	6922      	ldr	r2, [r4, #16]
 800440e:	1a98      	subs	r0, r3, r2
 8004410:	6963      	ldr	r3, [r4, #20]
 8004412:	b2f6      	uxtb	r6, r6
 8004414:	4283      	cmp	r3, r0
 8004416:	4637      	mov	r7, r6
 8004418:	dc04      	bgt.n	8004424 <__swbuf_r+0x3a>
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 fe0f 	bl	8005040 <_fflush_r>
 8004422:	b9e0      	cbnz	r0, 800445e <__swbuf_r+0x74>
 8004424:	68a3      	ldr	r3, [r4, #8]
 8004426:	3b01      	subs	r3, #1
 8004428:	60a3      	str	r3, [r4, #8]
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	6022      	str	r2, [r4, #0]
 8004430:	701e      	strb	r6, [r3, #0]
 8004432:	6962      	ldr	r2, [r4, #20]
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	429a      	cmp	r2, r3
 8004438:	d004      	beq.n	8004444 <__swbuf_r+0x5a>
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	07db      	lsls	r3, r3, #31
 800443e:	d506      	bpl.n	800444e <__swbuf_r+0x64>
 8004440:	2e0a      	cmp	r6, #10
 8004442:	d104      	bne.n	800444e <__swbuf_r+0x64>
 8004444:	4621      	mov	r1, r4
 8004446:	4628      	mov	r0, r5
 8004448:	f000 fdfa 	bl	8005040 <_fflush_r>
 800444c:	b938      	cbnz	r0, 800445e <__swbuf_r+0x74>
 800444e:	4638      	mov	r0, r7
 8004450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004452:	4621      	mov	r1, r4
 8004454:	4628      	mov	r0, r5
 8004456:	f000 f805 	bl	8004464 <__swsetup_r>
 800445a:	2800      	cmp	r0, #0
 800445c:	d0d5      	beq.n	800440a <__swbuf_r+0x20>
 800445e:	f04f 37ff 	mov.w	r7, #4294967295
 8004462:	e7f4      	b.n	800444e <__swbuf_r+0x64>

08004464 <__swsetup_r>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <__swsetup_r+0xac>)
 8004468:	4605      	mov	r5, r0
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	460c      	mov	r4, r1
 800446e:	b118      	cbz	r0, 8004478 <__swsetup_r+0x14>
 8004470:	6a03      	ldr	r3, [r0, #32]
 8004472:	b90b      	cbnz	r3, 8004478 <__swsetup_r+0x14>
 8004474:	f7ff fe7e 	bl	8004174 <__sinit>
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800447e:	0718      	lsls	r0, r3, #28
 8004480:	d422      	bmi.n	80044c8 <__swsetup_r+0x64>
 8004482:	06d9      	lsls	r1, r3, #27
 8004484:	d407      	bmi.n	8004496 <__swsetup_r+0x32>
 8004486:	2309      	movs	r3, #9
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800448e:	81a3      	strh	r3, [r4, #12]
 8004490:	f04f 30ff 	mov.w	r0, #4294967295
 8004494:	e034      	b.n	8004500 <__swsetup_r+0x9c>
 8004496:	0758      	lsls	r0, r3, #29
 8004498:	d512      	bpl.n	80044c0 <__swsetup_r+0x5c>
 800449a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800449c:	b141      	cbz	r1, 80044b0 <__swsetup_r+0x4c>
 800449e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044a2:	4299      	cmp	r1, r3
 80044a4:	d002      	beq.n	80044ac <__swsetup_r+0x48>
 80044a6:	4628      	mov	r0, r5
 80044a8:	f000 f8cc 	bl	8004644 <_free_r>
 80044ac:	2300      	movs	r3, #0
 80044ae:	6363      	str	r3, [r4, #52]	; 0x34
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044b6:	81a3      	strh	r3, [r4, #12]
 80044b8:	2300      	movs	r3, #0
 80044ba:	6063      	str	r3, [r4, #4]
 80044bc:	6923      	ldr	r3, [r4, #16]
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	f043 0308 	orr.w	r3, r3, #8
 80044c6:	81a3      	strh	r3, [r4, #12]
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	b94b      	cbnz	r3, 80044e0 <__swsetup_r+0x7c>
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d6:	d003      	beq.n	80044e0 <__swsetup_r+0x7c>
 80044d8:	4621      	mov	r1, r4
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 fdfe 	bl	80050dc <__smakebuf_r>
 80044e0:	89a0      	ldrh	r0, [r4, #12]
 80044e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044e6:	f010 0301 	ands.w	r3, r0, #1
 80044ea:	d00a      	beq.n	8004502 <__swsetup_r+0x9e>
 80044ec:	2300      	movs	r3, #0
 80044ee:	60a3      	str	r3, [r4, #8]
 80044f0:	6963      	ldr	r3, [r4, #20]
 80044f2:	425b      	negs	r3, r3
 80044f4:	61a3      	str	r3, [r4, #24]
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	b943      	cbnz	r3, 800450c <__swsetup_r+0xa8>
 80044fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80044fe:	d1c4      	bne.n	800448a <__swsetup_r+0x26>
 8004500:	bd38      	pop	{r3, r4, r5, pc}
 8004502:	0781      	lsls	r1, r0, #30
 8004504:	bf58      	it	pl
 8004506:	6963      	ldrpl	r3, [r4, #20]
 8004508:	60a3      	str	r3, [r4, #8]
 800450a:	e7f4      	b.n	80044f6 <__swsetup_r+0x92>
 800450c:	2000      	movs	r0, #0
 800450e:	e7f7      	b.n	8004500 <__swsetup_r+0x9c>
 8004510:	2000006c 	.word	0x2000006c

08004514 <memset>:
 8004514:	4402      	add	r2, r0
 8004516:	4603      	mov	r3, r0
 8004518:	4293      	cmp	r3, r2
 800451a:	d100      	bne.n	800451e <memset+0xa>
 800451c:	4770      	bx	lr
 800451e:	f803 1b01 	strb.w	r1, [r3], #1
 8004522:	e7f9      	b.n	8004518 <memset+0x4>

08004524 <_close_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4d06      	ldr	r5, [pc, #24]	; (8004540 <_close_r+0x1c>)
 8004528:	2300      	movs	r3, #0
 800452a:	4604      	mov	r4, r0
 800452c:	4608      	mov	r0, r1
 800452e:	602b      	str	r3, [r5, #0]
 8004530:	f7ff fb63 	bl	8003bfa <_close>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d102      	bne.n	800453e <_close_r+0x1a>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	b103      	cbz	r3, 800453e <_close_r+0x1a>
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	200005a0 	.word	0x200005a0

08004544 <_lseek_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	4d07      	ldr	r5, [pc, #28]	; (8004564 <_lseek_r+0x20>)
 8004548:	4604      	mov	r4, r0
 800454a:	4608      	mov	r0, r1
 800454c:	4611      	mov	r1, r2
 800454e:	2200      	movs	r2, #0
 8004550:	602a      	str	r2, [r5, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	f7ff fb78 	bl	8003c48 <_lseek>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d102      	bne.n	8004562 <_lseek_r+0x1e>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	b103      	cbz	r3, 8004562 <_lseek_r+0x1e>
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	200005a0 	.word	0x200005a0

08004568 <_read_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4d07      	ldr	r5, [pc, #28]	; (8004588 <_read_r+0x20>)
 800456c:	4604      	mov	r4, r0
 800456e:	4608      	mov	r0, r1
 8004570:	4611      	mov	r1, r2
 8004572:	2200      	movs	r2, #0
 8004574:	602a      	str	r2, [r5, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	f7ff fb06 	bl	8003b88 <_read>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_read_r+0x1e>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_read_r+0x1e>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	200005a0 	.word	0x200005a0

0800458c <_sbrk_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4d06      	ldr	r5, [pc, #24]	; (80045a8 <_sbrk_r+0x1c>)
 8004590:	2300      	movs	r3, #0
 8004592:	4604      	mov	r4, r0
 8004594:	4608      	mov	r0, r1
 8004596:	602b      	str	r3, [r5, #0]
 8004598:	f7ff fb64 	bl	8003c64 <_sbrk>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_sbrk_r+0x1a>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_sbrk_r+0x1a>
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	200005a0 	.word	0x200005a0

080045ac <_write_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4d07      	ldr	r5, [pc, #28]	; (80045cc <_write_r+0x20>)
 80045b0:	4604      	mov	r4, r0
 80045b2:	4608      	mov	r0, r1
 80045b4:	4611      	mov	r1, r2
 80045b6:	2200      	movs	r2, #0
 80045b8:	602a      	str	r2, [r5, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f7ff fb01 	bl	8003bc2 <_write>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d102      	bne.n	80045ca <_write_r+0x1e>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	b103      	cbz	r3, 80045ca <_write_r+0x1e>
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	200005a0 	.word	0x200005a0

080045d0 <__errno>:
 80045d0:	4b01      	ldr	r3, [pc, #4]	; (80045d8 <__errno+0x8>)
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	2000006c 	.word	0x2000006c

080045dc <__libc_init_array>:
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	4d0d      	ldr	r5, [pc, #52]	; (8004614 <__libc_init_array+0x38>)
 80045e0:	4c0d      	ldr	r4, [pc, #52]	; (8004618 <__libc_init_array+0x3c>)
 80045e2:	1b64      	subs	r4, r4, r5
 80045e4:	10a4      	asrs	r4, r4, #2
 80045e6:	2600      	movs	r6, #0
 80045e8:	42a6      	cmp	r6, r4
 80045ea:	d109      	bne.n	8004600 <__libc_init_array+0x24>
 80045ec:	4d0b      	ldr	r5, [pc, #44]	; (800461c <__libc_init_array+0x40>)
 80045ee:	4c0c      	ldr	r4, [pc, #48]	; (8004620 <__libc_init_array+0x44>)
 80045f0:	f000 ff2a 	bl	8005448 <_init>
 80045f4:	1b64      	subs	r4, r4, r5
 80045f6:	10a4      	asrs	r4, r4, #2
 80045f8:	2600      	movs	r6, #0
 80045fa:	42a6      	cmp	r6, r4
 80045fc:	d105      	bne.n	800460a <__libc_init_array+0x2e>
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	f855 3b04 	ldr.w	r3, [r5], #4
 8004604:	4798      	blx	r3
 8004606:	3601      	adds	r6, #1
 8004608:	e7ee      	b.n	80045e8 <__libc_init_array+0xc>
 800460a:	f855 3b04 	ldr.w	r3, [r5], #4
 800460e:	4798      	blx	r3
 8004610:	3601      	adds	r6, #1
 8004612:	e7f2      	b.n	80045fa <__libc_init_array+0x1e>
 8004614:	08007e70 	.word	0x08007e70
 8004618:	08007e70 	.word	0x08007e70
 800461c:	08007e70 	.word	0x08007e70
 8004620:	08007e74 	.word	0x08007e74

08004624 <__retarget_lock_acquire_recursive>:
 8004624:	4770      	bx	lr

08004626 <__retarget_lock_release_recursive>:
 8004626:	4770      	bx	lr

08004628 <memcpy>:
 8004628:	440a      	add	r2, r1
 800462a:	4291      	cmp	r1, r2
 800462c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004630:	d100      	bne.n	8004634 <memcpy+0xc>
 8004632:	4770      	bx	lr
 8004634:	b510      	push	{r4, lr}
 8004636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800463a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800463e:	4291      	cmp	r1, r2
 8004640:	d1f9      	bne.n	8004636 <memcpy+0xe>
 8004642:	bd10      	pop	{r4, pc}

08004644 <_free_r>:
 8004644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004646:	2900      	cmp	r1, #0
 8004648:	d044      	beq.n	80046d4 <_free_r+0x90>
 800464a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800464e:	9001      	str	r0, [sp, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f1a1 0404 	sub.w	r4, r1, #4
 8004656:	bfb8      	it	lt
 8004658:	18e4      	addlt	r4, r4, r3
 800465a:	f7ff fd05 	bl	8004068 <__malloc_lock>
 800465e:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <_free_r+0x94>)
 8004660:	9801      	ldr	r0, [sp, #4]
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	b933      	cbnz	r3, 8004674 <_free_r+0x30>
 8004666:	6063      	str	r3, [r4, #4]
 8004668:	6014      	str	r4, [r2, #0]
 800466a:	b003      	add	sp, #12
 800466c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004670:	f7ff bd00 	b.w	8004074 <__malloc_unlock>
 8004674:	42a3      	cmp	r3, r4
 8004676:	d908      	bls.n	800468a <_free_r+0x46>
 8004678:	6825      	ldr	r5, [r4, #0]
 800467a:	1961      	adds	r1, r4, r5
 800467c:	428b      	cmp	r3, r1
 800467e:	bf01      	itttt	eq
 8004680:	6819      	ldreq	r1, [r3, #0]
 8004682:	685b      	ldreq	r3, [r3, #4]
 8004684:	1949      	addeq	r1, r1, r5
 8004686:	6021      	streq	r1, [r4, #0]
 8004688:	e7ed      	b.n	8004666 <_free_r+0x22>
 800468a:	461a      	mov	r2, r3
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	b10b      	cbz	r3, 8004694 <_free_r+0x50>
 8004690:	42a3      	cmp	r3, r4
 8004692:	d9fa      	bls.n	800468a <_free_r+0x46>
 8004694:	6811      	ldr	r1, [r2, #0]
 8004696:	1855      	adds	r5, r2, r1
 8004698:	42a5      	cmp	r5, r4
 800469a:	d10b      	bne.n	80046b4 <_free_r+0x70>
 800469c:	6824      	ldr	r4, [r4, #0]
 800469e:	4421      	add	r1, r4
 80046a0:	1854      	adds	r4, r2, r1
 80046a2:	42a3      	cmp	r3, r4
 80046a4:	6011      	str	r1, [r2, #0]
 80046a6:	d1e0      	bne.n	800466a <_free_r+0x26>
 80046a8:	681c      	ldr	r4, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	6053      	str	r3, [r2, #4]
 80046ae:	440c      	add	r4, r1
 80046b0:	6014      	str	r4, [r2, #0]
 80046b2:	e7da      	b.n	800466a <_free_r+0x26>
 80046b4:	d902      	bls.n	80046bc <_free_r+0x78>
 80046b6:	230c      	movs	r3, #12
 80046b8:	6003      	str	r3, [r0, #0]
 80046ba:	e7d6      	b.n	800466a <_free_r+0x26>
 80046bc:	6825      	ldr	r5, [r4, #0]
 80046be:	1961      	adds	r1, r4, r5
 80046c0:	428b      	cmp	r3, r1
 80046c2:	bf04      	itt	eq
 80046c4:	6819      	ldreq	r1, [r3, #0]
 80046c6:	685b      	ldreq	r3, [r3, #4]
 80046c8:	6063      	str	r3, [r4, #4]
 80046ca:	bf04      	itt	eq
 80046cc:	1949      	addeq	r1, r1, r5
 80046ce:	6021      	streq	r1, [r4, #0]
 80046d0:	6054      	str	r4, [r2, #4]
 80046d2:	e7ca      	b.n	800466a <_free_r+0x26>
 80046d4:	b003      	add	sp, #12
 80046d6:	bd30      	pop	{r4, r5, pc}
 80046d8:	2000045c 	.word	0x2000045c

080046dc <__ssputs_r>:
 80046dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e0:	688e      	ldr	r6, [r1, #8]
 80046e2:	461f      	mov	r7, r3
 80046e4:	42be      	cmp	r6, r7
 80046e6:	680b      	ldr	r3, [r1, #0]
 80046e8:	4682      	mov	sl, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	4690      	mov	r8, r2
 80046ee:	d82c      	bhi.n	800474a <__ssputs_r+0x6e>
 80046f0:	898a      	ldrh	r2, [r1, #12]
 80046f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046f6:	d026      	beq.n	8004746 <__ssputs_r+0x6a>
 80046f8:	6965      	ldr	r5, [r4, #20]
 80046fa:	6909      	ldr	r1, [r1, #16]
 80046fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004700:	eba3 0901 	sub.w	r9, r3, r1
 8004704:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004708:	1c7b      	adds	r3, r7, #1
 800470a:	444b      	add	r3, r9
 800470c:	106d      	asrs	r5, r5, #1
 800470e:	429d      	cmp	r5, r3
 8004710:	bf38      	it	cc
 8004712:	461d      	movcc	r5, r3
 8004714:	0553      	lsls	r3, r2, #21
 8004716:	d527      	bpl.n	8004768 <__ssputs_r+0x8c>
 8004718:	4629      	mov	r1, r5
 800471a:	f7ff fc25 	bl	8003f68 <_malloc_r>
 800471e:	4606      	mov	r6, r0
 8004720:	b360      	cbz	r0, 800477c <__ssputs_r+0xa0>
 8004722:	6921      	ldr	r1, [r4, #16]
 8004724:	464a      	mov	r2, r9
 8004726:	f7ff ff7f 	bl	8004628 <memcpy>
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004734:	81a3      	strh	r3, [r4, #12]
 8004736:	6126      	str	r6, [r4, #16]
 8004738:	6165      	str	r5, [r4, #20]
 800473a:	444e      	add	r6, r9
 800473c:	eba5 0509 	sub.w	r5, r5, r9
 8004740:	6026      	str	r6, [r4, #0]
 8004742:	60a5      	str	r5, [r4, #8]
 8004744:	463e      	mov	r6, r7
 8004746:	42be      	cmp	r6, r7
 8004748:	d900      	bls.n	800474c <__ssputs_r+0x70>
 800474a:	463e      	mov	r6, r7
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	4632      	mov	r2, r6
 8004750:	4641      	mov	r1, r8
 8004752:	f000 fcff 	bl	8005154 <memmove>
 8004756:	68a3      	ldr	r3, [r4, #8]
 8004758:	1b9b      	subs	r3, r3, r6
 800475a:	60a3      	str	r3, [r4, #8]
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	4433      	add	r3, r6
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	2000      	movs	r0, #0
 8004764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004768:	462a      	mov	r2, r5
 800476a:	f000 fd2f 	bl	80051cc <_realloc_r>
 800476e:	4606      	mov	r6, r0
 8004770:	2800      	cmp	r0, #0
 8004772:	d1e0      	bne.n	8004736 <__ssputs_r+0x5a>
 8004774:	6921      	ldr	r1, [r4, #16]
 8004776:	4650      	mov	r0, sl
 8004778:	f7ff ff64 	bl	8004644 <_free_r>
 800477c:	230c      	movs	r3, #12
 800477e:	f8ca 3000 	str.w	r3, [sl]
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004788:	81a3      	strh	r3, [r4, #12]
 800478a:	f04f 30ff 	mov.w	r0, #4294967295
 800478e:	e7e9      	b.n	8004764 <__ssputs_r+0x88>

08004790 <_svfiprintf_r>:
 8004790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004794:	4698      	mov	r8, r3
 8004796:	898b      	ldrh	r3, [r1, #12]
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	b09d      	sub	sp, #116	; 0x74
 800479c:	4607      	mov	r7, r0
 800479e:	460d      	mov	r5, r1
 80047a0:	4614      	mov	r4, r2
 80047a2:	d50e      	bpl.n	80047c2 <_svfiprintf_r+0x32>
 80047a4:	690b      	ldr	r3, [r1, #16]
 80047a6:	b963      	cbnz	r3, 80047c2 <_svfiprintf_r+0x32>
 80047a8:	2140      	movs	r1, #64	; 0x40
 80047aa:	f7ff fbdd 	bl	8003f68 <_malloc_r>
 80047ae:	6028      	str	r0, [r5, #0]
 80047b0:	6128      	str	r0, [r5, #16]
 80047b2:	b920      	cbnz	r0, 80047be <_svfiprintf_r+0x2e>
 80047b4:	230c      	movs	r3, #12
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	e0d0      	b.n	8004960 <_svfiprintf_r+0x1d0>
 80047be:	2340      	movs	r3, #64	; 0x40
 80047c0:	616b      	str	r3, [r5, #20]
 80047c2:	2300      	movs	r3, #0
 80047c4:	9309      	str	r3, [sp, #36]	; 0x24
 80047c6:	2320      	movs	r3, #32
 80047c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80047d0:	2330      	movs	r3, #48	; 0x30
 80047d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004978 <_svfiprintf_r+0x1e8>
 80047d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047da:	f04f 0901 	mov.w	r9, #1
 80047de:	4623      	mov	r3, r4
 80047e0:	469a      	mov	sl, r3
 80047e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047e6:	b10a      	cbz	r2, 80047ec <_svfiprintf_r+0x5c>
 80047e8:	2a25      	cmp	r2, #37	; 0x25
 80047ea:	d1f9      	bne.n	80047e0 <_svfiprintf_r+0x50>
 80047ec:	ebba 0b04 	subs.w	fp, sl, r4
 80047f0:	d00b      	beq.n	800480a <_svfiprintf_r+0x7a>
 80047f2:	465b      	mov	r3, fp
 80047f4:	4622      	mov	r2, r4
 80047f6:	4629      	mov	r1, r5
 80047f8:	4638      	mov	r0, r7
 80047fa:	f7ff ff6f 	bl	80046dc <__ssputs_r>
 80047fe:	3001      	adds	r0, #1
 8004800:	f000 80a9 	beq.w	8004956 <_svfiprintf_r+0x1c6>
 8004804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004806:	445a      	add	r2, fp
 8004808:	9209      	str	r2, [sp, #36]	; 0x24
 800480a:	f89a 3000 	ldrb.w	r3, [sl]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80a1 	beq.w	8004956 <_svfiprintf_r+0x1c6>
 8004814:	2300      	movs	r3, #0
 8004816:	f04f 32ff 	mov.w	r2, #4294967295
 800481a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800481e:	f10a 0a01 	add.w	sl, sl, #1
 8004822:	9304      	str	r3, [sp, #16]
 8004824:	9307      	str	r3, [sp, #28]
 8004826:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800482a:	931a      	str	r3, [sp, #104]	; 0x68
 800482c:	4654      	mov	r4, sl
 800482e:	2205      	movs	r2, #5
 8004830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004834:	4850      	ldr	r0, [pc, #320]	; (8004978 <_svfiprintf_r+0x1e8>)
 8004836:	f7fb fcd3 	bl	80001e0 <memchr>
 800483a:	9a04      	ldr	r2, [sp, #16]
 800483c:	b9d8      	cbnz	r0, 8004876 <_svfiprintf_r+0xe6>
 800483e:	06d0      	lsls	r0, r2, #27
 8004840:	bf44      	itt	mi
 8004842:	2320      	movmi	r3, #32
 8004844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004848:	0711      	lsls	r1, r2, #28
 800484a:	bf44      	itt	mi
 800484c:	232b      	movmi	r3, #43	; 0x2b
 800484e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004852:	f89a 3000 	ldrb.w	r3, [sl]
 8004856:	2b2a      	cmp	r3, #42	; 0x2a
 8004858:	d015      	beq.n	8004886 <_svfiprintf_r+0xf6>
 800485a:	9a07      	ldr	r2, [sp, #28]
 800485c:	4654      	mov	r4, sl
 800485e:	2000      	movs	r0, #0
 8004860:	f04f 0c0a 	mov.w	ip, #10
 8004864:	4621      	mov	r1, r4
 8004866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800486a:	3b30      	subs	r3, #48	; 0x30
 800486c:	2b09      	cmp	r3, #9
 800486e:	d94d      	bls.n	800490c <_svfiprintf_r+0x17c>
 8004870:	b1b0      	cbz	r0, 80048a0 <_svfiprintf_r+0x110>
 8004872:	9207      	str	r2, [sp, #28]
 8004874:	e014      	b.n	80048a0 <_svfiprintf_r+0x110>
 8004876:	eba0 0308 	sub.w	r3, r0, r8
 800487a:	fa09 f303 	lsl.w	r3, r9, r3
 800487e:	4313      	orrs	r3, r2
 8004880:	9304      	str	r3, [sp, #16]
 8004882:	46a2      	mov	sl, r4
 8004884:	e7d2      	b.n	800482c <_svfiprintf_r+0x9c>
 8004886:	9b03      	ldr	r3, [sp, #12]
 8004888:	1d19      	adds	r1, r3, #4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	9103      	str	r1, [sp, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	bfbb      	ittet	lt
 8004892:	425b      	neglt	r3, r3
 8004894:	f042 0202 	orrlt.w	r2, r2, #2
 8004898:	9307      	strge	r3, [sp, #28]
 800489a:	9307      	strlt	r3, [sp, #28]
 800489c:	bfb8      	it	lt
 800489e:	9204      	strlt	r2, [sp, #16]
 80048a0:	7823      	ldrb	r3, [r4, #0]
 80048a2:	2b2e      	cmp	r3, #46	; 0x2e
 80048a4:	d10c      	bne.n	80048c0 <_svfiprintf_r+0x130>
 80048a6:	7863      	ldrb	r3, [r4, #1]
 80048a8:	2b2a      	cmp	r3, #42	; 0x2a
 80048aa:	d134      	bne.n	8004916 <_svfiprintf_r+0x186>
 80048ac:	9b03      	ldr	r3, [sp, #12]
 80048ae:	1d1a      	adds	r2, r3, #4
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	9203      	str	r2, [sp, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bfb8      	it	lt
 80048b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80048bc:	3402      	adds	r4, #2
 80048be:	9305      	str	r3, [sp, #20]
 80048c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004988 <_svfiprintf_r+0x1f8>
 80048c4:	7821      	ldrb	r1, [r4, #0]
 80048c6:	2203      	movs	r2, #3
 80048c8:	4650      	mov	r0, sl
 80048ca:	f7fb fc89 	bl	80001e0 <memchr>
 80048ce:	b138      	cbz	r0, 80048e0 <_svfiprintf_r+0x150>
 80048d0:	9b04      	ldr	r3, [sp, #16]
 80048d2:	eba0 000a 	sub.w	r0, r0, sl
 80048d6:	2240      	movs	r2, #64	; 0x40
 80048d8:	4082      	lsls	r2, r0
 80048da:	4313      	orrs	r3, r2
 80048dc:	3401      	adds	r4, #1
 80048de:	9304      	str	r3, [sp, #16]
 80048e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e4:	4825      	ldr	r0, [pc, #148]	; (800497c <_svfiprintf_r+0x1ec>)
 80048e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048ea:	2206      	movs	r2, #6
 80048ec:	f7fb fc78 	bl	80001e0 <memchr>
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d038      	beq.n	8004966 <_svfiprintf_r+0x1d6>
 80048f4:	4b22      	ldr	r3, [pc, #136]	; (8004980 <_svfiprintf_r+0x1f0>)
 80048f6:	bb1b      	cbnz	r3, 8004940 <_svfiprintf_r+0x1b0>
 80048f8:	9b03      	ldr	r3, [sp, #12]
 80048fa:	3307      	adds	r3, #7
 80048fc:	f023 0307 	bic.w	r3, r3, #7
 8004900:	3308      	adds	r3, #8
 8004902:	9303      	str	r3, [sp, #12]
 8004904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004906:	4433      	add	r3, r6
 8004908:	9309      	str	r3, [sp, #36]	; 0x24
 800490a:	e768      	b.n	80047de <_svfiprintf_r+0x4e>
 800490c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004910:	460c      	mov	r4, r1
 8004912:	2001      	movs	r0, #1
 8004914:	e7a6      	b.n	8004864 <_svfiprintf_r+0xd4>
 8004916:	2300      	movs	r3, #0
 8004918:	3401      	adds	r4, #1
 800491a:	9305      	str	r3, [sp, #20]
 800491c:	4619      	mov	r1, r3
 800491e:	f04f 0c0a 	mov.w	ip, #10
 8004922:	4620      	mov	r0, r4
 8004924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004928:	3a30      	subs	r2, #48	; 0x30
 800492a:	2a09      	cmp	r2, #9
 800492c:	d903      	bls.n	8004936 <_svfiprintf_r+0x1a6>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0c6      	beq.n	80048c0 <_svfiprintf_r+0x130>
 8004932:	9105      	str	r1, [sp, #20]
 8004934:	e7c4      	b.n	80048c0 <_svfiprintf_r+0x130>
 8004936:	fb0c 2101 	mla	r1, ip, r1, r2
 800493a:	4604      	mov	r4, r0
 800493c:	2301      	movs	r3, #1
 800493e:	e7f0      	b.n	8004922 <_svfiprintf_r+0x192>
 8004940:	ab03      	add	r3, sp, #12
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	462a      	mov	r2, r5
 8004946:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <_svfiprintf_r+0x1f4>)
 8004948:	a904      	add	r1, sp, #16
 800494a:	4638      	mov	r0, r7
 800494c:	f3af 8000 	nop.w
 8004950:	1c42      	adds	r2, r0, #1
 8004952:	4606      	mov	r6, r0
 8004954:	d1d6      	bne.n	8004904 <_svfiprintf_r+0x174>
 8004956:	89ab      	ldrh	r3, [r5, #12]
 8004958:	065b      	lsls	r3, r3, #25
 800495a:	f53f af2d 	bmi.w	80047b8 <_svfiprintf_r+0x28>
 800495e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004960:	b01d      	add	sp, #116	; 0x74
 8004962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004966:	ab03      	add	r3, sp, #12
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	462a      	mov	r2, r5
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <_svfiprintf_r+0x1f4>)
 800496e:	a904      	add	r1, sp, #16
 8004970:	4638      	mov	r0, r7
 8004972:	f000 f9bd 	bl	8004cf0 <_printf_i>
 8004976:	e7eb      	b.n	8004950 <_svfiprintf_r+0x1c0>
 8004978:	08007e3c 	.word	0x08007e3c
 800497c:	08007e46 	.word	0x08007e46
 8004980:	00000000 	.word	0x00000000
 8004984:	080046dd 	.word	0x080046dd
 8004988:	08007e42 	.word	0x08007e42

0800498c <__sfputc_r>:
 800498c:	6893      	ldr	r3, [r2, #8]
 800498e:	3b01      	subs	r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	b410      	push	{r4}
 8004994:	6093      	str	r3, [r2, #8]
 8004996:	da08      	bge.n	80049aa <__sfputc_r+0x1e>
 8004998:	6994      	ldr	r4, [r2, #24]
 800499a:	42a3      	cmp	r3, r4
 800499c:	db01      	blt.n	80049a2 <__sfputc_r+0x16>
 800499e:	290a      	cmp	r1, #10
 80049a0:	d103      	bne.n	80049aa <__sfputc_r+0x1e>
 80049a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049a6:	f7ff bd20 	b.w	80043ea <__swbuf_r>
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	1c58      	adds	r0, r3, #1
 80049ae:	6010      	str	r0, [r2, #0]
 80049b0:	7019      	strb	r1, [r3, #0]
 80049b2:	4608      	mov	r0, r1
 80049b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <__sfputs_r>:
 80049ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049bc:	4606      	mov	r6, r0
 80049be:	460f      	mov	r7, r1
 80049c0:	4614      	mov	r4, r2
 80049c2:	18d5      	adds	r5, r2, r3
 80049c4:	42ac      	cmp	r4, r5
 80049c6:	d101      	bne.n	80049cc <__sfputs_r+0x12>
 80049c8:	2000      	movs	r0, #0
 80049ca:	e007      	b.n	80049dc <__sfputs_r+0x22>
 80049cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049d0:	463a      	mov	r2, r7
 80049d2:	4630      	mov	r0, r6
 80049d4:	f7ff ffda 	bl	800498c <__sfputc_r>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d1f3      	bne.n	80049c4 <__sfputs_r+0xa>
 80049dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049e0 <_vfiprintf_r>:
 80049e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e4:	460d      	mov	r5, r1
 80049e6:	b09d      	sub	sp, #116	; 0x74
 80049e8:	4614      	mov	r4, r2
 80049ea:	4698      	mov	r8, r3
 80049ec:	4606      	mov	r6, r0
 80049ee:	b118      	cbz	r0, 80049f8 <_vfiprintf_r+0x18>
 80049f0:	6a03      	ldr	r3, [r0, #32]
 80049f2:	b90b      	cbnz	r3, 80049f8 <_vfiprintf_r+0x18>
 80049f4:	f7ff fbbe 	bl	8004174 <__sinit>
 80049f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049fa:	07d9      	lsls	r1, r3, #31
 80049fc:	d405      	bmi.n	8004a0a <_vfiprintf_r+0x2a>
 80049fe:	89ab      	ldrh	r3, [r5, #12]
 8004a00:	059a      	lsls	r2, r3, #22
 8004a02:	d402      	bmi.n	8004a0a <_vfiprintf_r+0x2a>
 8004a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a06:	f7ff fe0d 	bl	8004624 <__retarget_lock_acquire_recursive>
 8004a0a:	89ab      	ldrh	r3, [r5, #12]
 8004a0c:	071b      	lsls	r3, r3, #28
 8004a0e:	d501      	bpl.n	8004a14 <_vfiprintf_r+0x34>
 8004a10:	692b      	ldr	r3, [r5, #16]
 8004a12:	b99b      	cbnz	r3, 8004a3c <_vfiprintf_r+0x5c>
 8004a14:	4629      	mov	r1, r5
 8004a16:	4630      	mov	r0, r6
 8004a18:	f7ff fd24 	bl	8004464 <__swsetup_r>
 8004a1c:	b170      	cbz	r0, 8004a3c <_vfiprintf_r+0x5c>
 8004a1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a20:	07dc      	lsls	r4, r3, #31
 8004a22:	d504      	bpl.n	8004a2e <_vfiprintf_r+0x4e>
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	b01d      	add	sp, #116	; 0x74
 8004a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a2e:	89ab      	ldrh	r3, [r5, #12]
 8004a30:	0598      	lsls	r0, r3, #22
 8004a32:	d4f7      	bmi.n	8004a24 <_vfiprintf_r+0x44>
 8004a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a36:	f7ff fdf6 	bl	8004626 <__retarget_lock_release_recursive>
 8004a3a:	e7f3      	b.n	8004a24 <_vfiprintf_r+0x44>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a40:	2320      	movs	r3, #32
 8004a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a4a:	2330      	movs	r3, #48	; 0x30
 8004a4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004c00 <_vfiprintf_r+0x220>
 8004a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a54:	f04f 0901 	mov.w	r9, #1
 8004a58:	4623      	mov	r3, r4
 8004a5a:	469a      	mov	sl, r3
 8004a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a60:	b10a      	cbz	r2, 8004a66 <_vfiprintf_r+0x86>
 8004a62:	2a25      	cmp	r2, #37	; 0x25
 8004a64:	d1f9      	bne.n	8004a5a <_vfiprintf_r+0x7a>
 8004a66:	ebba 0b04 	subs.w	fp, sl, r4
 8004a6a:	d00b      	beq.n	8004a84 <_vfiprintf_r+0xa4>
 8004a6c:	465b      	mov	r3, fp
 8004a6e:	4622      	mov	r2, r4
 8004a70:	4629      	mov	r1, r5
 8004a72:	4630      	mov	r0, r6
 8004a74:	f7ff ffa1 	bl	80049ba <__sfputs_r>
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f000 80a9 	beq.w	8004bd0 <_vfiprintf_r+0x1f0>
 8004a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a80:	445a      	add	r2, fp
 8004a82:	9209      	str	r2, [sp, #36]	; 0x24
 8004a84:	f89a 3000 	ldrb.w	r3, [sl]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80a1 	beq.w	8004bd0 <_vfiprintf_r+0x1f0>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295
 8004a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a98:	f10a 0a01 	add.w	sl, sl, #1
 8004a9c:	9304      	str	r3, [sp, #16]
 8004a9e:	9307      	str	r3, [sp, #28]
 8004aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004aa4:	931a      	str	r3, [sp, #104]	; 0x68
 8004aa6:	4654      	mov	r4, sl
 8004aa8:	2205      	movs	r2, #5
 8004aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aae:	4854      	ldr	r0, [pc, #336]	; (8004c00 <_vfiprintf_r+0x220>)
 8004ab0:	f7fb fb96 	bl	80001e0 <memchr>
 8004ab4:	9a04      	ldr	r2, [sp, #16]
 8004ab6:	b9d8      	cbnz	r0, 8004af0 <_vfiprintf_r+0x110>
 8004ab8:	06d1      	lsls	r1, r2, #27
 8004aba:	bf44      	itt	mi
 8004abc:	2320      	movmi	r3, #32
 8004abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ac2:	0713      	lsls	r3, r2, #28
 8004ac4:	bf44      	itt	mi
 8004ac6:	232b      	movmi	r3, #43	; 0x2b
 8004ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004acc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad2:	d015      	beq.n	8004b00 <_vfiprintf_r+0x120>
 8004ad4:	9a07      	ldr	r2, [sp, #28]
 8004ad6:	4654      	mov	r4, sl
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f04f 0c0a 	mov.w	ip, #10
 8004ade:	4621      	mov	r1, r4
 8004ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ae4:	3b30      	subs	r3, #48	; 0x30
 8004ae6:	2b09      	cmp	r3, #9
 8004ae8:	d94d      	bls.n	8004b86 <_vfiprintf_r+0x1a6>
 8004aea:	b1b0      	cbz	r0, 8004b1a <_vfiprintf_r+0x13a>
 8004aec:	9207      	str	r2, [sp, #28]
 8004aee:	e014      	b.n	8004b1a <_vfiprintf_r+0x13a>
 8004af0:	eba0 0308 	sub.w	r3, r0, r8
 8004af4:	fa09 f303 	lsl.w	r3, r9, r3
 8004af8:	4313      	orrs	r3, r2
 8004afa:	9304      	str	r3, [sp, #16]
 8004afc:	46a2      	mov	sl, r4
 8004afe:	e7d2      	b.n	8004aa6 <_vfiprintf_r+0xc6>
 8004b00:	9b03      	ldr	r3, [sp, #12]
 8004b02:	1d19      	adds	r1, r3, #4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	9103      	str	r1, [sp, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bfbb      	ittet	lt
 8004b0c:	425b      	neglt	r3, r3
 8004b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8004b12:	9307      	strge	r3, [sp, #28]
 8004b14:	9307      	strlt	r3, [sp, #28]
 8004b16:	bfb8      	it	lt
 8004b18:	9204      	strlt	r2, [sp, #16]
 8004b1a:	7823      	ldrb	r3, [r4, #0]
 8004b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b1e:	d10c      	bne.n	8004b3a <_vfiprintf_r+0x15a>
 8004b20:	7863      	ldrb	r3, [r4, #1]
 8004b22:	2b2a      	cmp	r3, #42	; 0x2a
 8004b24:	d134      	bne.n	8004b90 <_vfiprintf_r+0x1b0>
 8004b26:	9b03      	ldr	r3, [sp, #12]
 8004b28:	1d1a      	adds	r2, r3, #4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	9203      	str	r2, [sp, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bfb8      	it	lt
 8004b32:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b36:	3402      	adds	r4, #2
 8004b38:	9305      	str	r3, [sp, #20]
 8004b3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004c10 <_vfiprintf_r+0x230>
 8004b3e:	7821      	ldrb	r1, [r4, #0]
 8004b40:	2203      	movs	r2, #3
 8004b42:	4650      	mov	r0, sl
 8004b44:	f7fb fb4c 	bl	80001e0 <memchr>
 8004b48:	b138      	cbz	r0, 8004b5a <_vfiprintf_r+0x17a>
 8004b4a:	9b04      	ldr	r3, [sp, #16]
 8004b4c:	eba0 000a 	sub.w	r0, r0, sl
 8004b50:	2240      	movs	r2, #64	; 0x40
 8004b52:	4082      	lsls	r2, r0
 8004b54:	4313      	orrs	r3, r2
 8004b56:	3401      	adds	r4, #1
 8004b58:	9304      	str	r3, [sp, #16]
 8004b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b5e:	4829      	ldr	r0, [pc, #164]	; (8004c04 <_vfiprintf_r+0x224>)
 8004b60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b64:	2206      	movs	r2, #6
 8004b66:	f7fb fb3b 	bl	80001e0 <memchr>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d03f      	beq.n	8004bee <_vfiprintf_r+0x20e>
 8004b6e:	4b26      	ldr	r3, [pc, #152]	; (8004c08 <_vfiprintf_r+0x228>)
 8004b70:	bb1b      	cbnz	r3, 8004bba <_vfiprintf_r+0x1da>
 8004b72:	9b03      	ldr	r3, [sp, #12]
 8004b74:	3307      	adds	r3, #7
 8004b76:	f023 0307 	bic.w	r3, r3, #7
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	9303      	str	r3, [sp, #12]
 8004b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b80:	443b      	add	r3, r7
 8004b82:	9309      	str	r3, [sp, #36]	; 0x24
 8004b84:	e768      	b.n	8004a58 <_vfiprintf_r+0x78>
 8004b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	e7a6      	b.n	8004ade <_vfiprintf_r+0xfe>
 8004b90:	2300      	movs	r3, #0
 8004b92:	3401      	adds	r4, #1
 8004b94:	9305      	str	r3, [sp, #20]
 8004b96:	4619      	mov	r1, r3
 8004b98:	f04f 0c0a 	mov.w	ip, #10
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ba2:	3a30      	subs	r2, #48	; 0x30
 8004ba4:	2a09      	cmp	r2, #9
 8004ba6:	d903      	bls.n	8004bb0 <_vfiprintf_r+0x1d0>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0c6      	beq.n	8004b3a <_vfiprintf_r+0x15a>
 8004bac:	9105      	str	r1, [sp, #20]
 8004bae:	e7c4      	b.n	8004b3a <_vfiprintf_r+0x15a>
 8004bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e7f0      	b.n	8004b9c <_vfiprintf_r+0x1bc>
 8004bba:	ab03      	add	r3, sp, #12
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	462a      	mov	r2, r5
 8004bc0:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <_vfiprintf_r+0x22c>)
 8004bc2:	a904      	add	r1, sp, #16
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f3af 8000 	nop.w
 8004bca:	4607      	mov	r7, r0
 8004bcc:	1c78      	adds	r0, r7, #1
 8004bce:	d1d6      	bne.n	8004b7e <_vfiprintf_r+0x19e>
 8004bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bd2:	07d9      	lsls	r1, r3, #31
 8004bd4:	d405      	bmi.n	8004be2 <_vfiprintf_r+0x202>
 8004bd6:	89ab      	ldrh	r3, [r5, #12]
 8004bd8:	059a      	lsls	r2, r3, #22
 8004bda:	d402      	bmi.n	8004be2 <_vfiprintf_r+0x202>
 8004bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bde:	f7ff fd22 	bl	8004626 <__retarget_lock_release_recursive>
 8004be2:	89ab      	ldrh	r3, [r5, #12]
 8004be4:	065b      	lsls	r3, r3, #25
 8004be6:	f53f af1d 	bmi.w	8004a24 <_vfiprintf_r+0x44>
 8004bea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bec:	e71c      	b.n	8004a28 <_vfiprintf_r+0x48>
 8004bee:	ab03      	add	r3, sp, #12
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	462a      	mov	r2, r5
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <_vfiprintf_r+0x22c>)
 8004bf6:	a904      	add	r1, sp, #16
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f000 f879 	bl	8004cf0 <_printf_i>
 8004bfe:	e7e4      	b.n	8004bca <_vfiprintf_r+0x1ea>
 8004c00:	08007e3c 	.word	0x08007e3c
 8004c04:	08007e46 	.word	0x08007e46
 8004c08:	00000000 	.word	0x00000000
 8004c0c:	080049bb 	.word	0x080049bb
 8004c10:	08007e42 	.word	0x08007e42

08004c14 <_printf_common>:
 8004c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	4616      	mov	r6, r2
 8004c1a:	4699      	mov	r9, r3
 8004c1c:	688a      	ldr	r2, [r1, #8]
 8004c1e:	690b      	ldr	r3, [r1, #16]
 8004c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c24:	4293      	cmp	r3, r2
 8004c26:	bfb8      	it	lt
 8004c28:	4613      	movlt	r3, r2
 8004c2a:	6033      	str	r3, [r6, #0]
 8004c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c30:	4607      	mov	r7, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	b10a      	cbz	r2, 8004c3a <_printf_common+0x26>
 8004c36:	3301      	adds	r3, #1
 8004c38:	6033      	str	r3, [r6, #0]
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	0699      	lsls	r1, r3, #26
 8004c3e:	bf42      	ittt	mi
 8004c40:	6833      	ldrmi	r3, [r6, #0]
 8004c42:	3302      	addmi	r3, #2
 8004c44:	6033      	strmi	r3, [r6, #0]
 8004c46:	6825      	ldr	r5, [r4, #0]
 8004c48:	f015 0506 	ands.w	r5, r5, #6
 8004c4c:	d106      	bne.n	8004c5c <_printf_common+0x48>
 8004c4e:	f104 0a19 	add.w	sl, r4, #25
 8004c52:	68e3      	ldr	r3, [r4, #12]
 8004c54:	6832      	ldr	r2, [r6, #0]
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	42ab      	cmp	r3, r5
 8004c5a:	dc26      	bgt.n	8004caa <_printf_common+0x96>
 8004c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c60:	1e13      	subs	r3, r2, #0
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	bf18      	it	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	0692      	lsls	r2, r2, #26
 8004c6a:	d42b      	bmi.n	8004cc4 <_printf_common+0xb0>
 8004c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c70:	4649      	mov	r1, r9
 8004c72:	4638      	mov	r0, r7
 8004c74:	47c0      	blx	r8
 8004c76:	3001      	adds	r0, #1
 8004c78:	d01e      	beq.n	8004cb8 <_printf_common+0xa4>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	6922      	ldr	r2, [r4, #16]
 8004c7e:	f003 0306 	and.w	r3, r3, #6
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	bf02      	ittt	eq
 8004c86:	68e5      	ldreq	r5, [r4, #12]
 8004c88:	6833      	ldreq	r3, [r6, #0]
 8004c8a:	1aed      	subeq	r5, r5, r3
 8004c8c:	68a3      	ldr	r3, [r4, #8]
 8004c8e:	bf0c      	ite	eq
 8004c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c94:	2500      	movne	r5, #0
 8004c96:	4293      	cmp	r3, r2
 8004c98:	bfc4      	itt	gt
 8004c9a:	1a9b      	subgt	r3, r3, r2
 8004c9c:	18ed      	addgt	r5, r5, r3
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	341a      	adds	r4, #26
 8004ca2:	42b5      	cmp	r5, r6
 8004ca4:	d11a      	bne.n	8004cdc <_printf_common+0xc8>
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	e008      	b.n	8004cbc <_printf_common+0xa8>
 8004caa:	2301      	movs	r3, #1
 8004cac:	4652      	mov	r2, sl
 8004cae:	4649      	mov	r1, r9
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	47c0      	blx	r8
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d103      	bne.n	8004cc0 <_printf_common+0xac>
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc0:	3501      	adds	r5, #1
 8004cc2:	e7c6      	b.n	8004c52 <_printf_common+0x3e>
 8004cc4:	18e1      	adds	r1, r4, r3
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	2030      	movs	r0, #48	; 0x30
 8004cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cce:	4422      	add	r2, r4
 8004cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cd8:	3302      	adds	r3, #2
 8004cda:	e7c7      	b.n	8004c6c <_printf_common+0x58>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4622      	mov	r2, r4
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d0e6      	beq.n	8004cb8 <_printf_common+0xa4>
 8004cea:	3601      	adds	r6, #1
 8004cec:	e7d9      	b.n	8004ca2 <_printf_common+0x8e>
	...

08004cf0 <_printf_i>:
 8004cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf4:	7e0f      	ldrb	r7, [r1, #24]
 8004cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cf8:	2f78      	cmp	r7, #120	; 0x78
 8004cfa:	4691      	mov	r9, r2
 8004cfc:	4680      	mov	r8, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	469a      	mov	sl, r3
 8004d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d06:	d807      	bhi.n	8004d18 <_printf_i+0x28>
 8004d08:	2f62      	cmp	r7, #98	; 0x62
 8004d0a:	d80a      	bhi.n	8004d22 <_printf_i+0x32>
 8004d0c:	2f00      	cmp	r7, #0
 8004d0e:	f000 80d4 	beq.w	8004eba <_printf_i+0x1ca>
 8004d12:	2f58      	cmp	r7, #88	; 0x58
 8004d14:	f000 80c0 	beq.w	8004e98 <_printf_i+0x1a8>
 8004d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d20:	e03a      	b.n	8004d98 <_printf_i+0xa8>
 8004d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d26:	2b15      	cmp	r3, #21
 8004d28:	d8f6      	bhi.n	8004d18 <_printf_i+0x28>
 8004d2a:	a101      	add	r1, pc, #4	; (adr r1, 8004d30 <_printf_i+0x40>)
 8004d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d30:	08004d89 	.word	0x08004d89
 8004d34:	08004d9d 	.word	0x08004d9d
 8004d38:	08004d19 	.word	0x08004d19
 8004d3c:	08004d19 	.word	0x08004d19
 8004d40:	08004d19 	.word	0x08004d19
 8004d44:	08004d19 	.word	0x08004d19
 8004d48:	08004d9d 	.word	0x08004d9d
 8004d4c:	08004d19 	.word	0x08004d19
 8004d50:	08004d19 	.word	0x08004d19
 8004d54:	08004d19 	.word	0x08004d19
 8004d58:	08004d19 	.word	0x08004d19
 8004d5c:	08004ea1 	.word	0x08004ea1
 8004d60:	08004dc9 	.word	0x08004dc9
 8004d64:	08004e5b 	.word	0x08004e5b
 8004d68:	08004d19 	.word	0x08004d19
 8004d6c:	08004d19 	.word	0x08004d19
 8004d70:	08004ec3 	.word	0x08004ec3
 8004d74:	08004d19 	.word	0x08004d19
 8004d78:	08004dc9 	.word	0x08004dc9
 8004d7c:	08004d19 	.word	0x08004d19
 8004d80:	08004d19 	.word	0x08004d19
 8004d84:	08004e63 	.word	0x08004e63
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	1d1a      	adds	r2, r3, #4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	602a      	str	r2, [r5, #0]
 8004d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e09f      	b.n	8004edc <_printf_i+0x1ec>
 8004d9c:	6820      	ldr	r0, [r4, #0]
 8004d9e:	682b      	ldr	r3, [r5, #0]
 8004da0:	0607      	lsls	r7, r0, #24
 8004da2:	f103 0104 	add.w	r1, r3, #4
 8004da6:	6029      	str	r1, [r5, #0]
 8004da8:	d501      	bpl.n	8004dae <_printf_i+0xbe>
 8004daa:	681e      	ldr	r6, [r3, #0]
 8004dac:	e003      	b.n	8004db6 <_printf_i+0xc6>
 8004dae:	0646      	lsls	r6, r0, #25
 8004db0:	d5fb      	bpl.n	8004daa <_printf_i+0xba>
 8004db2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004db6:	2e00      	cmp	r6, #0
 8004db8:	da03      	bge.n	8004dc2 <_printf_i+0xd2>
 8004dba:	232d      	movs	r3, #45	; 0x2d
 8004dbc:	4276      	negs	r6, r6
 8004dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc2:	485a      	ldr	r0, [pc, #360]	; (8004f2c <_printf_i+0x23c>)
 8004dc4:	230a      	movs	r3, #10
 8004dc6:	e012      	b.n	8004dee <_printf_i+0xfe>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	6820      	ldr	r0, [r4, #0]
 8004dcc:	1d19      	adds	r1, r3, #4
 8004dce:	6029      	str	r1, [r5, #0]
 8004dd0:	0605      	lsls	r5, r0, #24
 8004dd2:	d501      	bpl.n	8004dd8 <_printf_i+0xe8>
 8004dd4:	681e      	ldr	r6, [r3, #0]
 8004dd6:	e002      	b.n	8004dde <_printf_i+0xee>
 8004dd8:	0641      	lsls	r1, r0, #25
 8004dda:	d5fb      	bpl.n	8004dd4 <_printf_i+0xe4>
 8004ddc:	881e      	ldrh	r6, [r3, #0]
 8004dde:	4853      	ldr	r0, [pc, #332]	; (8004f2c <_printf_i+0x23c>)
 8004de0:	2f6f      	cmp	r7, #111	; 0x6f
 8004de2:	bf0c      	ite	eq
 8004de4:	2308      	moveq	r3, #8
 8004de6:	230a      	movne	r3, #10
 8004de8:	2100      	movs	r1, #0
 8004dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dee:	6865      	ldr	r5, [r4, #4]
 8004df0:	60a5      	str	r5, [r4, #8]
 8004df2:	2d00      	cmp	r5, #0
 8004df4:	bfa2      	ittt	ge
 8004df6:	6821      	ldrge	r1, [r4, #0]
 8004df8:	f021 0104 	bicge.w	r1, r1, #4
 8004dfc:	6021      	strge	r1, [r4, #0]
 8004dfe:	b90e      	cbnz	r6, 8004e04 <_printf_i+0x114>
 8004e00:	2d00      	cmp	r5, #0
 8004e02:	d04b      	beq.n	8004e9c <_printf_i+0x1ac>
 8004e04:	4615      	mov	r5, r2
 8004e06:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e0a:	fb03 6711 	mls	r7, r3, r1, r6
 8004e0e:	5dc7      	ldrb	r7, [r0, r7]
 8004e10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e14:	4637      	mov	r7, r6
 8004e16:	42bb      	cmp	r3, r7
 8004e18:	460e      	mov	r6, r1
 8004e1a:	d9f4      	bls.n	8004e06 <_printf_i+0x116>
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d10b      	bne.n	8004e38 <_printf_i+0x148>
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	07de      	lsls	r6, r3, #31
 8004e24:	d508      	bpl.n	8004e38 <_printf_i+0x148>
 8004e26:	6923      	ldr	r3, [r4, #16]
 8004e28:	6861      	ldr	r1, [r4, #4]
 8004e2a:	4299      	cmp	r1, r3
 8004e2c:	bfde      	ittt	le
 8004e2e:	2330      	movle	r3, #48	; 0x30
 8004e30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e38:	1b52      	subs	r2, r2, r5
 8004e3a:	6122      	str	r2, [r4, #16]
 8004e3c:	f8cd a000 	str.w	sl, [sp]
 8004e40:	464b      	mov	r3, r9
 8004e42:	aa03      	add	r2, sp, #12
 8004e44:	4621      	mov	r1, r4
 8004e46:	4640      	mov	r0, r8
 8004e48:	f7ff fee4 	bl	8004c14 <_printf_common>
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d14a      	bne.n	8004ee6 <_printf_i+0x1f6>
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	b004      	add	sp, #16
 8004e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	f043 0320 	orr.w	r3, r3, #32
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	4833      	ldr	r0, [pc, #204]	; (8004f30 <_printf_i+0x240>)
 8004e64:	2778      	movs	r7, #120	; 0x78
 8004e66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	6829      	ldr	r1, [r5, #0]
 8004e6e:	061f      	lsls	r7, r3, #24
 8004e70:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e74:	d402      	bmi.n	8004e7c <_printf_i+0x18c>
 8004e76:	065f      	lsls	r7, r3, #25
 8004e78:	bf48      	it	mi
 8004e7a:	b2b6      	uxthmi	r6, r6
 8004e7c:	07df      	lsls	r7, r3, #31
 8004e7e:	bf48      	it	mi
 8004e80:	f043 0320 	orrmi.w	r3, r3, #32
 8004e84:	6029      	str	r1, [r5, #0]
 8004e86:	bf48      	it	mi
 8004e88:	6023      	strmi	r3, [r4, #0]
 8004e8a:	b91e      	cbnz	r6, 8004e94 <_printf_i+0x1a4>
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	f023 0320 	bic.w	r3, r3, #32
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	2310      	movs	r3, #16
 8004e96:	e7a7      	b.n	8004de8 <_printf_i+0xf8>
 8004e98:	4824      	ldr	r0, [pc, #144]	; (8004f2c <_printf_i+0x23c>)
 8004e9a:	e7e4      	b.n	8004e66 <_printf_i+0x176>
 8004e9c:	4615      	mov	r5, r2
 8004e9e:	e7bd      	b.n	8004e1c <_printf_i+0x12c>
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	6826      	ldr	r6, [r4, #0]
 8004ea4:	6961      	ldr	r1, [r4, #20]
 8004ea6:	1d18      	adds	r0, r3, #4
 8004ea8:	6028      	str	r0, [r5, #0]
 8004eaa:	0635      	lsls	r5, r6, #24
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	d501      	bpl.n	8004eb4 <_printf_i+0x1c4>
 8004eb0:	6019      	str	r1, [r3, #0]
 8004eb2:	e002      	b.n	8004eba <_printf_i+0x1ca>
 8004eb4:	0670      	lsls	r0, r6, #25
 8004eb6:	d5fb      	bpl.n	8004eb0 <_printf_i+0x1c0>
 8004eb8:	8019      	strh	r1, [r3, #0]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6123      	str	r3, [r4, #16]
 8004ebe:	4615      	mov	r5, r2
 8004ec0:	e7bc      	b.n	8004e3c <_printf_i+0x14c>
 8004ec2:	682b      	ldr	r3, [r5, #0]
 8004ec4:	1d1a      	adds	r2, r3, #4
 8004ec6:	602a      	str	r2, [r5, #0]
 8004ec8:	681d      	ldr	r5, [r3, #0]
 8004eca:	6862      	ldr	r2, [r4, #4]
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f7fb f986 	bl	80001e0 <memchr>
 8004ed4:	b108      	cbz	r0, 8004eda <_printf_i+0x1ea>
 8004ed6:	1b40      	subs	r0, r0, r5
 8004ed8:	6060      	str	r0, [r4, #4]
 8004eda:	6863      	ldr	r3, [r4, #4]
 8004edc:	6123      	str	r3, [r4, #16]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ee4:	e7aa      	b.n	8004e3c <_printf_i+0x14c>
 8004ee6:	6923      	ldr	r3, [r4, #16]
 8004ee8:	462a      	mov	r2, r5
 8004eea:	4649      	mov	r1, r9
 8004eec:	4640      	mov	r0, r8
 8004eee:	47d0      	blx	sl
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d0ad      	beq.n	8004e50 <_printf_i+0x160>
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	079b      	lsls	r3, r3, #30
 8004ef8:	d413      	bmi.n	8004f22 <_printf_i+0x232>
 8004efa:	68e0      	ldr	r0, [r4, #12]
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	4298      	cmp	r0, r3
 8004f00:	bfb8      	it	lt
 8004f02:	4618      	movlt	r0, r3
 8004f04:	e7a6      	b.n	8004e54 <_printf_i+0x164>
 8004f06:	2301      	movs	r3, #1
 8004f08:	4632      	mov	r2, r6
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	47d0      	blx	sl
 8004f10:	3001      	adds	r0, #1
 8004f12:	d09d      	beq.n	8004e50 <_printf_i+0x160>
 8004f14:	3501      	adds	r5, #1
 8004f16:	68e3      	ldr	r3, [r4, #12]
 8004f18:	9903      	ldr	r1, [sp, #12]
 8004f1a:	1a5b      	subs	r3, r3, r1
 8004f1c:	42ab      	cmp	r3, r5
 8004f1e:	dcf2      	bgt.n	8004f06 <_printf_i+0x216>
 8004f20:	e7eb      	b.n	8004efa <_printf_i+0x20a>
 8004f22:	2500      	movs	r5, #0
 8004f24:	f104 0619 	add.w	r6, r4, #25
 8004f28:	e7f5      	b.n	8004f16 <_printf_i+0x226>
 8004f2a:	bf00      	nop
 8004f2c:	08007e4d 	.word	0x08007e4d
 8004f30:	08007e5e 	.word	0x08007e5e

08004f34 <__sflush_r>:
 8004f34:	898a      	ldrh	r2, [r1, #12]
 8004f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	0710      	lsls	r0, r2, #28
 8004f3e:	460c      	mov	r4, r1
 8004f40:	d458      	bmi.n	8004ff4 <__sflush_r+0xc0>
 8004f42:	684b      	ldr	r3, [r1, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	dc05      	bgt.n	8004f54 <__sflush_r+0x20>
 8004f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	dc02      	bgt.n	8004f54 <__sflush_r+0x20>
 8004f4e:	2000      	movs	r0, #0
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f56:	2e00      	cmp	r6, #0
 8004f58:	d0f9      	beq.n	8004f4e <__sflush_r+0x1a>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f60:	682f      	ldr	r7, [r5, #0]
 8004f62:	6a21      	ldr	r1, [r4, #32]
 8004f64:	602b      	str	r3, [r5, #0]
 8004f66:	d032      	beq.n	8004fce <__sflush_r+0x9a>
 8004f68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	075a      	lsls	r2, r3, #29
 8004f6e:	d505      	bpl.n	8004f7c <__sflush_r+0x48>
 8004f70:	6863      	ldr	r3, [r4, #4]
 8004f72:	1ac0      	subs	r0, r0, r3
 8004f74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f76:	b10b      	cbz	r3, 8004f7c <__sflush_r+0x48>
 8004f78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f7a:	1ac0      	subs	r0, r0, r3
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f82:	6a21      	ldr	r1, [r4, #32]
 8004f84:	4628      	mov	r0, r5
 8004f86:	47b0      	blx	r6
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	89a3      	ldrh	r3, [r4, #12]
 8004f8c:	d106      	bne.n	8004f9c <__sflush_r+0x68>
 8004f8e:	6829      	ldr	r1, [r5, #0]
 8004f90:	291d      	cmp	r1, #29
 8004f92:	d82b      	bhi.n	8004fec <__sflush_r+0xb8>
 8004f94:	4a29      	ldr	r2, [pc, #164]	; (800503c <__sflush_r+0x108>)
 8004f96:	410a      	asrs	r2, r1
 8004f98:	07d6      	lsls	r6, r2, #31
 8004f9a:	d427      	bmi.n	8004fec <__sflush_r+0xb8>
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	6062      	str	r2, [r4, #4]
 8004fa0:	04d9      	lsls	r1, r3, #19
 8004fa2:	6922      	ldr	r2, [r4, #16]
 8004fa4:	6022      	str	r2, [r4, #0]
 8004fa6:	d504      	bpl.n	8004fb2 <__sflush_r+0x7e>
 8004fa8:	1c42      	adds	r2, r0, #1
 8004faa:	d101      	bne.n	8004fb0 <__sflush_r+0x7c>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b903      	cbnz	r3, 8004fb2 <__sflush_r+0x7e>
 8004fb0:	6560      	str	r0, [r4, #84]	; 0x54
 8004fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fb4:	602f      	str	r7, [r5, #0]
 8004fb6:	2900      	cmp	r1, #0
 8004fb8:	d0c9      	beq.n	8004f4e <__sflush_r+0x1a>
 8004fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fbe:	4299      	cmp	r1, r3
 8004fc0:	d002      	beq.n	8004fc8 <__sflush_r+0x94>
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f7ff fb3e 	bl	8004644 <_free_r>
 8004fc8:	2000      	movs	r0, #0
 8004fca:	6360      	str	r0, [r4, #52]	; 0x34
 8004fcc:	e7c0      	b.n	8004f50 <__sflush_r+0x1c>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	47b0      	blx	r6
 8004fd4:	1c41      	adds	r1, r0, #1
 8004fd6:	d1c8      	bne.n	8004f6a <__sflush_r+0x36>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0c5      	beq.n	8004f6a <__sflush_r+0x36>
 8004fde:	2b1d      	cmp	r3, #29
 8004fe0:	d001      	beq.n	8004fe6 <__sflush_r+0xb2>
 8004fe2:	2b16      	cmp	r3, #22
 8004fe4:	d101      	bne.n	8004fea <__sflush_r+0xb6>
 8004fe6:	602f      	str	r7, [r5, #0]
 8004fe8:	e7b1      	b.n	8004f4e <__sflush_r+0x1a>
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff0:	81a3      	strh	r3, [r4, #12]
 8004ff2:	e7ad      	b.n	8004f50 <__sflush_r+0x1c>
 8004ff4:	690f      	ldr	r7, [r1, #16]
 8004ff6:	2f00      	cmp	r7, #0
 8004ff8:	d0a9      	beq.n	8004f4e <__sflush_r+0x1a>
 8004ffa:	0793      	lsls	r3, r2, #30
 8004ffc:	680e      	ldr	r6, [r1, #0]
 8004ffe:	bf08      	it	eq
 8005000:	694b      	ldreq	r3, [r1, #20]
 8005002:	600f      	str	r7, [r1, #0]
 8005004:	bf18      	it	ne
 8005006:	2300      	movne	r3, #0
 8005008:	eba6 0807 	sub.w	r8, r6, r7
 800500c:	608b      	str	r3, [r1, #8]
 800500e:	f1b8 0f00 	cmp.w	r8, #0
 8005012:	dd9c      	ble.n	8004f4e <__sflush_r+0x1a>
 8005014:	6a21      	ldr	r1, [r4, #32]
 8005016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005018:	4643      	mov	r3, r8
 800501a:	463a      	mov	r2, r7
 800501c:	4628      	mov	r0, r5
 800501e:	47b0      	blx	r6
 8005020:	2800      	cmp	r0, #0
 8005022:	dc06      	bgt.n	8005032 <__sflush_r+0xfe>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800502a:	81a3      	strh	r3, [r4, #12]
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	e78e      	b.n	8004f50 <__sflush_r+0x1c>
 8005032:	4407      	add	r7, r0
 8005034:	eba8 0800 	sub.w	r8, r8, r0
 8005038:	e7e9      	b.n	800500e <__sflush_r+0xda>
 800503a:	bf00      	nop
 800503c:	dfbffffe 	.word	0xdfbffffe

08005040 <_fflush_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	690b      	ldr	r3, [r1, #16]
 8005044:	4605      	mov	r5, r0
 8005046:	460c      	mov	r4, r1
 8005048:	b913      	cbnz	r3, 8005050 <_fflush_r+0x10>
 800504a:	2500      	movs	r5, #0
 800504c:	4628      	mov	r0, r5
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	b118      	cbz	r0, 800505a <_fflush_r+0x1a>
 8005052:	6a03      	ldr	r3, [r0, #32]
 8005054:	b90b      	cbnz	r3, 800505a <_fflush_r+0x1a>
 8005056:	f7ff f88d 	bl	8004174 <__sinit>
 800505a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f3      	beq.n	800504a <_fflush_r+0xa>
 8005062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005064:	07d0      	lsls	r0, r2, #31
 8005066:	d404      	bmi.n	8005072 <_fflush_r+0x32>
 8005068:	0599      	lsls	r1, r3, #22
 800506a:	d402      	bmi.n	8005072 <_fflush_r+0x32>
 800506c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800506e:	f7ff fad9 	bl	8004624 <__retarget_lock_acquire_recursive>
 8005072:	4628      	mov	r0, r5
 8005074:	4621      	mov	r1, r4
 8005076:	f7ff ff5d 	bl	8004f34 <__sflush_r>
 800507a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800507c:	07da      	lsls	r2, r3, #31
 800507e:	4605      	mov	r5, r0
 8005080:	d4e4      	bmi.n	800504c <_fflush_r+0xc>
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	059b      	lsls	r3, r3, #22
 8005086:	d4e1      	bmi.n	800504c <_fflush_r+0xc>
 8005088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800508a:	f7ff facc 	bl	8004626 <__retarget_lock_release_recursive>
 800508e:	e7dd      	b.n	800504c <_fflush_r+0xc>

08005090 <__swhatbuf_r>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	460c      	mov	r4, r1
 8005094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005098:	2900      	cmp	r1, #0
 800509a:	b096      	sub	sp, #88	; 0x58
 800509c:	4615      	mov	r5, r2
 800509e:	461e      	mov	r6, r3
 80050a0:	da0d      	bge.n	80050be <__swhatbuf_r+0x2e>
 80050a2:	89a3      	ldrh	r3, [r4, #12]
 80050a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050a8:	f04f 0100 	mov.w	r1, #0
 80050ac:	bf0c      	ite	eq
 80050ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80050b2:	2340      	movne	r3, #64	; 0x40
 80050b4:	2000      	movs	r0, #0
 80050b6:	6031      	str	r1, [r6, #0]
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	b016      	add	sp, #88	; 0x58
 80050bc:	bd70      	pop	{r4, r5, r6, pc}
 80050be:	466a      	mov	r2, sp
 80050c0:	f000 f862 	bl	8005188 <_fstat_r>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	dbec      	blt.n	80050a2 <__swhatbuf_r+0x12>
 80050c8:	9901      	ldr	r1, [sp, #4]
 80050ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80050ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80050d2:	4259      	negs	r1, r3
 80050d4:	4159      	adcs	r1, r3
 80050d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050da:	e7eb      	b.n	80050b4 <__swhatbuf_r+0x24>

080050dc <__smakebuf_r>:
 80050dc:	898b      	ldrh	r3, [r1, #12]
 80050de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050e0:	079d      	lsls	r5, r3, #30
 80050e2:	4606      	mov	r6, r0
 80050e4:	460c      	mov	r4, r1
 80050e6:	d507      	bpl.n	80050f8 <__smakebuf_r+0x1c>
 80050e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	2301      	movs	r3, #1
 80050f2:	6163      	str	r3, [r4, #20]
 80050f4:	b002      	add	sp, #8
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	ab01      	add	r3, sp, #4
 80050fa:	466a      	mov	r2, sp
 80050fc:	f7ff ffc8 	bl	8005090 <__swhatbuf_r>
 8005100:	9900      	ldr	r1, [sp, #0]
 8005102:	4605      	mov	r5, r0
 8005104:	4630      	mov	r0, r6
 8005106:	f7fe ff2f 	bl	8003f68 <_malloc_r>
 800510a:	b948      	cbnz	r0, 8005120 <__smakebuf_r+0x44>
 800510c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005110:	059a      	lsls	r2, r3, #22
 8005112:	d4ef      	bmi.n	80050f4 <__smakebuf_r+0x18>
 8005114:	f023 0303 	bic.w	r3, r3, #3
 8005118:	f043 0302 	orr.w	r3, r3, #2
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	e7e3      	b.n	80050e8 <__smakebuf_r+0xc>
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	6020      	str	r0, [r4, #0]
 8005124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005128:	81a3      	strh	r3, [r4, #12]
 800512a:	9b00      	ldr	r3, [sp, #0]
 800512c:	6163      	str	r3, [r4, #20]
 800512e:	9b01      	ldr	r3, [sp, #4]
 8005130:	6120      	str	r0, [r4, #16]
 8005132:	b15b      	cbz	r3, 800514c <__smakebuf_r+0x70>
 8005134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005138:	4630      	mov	r0, r6
 800513a:	f000 f837 	bl	80051ac <_isatty_r>
 800513e:	b128      	cbz	r0, 800514c <__smakebuf_r+0x70>
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	f023 0303 	bic.w	r3, r3, #3
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	431d      	orrs	r5, r3
 8005150:	81a5      	strh	r5, [r4, #12]
 8005152:	e7cf      	b.n	80050f4 <__smakebuf_r+0x18>

08005154 <memmove>:
 8005154:	4288      	cmp	r0, r1
 8005156:	b510      	push	{r4, lr}
 8005158:	eb01 0402 	add.w	r4, r1, r2
 800515c:	d902      	bls.n	8005164 <memmove+0x10>
 800515e:	4284      	cmp	r4, r0
 8005160:	4623      	mov	r3, r4
 8005162:	d807      	bhi.n	8005174 <memmove+0x20>
 8005164:	1e43      	subs	r3, r0, #1
 8005166:	42a1      	cmp	r1, r4
 8005168:	d008      	beq.n	800517c <memmove+0x28>
 800516a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800516e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005172:	e7f8      	b.n	8005166 <memmove+0x12>
 8005174:	4402      	add	r2, r0
 8005176:	4601      	mov	r1, r0
 8005178:	428a      	cmp	r2, r1
 800517a:	d100      	bne.n	800517e <memmove+0x2a>
 800517c:	bd10      	pop	{r4, pc}
 800517e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005186:	e7f7      	b.n	8005178 <memmove+0x24>

08005188 <_fstat_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4d07      	ldr	r5, [pc, #28]	; (80051a8 <_fstat_r+0x20>)
 800518c:	2300      	movs	r3, #0
 800518e:	4604      	mov	r4, r0
 8005190:	4608      	mov	r0, r1
 8005192:	4611      	mov	r1, r2
 8005194:	602b      	str	r3, [r5, #0]
 8005196:	f7fe fd3c 	bl	8003c12 <_fstat>
 800519a:	1c43      	adds	r3, r0, #1
 800519c:	d102      	bne.n	80051a4 <_fstat_r+0x1c>
 800519e:	682b      	ldr	r3, [r5, #0]
 80051a0:	b103      	cbz	r3, 80051a4 <_fstat_r+0x1c>
 80051a2:	6023      	str	r3, [r4, #0]
 80051a4:	bd38      	pop	{r3, r4, r5, pc}
 80051a6:	bf00      	nop
 80051a8:	200005a0 	.word	0x200005a0

080051ac <_isatty_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4d06      	ldr	r5, [pc, #24]	; (80051c8 <_isatty_r+0x1c>)
 80051b0:	2300      	movs	r3, #0
 80051b2:	4604      	mov	r4, r0
 80051b4:	4608      	mov	r0, r1
 80051b6:	602b      	str	r3, [r5, #0]
 80051b8:	f7fe fd3b 	bl	8003c32 <_isatty>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_isatty_r+0x1a>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_isatty_r+0x1a>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	200005a0 	.word	0x200005a0

080051cc <_realloc_r>:
 80051cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d0:	4680      	mov	r8, r0
 80051d2:	4614      	mov	r4, r2
 80051d4:	460e      	mov	r6, r1
 80051d6:	b921      	cbnz	r1, 80051e2 <_realloc_r+0x16>
 80051d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051dc:	4611      	mov	r1, r2
 80051de:	f7fe bec3 	b.w	8003f68 <_malloc_r>
 80051e2:	b92a      	cbnz	r2, 80051f0 <_realloc_r+0x24>
 80051e4:	f7ff fa2e 	bl	8004644 <_free_r>
 80051e8:	4625      	mov	r5, r4
 80051ea:	4628      	mov	r0, r5
 80051ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f0:	f000 f81b 	bl	800522a <_malloc_usable_size_r>
 80051f4:	4284      	cmp	r4, r0
 80051f6:	4607      	mov	r7, r0
 80051f8:	d802      	bhi.n	8005200 <_realloc_r+0x34>
 80051fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051fe:	d812      	bhi.n	8005226 <_realloc_r+0x5a>
 8005200:	4621      	mov	r1, r4
 8005202:	4640      	mov	r0, r8
 8005204:	f7fe feb0 	bl	8003f68 <_malloc_r>
 8005208:	4605      	mov	r5, r0
 800520a:	2800      	cmp	r0, #0
 800520c:	d0ed      	beq.n	80051ea <_realloc_r+0x1e>
 800520e:	42bc      	cmp	r4, r7
 8005210:	4622      	mov	r2, r4
 8005212:	4631      	mov	r1, r6
 8005214:	bf28      	it	cs
 8005216:	463a      	movcs	r2, r7
 8005218:	f7ff fa06 	bl	8004628 <memcpy>
 800521c:	4631      	mov	r1, r6
 800521e:	4640      	mov	r0, r8
 8005220:	f7ff fa10 	bl	8004644 <_free_r>
 8005224:	e7e1      	b.n	80051ea <_realloc_r+0x1e>
 8005226:	4635      	mov	r5, r6
 8005228:	e7df      	b.n	80051ea <_realloc_r+0x1e>

0800522a <_malloc_usable_size_r>:
 800522a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522e:	1f18      	subs	r0, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	bfbc      	itt	lt
 8005234:	580b      	ldrlt	r3, [r1, r0]
 8005236:	18c0      	addlt	r0, r0, r3
 8005238:	4770      	bx	lr

0800523a <sqrt>:
 800523a:	b538      	push	{r3, r4, r5, lr}
 800523c:	ed2d 8b02 	vpush	{d8}
 8005240:	ec55 4b10 	vmov	r4, r5, d0
 8005244:	f000 f826 	bl	8005294 <__ieee754_sqrt>
 8005248:	4622      	mov	r2, r4
 800524a:	462b      	mov	r3, r5
 800524c:	4620      	mov	r0, r4
 800524e:	4629      	mov	r1, r5
 8005250:	eeb0 8a40 	vmov.f32	s16, s0
 8005254:	eef0 8a60 	vmov.f32	s17, s1
 8005258:	f7fb fc68 	bl	8000b2c <__aeabi_dcmpun>
 800525c:	b990      	cbnz	r0, 8005284 <sqrt+0x4a>
 800525e:	2200      	movs	r2, #0
 8005260:	2300      	movs	r3, #0
 8005262:	4620      	mov	r0, r4
 8005264:	4629      	mov	r1, r5
 8005266:	f7fb fc39 	bl	8000adc <__aeabi_dcmplt>
 800526a:	b158      	cbz	r0, 8005284 <sqrt+0x4a>
 800526c:	f7ff f9b0 	bl	80045d0 <__errno>
 8005270:	2321      	movs	r3, #33	; 0x21
 8005272:	6003      	str	r3, [r0, #0]
 8005274:	2200      	movs	r2, #0
 8005276:	2300      	movs	r3, #0
 8005278:	4610      	mov	r0, r2
 800527a:	4619      	mov	r1, r3
 800527c:	f7fb fae6 	bl	800084c <__aeabi_ddiv>
 8005280:	ec41 0b18 	vmov	d8, r0, r1
 8005284:	eeb0 0a48 	vmov.f32	s0, s16
 8005288:	eef0 0a68 	vmov.f32	s1, s17
 800528c:	ecbd 8b02 	vpop	{d8}
 8005290:	bd38      	pop	{r3, r4, r5, pc}
	...

08005294 <__ieee754_sqrt>:
 8005294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005298:	ec55 4b10 	vmov	r4, r5, d0
 800529c:	4e67      	ldr	r6, [pc, #412]	; (800543c <__ieee754_sqrt+0x1a8>)
 800529e:	43ae      	bics	r6, r5
 80052a0:	ee10 0a10 	vmov	r0, s0
 80052a4:	ee10 2a10 	vmov	r2, s0
 80052a8:	4629      	mov	r1, r5
 80052aa:	462b      	mov	r3, r5
 80052ac:	d10d      	bne.n	80052ca <__ieee754_sqrt+0x36>
 80052ae:	f7fb f9a3 	bl	80005f8 <__aeabi_dmul>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4620      	mov	r0, r4
 80052b8:	4629      	mov	r1, r5
 80052ba:	f7fa ffe7 	bl	800028c <__adddf3>
 80052be:	4604      	mov	r4, r0
 80052c0:	460d      	mov	r5, r1
 80052c2:	ec45 4b10 	vmov	d0, r4, r5
 80052c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	2d00      	cmp	r5, #0
 80052cc:	dc0b      	bgt.n	80052e6 <__ieee754_sqrt+0x52>
 80052ce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80052d2:	4326      	orrs	r6, r4
 80052d4:	d0f5      	beq.n	80052c2 <__ieee754_sqrt+0x2e>
 80052d6:	b135      	cbz	r5, 80052e6 <__ieee754_sqrt+0x52>
 80052d8:	f7fa ffd6 	bl	8000288 <__aeabi_dsub>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	f7fb fab4 	bl	800084c <__aeabi_ddiv>
 80052e4:	e7eb      	b.n	80052be <__ieee754_sqrt+0x2a>
 80052e6:	1509      	asrs	r1, r1, #20
 80052e8:	f000 808d 	beq.w	8005406 <__ieee754_sqrt+0x172>
 80052ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80052f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052f8:	07c9      	lsls	r1, r1, #31
 80052fa:	bf5c      	itt	pl
 80052fc:	005b      	lslpl	r3, r3, #1
 80052fe:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8005302:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005306:	bf58      	it	pl
 8005308:	0052      	lslpl	r2, r2, #1
 800530a:	2500      	movs	r5, #0
 800530c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005310:	1076      	asrs	r6, r6, #1
 8005312:	0052      	lsls	r2, r2, #1
 8005314:	f04f 0e16 	mov.w	lr, #22
 8005318:	46ac      	mov	ip, r5
 800531a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800531e:	eb0c 0001 	add.w	r0, ip, r1
 8005322:	4298      	cmp	r0, r3
 8005324:	bfde      	ittt	le
 8005326:	1a1b      	suble	r3, r3, r0
 8005328:	eb00 0c01 	addle.w	ip, r0, r1
 800532c:	186d      	addle	r5, r5, r1
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	f1be 0e01 	subs.w	lr, lr, #1
 8005334:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005338:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800533c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005340:	d1ed      	bne.n	800531e <__ieee754_sqrt+0x8a>
 8005342:	4674      	mov	r4, lr
 8005344:	2720      	movs	r7, #32
 8005346:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800534a:	4563      	cmp	r3, ip
 800534c:	eb01 000e 	add.w	r0, r1, lr
 8005350:	dc02      	bgt.n	8005358 <__ieee754_sqrt+0xc4>
 8005352:	d113      	bne.n	800537c <__ieee754_sqrt+0xe8>
 8005354:	4290      	cmp	r0, r2
 8005356:	d811      	bhi.n	800537c <__ieee754_sqrt+0xe8>
 8005358:	2800      	cmp	r0, #0
 800535a:	eb00 0e01 	add.w	lr, r0, r1
 800535e:	da57      	bge.n	8005410 <__ieee754_sqrt+0x17c>
 8005360:	f1be 0f00 	cmp.w	lr, #0
 8005364:	db54      	blt.n	8005410 <__ieee754_sqrt+0x17c>
 8005366:	f10c 0801 	add.w	r8, ip, #1
 800536a:	eba3 030c 	sub.w	r3, r3, ip
 800536e:	4290      	cmp	r0, r2
 8005370:	bf88      	it	hi
 8005372:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005376:	1a12      	subs	r2, r2, r0
 8005378:	440c      	add	r4, r1
 800537a:	46c4      	mov	ip, r8
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	3f01      	subs	r7, #1
 8005380:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005384:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005388:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800538c:	d1dd      	bne.n	800534a <__ieee754_sqrt+0xb6>
 800538e:	4313      	orrs	r3, r2
 8005390:	d01b      	beq.n	80053ca <__ieee754_sqrt+0x136>
 8005392:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005440 <__ieee754_sqrt+0x1ac>
 8005396:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005444 <__ieee754_sqrt+0x1b0>
 800539a:	e9da 0100 	ldrd	r0, r1, [sl]
 800539e:	e9db 2300 	ldrd	r2, r3, [fp]
 80053a2:	f7fa ff71 	bl	8000288 <__aeabi_dsub>
 80053a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4640      	mov	r0, r8
 80053b0:	4649      	mov	r1, r9
 80053b2:	f7fb fb9d 	bl	8000af0 <__aeabi_dcmple>
 80053b6:	b140      	cbz	r0, 80053ca <__ieee754_sqrt+0x136>
 80053b8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80053bc:	e9da 0100 	ldrd	r0, r1, [sl]
 80053c0:	e9db 2300 	ldrd	r2, r3, [fp]
 80053c4:	d126      	bne.n	8005414 <__ieee754_sqrt+0x180>
 80053c6:	3501      	adds	r5, #1
 80053c8:	463c      	mov	r4, r7
 80053ca:	106a      	asrs	r2, r5, #1
 80053cc:	0863      	lsrs	r3, r4, #1
 80053ce:	07e9      	lsls	r1, r5, #31
 80053d0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80053d4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80053d8:	bf48      	it	mi
 80053da:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80053de:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80053e2:	461c      	mov	r4, r3
 80053e4:	e76d      	b.n	80052c2 <__ieee754_sqrt+0x2e>
 80053e6:	0ad3      	lsrs	r3, r2, #11
 80053e8:	3815      	subs	r0, #21
 80053ea:	0552      	lsls	r2, r2, #21
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0fa      	beq.n	80053e6 <__ieee754_sqrt+0x152>
 80053f0:	02dc      	lsls	r4, r3, #11
 80053f2:	d50a      	bpl.n	800540a <__ieee754_sqrt+0x176>
 80053f4:	f1c1 0420 	rsb	r4, r1, #32
 80053f8:	fa22 f404 	lsr.w	r4, r2, r4
 80053fc:	1e4d      	subs	r5, r1, #1
 80053fe:	408a      	lsls	r2, r1
 8005400:	4323      	orrs	r3, r4
 8005402:	1b41      	subs	r1, r0, r5
 8005404:	e772      	b.n	80052ec <__ieee754_sqrt+0x58>
 8005406:	4608      	mov	r0, r1
 8005408:	e7f0      	b.n	80053ec <__ieee754_sqrt+0x158>
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	3101      	adds	r1, #1
 800540e:	e7ef      	b.n	80053f0 <__ieee754_sqrt+0x15c>
 8005410:	46e0      	mov	r8, ip
 8005412:	e7aa      	b.n	800536a <__ieee754_sqrt+0xd6>
 8005414:	f7fa ff3a 	bl	800028c <__adddf3>
 8005418:	e9da 8900 	ldrd	r8, r9, [sl]
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4640      	mov	r0, r8
 8005422:	4649      	mov	r1, r9
 8005424:	f7fb fb5a 	bl	8000adc <__aeabi_dcmplt>
 8005428:	b120      	cbz	r0, 8005434 <__ieee754_sqrt+0x1a0>
 800542a:	1ca0      	adds	r0, r4, #2
 800542c:	bf08      	it	eq
 800542e:	3501      	addeq	r5, #1
 8005430:	3402      	adds	r4, #2
 8005432:	e7ca      	b.n	80053ca <__ieee754_sqrt+0x136>
 8005434:	3401      	adds	r4, #1
 8005436:	f024 0401 	bic.w	r4, r4, #1
 800543a:	e7c6      	b.n	80053ca <__ieee754_sqrt+0x136>
 800543c:	7ff00000 	.word	0x7ff00000
 8005440:	20000070 	.word	0x20000070
 8005444:	20000078 	.word	0x20000078

08005448 <_init>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	bf00      	nop
 800544c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544e:	bc08      	pop	{r3}
 8005450:	469e      	mov	lr, r3
 8005452:	4770      	bx	lr

08005454 <_fini>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	bf00      	nop
 8005458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545a:	bc08      	pop	{r3}
 800545c:	469e      	mov	lr, r3
 800545e:	4770      	bx	lr
